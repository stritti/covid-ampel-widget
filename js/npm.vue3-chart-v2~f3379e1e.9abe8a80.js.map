{"version":3,"sources":["webpack:///./node_modules/vue3-chart-v2/src/components/BaseChart.js"],"names":["useChartInfo","state","myName","userData","userOptions","setChartData","payload","setChartOption","generateChart","chartsId","chartsType","name","props","chartId","type","String","required","chartType","width","Number","default","height","cssClasses","styles","Object","chartObj","this","destroy","methods","charObj","data","datasets","pop","ctx","$refs","canvas","getContext","options","document","getElementById","backgroundColor","labels","responsive","computed","watch","prevState","newState","renderChart","currentChartOption","style","class","ref","id","Doughnut"],"mappings":"qMAGA,SAASA,IACP,MAAMC,EAAQ,eAAS,CACrBC,OAAQ,GACRC,SAAU,GACVC,YAAa,KAGf,SAASC,EAAaC,GACpBL,EAAME,SAAWG,EAGnB,SAASC,EAAeD,GACtBL,EAAMG,YAAcE,EAGtB,MAAO,CACLL,QACAI,eACAE,kBASJ,SAASC,EAAcC,EAAUC,GAC/B,IAAI,MAAET,EAAK,aAAEI,EAAY,eAAEE,GAAmBP,IAE9C,OAAO,eAAgB,CACrBW,KAAM,YACNC,MAAO,CACLC,QAAS,CACPC,KAAMC,OACNC,UAAU,GAEZC,UAAW,CACTH,KAAMC,OACNC,UAAU,GAEZE,MAAO,CACLJ,KAAMK,OACNH,UAAU,EACVI,QAAS,KAEXC,OAAQ,CACNP,KAAMK,OACNH,UAAU,EACVI,QAAS,KAEXE,WAAY,CACVR,KAAMC,OACNC,UAAU,EACVI,QAAS,IAEXG,OAAQ,CACNT,KAAMU,OACNR,UAAU,IAGd,OACE,MAAO,CACLf,MAAO,CACLwB,SAAU,QAMhB,gBACMC,KAAKzB,MAAMwB,UACbC,KAAKzB,MAAMwB,SAASE,WAGxBC,QAAS,CACP,YAAYzB,EAAUC,GACpBC,EAAaF,GACbI,EAAeH,GAEXsB,KAAKzB,MAAMwB,SAQW,MAAtBC,KAAKzB,MAAM4B,SAA+C,MAA5BH,KAAKzB,MAAMwB,SAASK,MAAgBJ,KAAKzB,MAAMwB,SAASK,KAAKC,SAASC,MAExG,IAAIC,EAAMP,KAAKQ,MAAMC,OAAOC,WAAW,MACvCV,KAAKzB,MAAMwB,SAAW,IAAI,IAAMQ,EAAK,CACnCnB,KAAMJ,EACNoB,KAAM3B,EACNkC,QAASjC,MAKf,cACE,GAAIkC,SAASC,eAAe9B,GAAW,CACrC,IAAIwB,EAAMK,SAASC,eAAe9B,GAAU2B,WAAW,MACvDV,KAAKzB,MAAMwB,SAAW,IAAI,IAAMQ,EAAK,CACnCnB,KAAMJ,EACNoB,KAAM,CACJC,SAAU,CACR,CACED,KAAM,CAAC,EAAG,EAAG,EAAG,GAChBU,gBAAiB,CAAC,MAAO,SAAU,OAAQ,WAI/CC,OAAQ,CAAC,MAAO,SAAU,OAAQ,UAEpCJ,QAAS,CACPK,YAAY,OAOpBC,SAAU,CACR,mBACE,OAAO1C,EAAME,UAEf,qBACE,OAAOF,EAAMG,cAGjBwC,MAAO,CACL,UAAUC,EAAWC,GACfD,IAAcC,GAChBpB,KAAKqB,YAAYD,EAAUpB,KAAKsB,sBAItC,SAOE,OAAO,eAAE,MAAO,CAAEC,MAAOvB,KAAKH,OAAQ2B,MAAOxB,KAAKJ,YAAc,CAC9D,eAAE,SAAU,CACV6B,IAAK,SACLC,GAAI1B,KAAKb,QACTK,MAAOQ,KAAKR,MACZG,OAAQK,KAAKL,cAOXb,EAAc,YAAa,OACxBA,EAAc,eAAgB,UAD7C,MAEM6C,EAAW7C,EAAc,iBAAkB,YAC3BA,EAAc,sBAAuB,iBAC9CA,EAAc,aAAc,QAC7BA,EAAc,YAAa,OACrBA,EAAc,cAAe,aACjCA,EAAc,cAAe,SAC3BA,EAAc,gBAAiB","file":"js/npm.vue3-chart-v2~f3379e1e.9abe8a80.js","sourcesContent":["import Chart from 'chart.js'\r\nimport { defineComponent, h, reactive } from 'vue'\r\n\r\nfunction useChartInfo() {\r\n  const state = reactive({\r\n    myName: '',\r\n    userData: {},\r\n    userOptions: {}\r\n  })\r\n\r\n  function setChartData(payload) {\r\n    state.userData = payload\r\n  }\r\n\r\n  function setChartOption(payload) {\r\n    state.userOptions = payload\r\n  }\r\n\r\n  return {\r\n    state,\r\n    setChartData,\r\n    setChartOption\r\n  }\r\n}\r\n\r\n/**\r\n *\r\n * @param chartsId string\r\n * @param chartsType string\r\n */\r\nfunction generateChart(chartsId, chartsType) {\r\n  let { state, setChartData, setChartOption } = useChartInfo()\r\n\r\n  return defineComponent({\r\n    name: 'BaseChart',\r\n    props: {\r\n      chartId: {\r\n        type: String,\r\n        required: false\r\n      },\r\n      chartType: {\r\n        type: String,\r\n        required: false\r\n      },\r\n      width: {\r\n        type: Number,\r\n        required: false,\r\n        default: 400\r\n      },\r\n      height: {\r\n        type: Number,\r\n        required: false,\r\n        default: 400\r\n      },\r\n      cssClasses: {\r\n        type: String,\r\n        required: false,\r\n        default: ''\r\n      },\r\n      styles: {\r\n        type: Object,\r\n        required: false\r\n      }\r\n    },\r\n    data() {\r\n      return {\r\n        state: {\r\n          chartObj: null\r\n        }\r\n      }\r\n    },\r\n    // emits: ['chart:update'],\r\n\r\n    beforeUnmount() {\r\n      if (this.state.chartObj) {\r\n        this.state.chartObj.destroy()\r\n      }\r\n    },\r\n    methods: {\r\n      renderChart(userData, userOptions) {\r\n        setChartData(userData)\r\n        setChartOption(userOptions)\r\n\r\n        if (this.state.chartObj) {\r\n          // this.state.chartObj.destroy()\r\n        }\r\n        // if (!this.$refs.canvas) {\r\n        //   throw new Error('Please remove the <template></template> tags from your chart component. See https://vue-chartjs.org/guide/#vue-single-file-components')\r\n        // }\r\n\r\n        // REMOVE OLD DATA FIRST BEFORE UPDATE.\r\n        if (this.state.charObj != null && this.state.chartObj.data != null) { this.state.chartObj.data.datasets.pop() }\r\n\r\n        let ctx = this.$refs.canvas.getContext('2d')\r\n        this.state.chartObj = new Chart(ctx, {\r\n          type: chartsType,\r\n          data: userData,\r\n          options: userOptions\r\n          // plugins: this.$data._plugins\r\n        })\r\n      }\r\n    },\r\n    beforeMount() {\r\n      if (document.getElementById(chartsId)) {\r\n        let ctx = document.getElementById(chartsId).getContext('2d')\r\n        this.state.chartObj = new Chart(ctx, {\r\n          type: chartsType,\r\n          data: {\r\n            datasets: [\r\n              {\r\n                data: [1, 2, 3, 4],\r\n                backgroundColor: ['Red', 'Yellow', 'Blue', 'Green']\r\n              }\r\n            ],\r\n            // These labels appear in the legend and in the tooltips when hovering different arcs\r\n            labels: ['Red', 'Yellow', 'Blue', 'Green']\r\n          },\r\n          options: {\r\n            responsive: false\r\n          }\r\n          // options: this.options,\r\n          // plugins: this.$data._plugins\r\n        })\r\n      }\r\n    },\r\n    computed: {\r\n      currentChartData() {\r\n        return state.userData\r\n      },\r\n      currentChartOption() {\r\n        return state.userOptions\r\n      }\r\n    },\r\n    watch: {\r\n      chartData(prevState, newState) {\r\n        if (prevState !== newState) {\r\n          this.renderChart(newState, this.currentChartOption)\r\n        }\r\n      }\r\n    },\r\n    render() {\r\n      // return h('canvas', {\r\n      //   ref: 'canvas',\r\n      //   id: this.chartId,\r\n      //   width: this.width,\r\n      //   height: this.height\r\n      // })\r\n      return h('div', { style: this.styles, class: this.cssClasses }, [\r\n        h('canvas', {\r\n          ref: 'canvas',\r\n          id: this.chartId,\r\n          width: this.width,\r\n          height: this.height\r\n        })\r\n      ])\r\n    }\r\n  })\r\n}\r\n\r\nconst Bar = generateChart('bar-chart', 'bar')\r\nconst Bubble = generateChart('bubble-chart', 'bubble')\r\nconst Doughnut = generateChart('doughnut-chart', 'doughnut')\r\nconst HorizontalBar = generateChart('horizontalbar-chart', 'horizontalBar')\r\nconst Line = generateChart('line-chart', 'line')\r\nconst Pie = generateChart('pie-chart', 'pie')\r\nconst PolarArea = generateChart('polar-chart', 'polarArea')\r\nconst Radar = generateChart('radar-chart', 'radar')\r\nconst Scatter = generateChart('scatter-chart', 'scatter')\r\n\r\nexport {\r\n  Bar,\r\n  Bubble,\r\n  Doughnut,\r\n  HorizontalBar,\r\n  Line,\r\n  Pie,\r\n  PolarArea,\r\n  Radar,\r\n  Scatter,\r\n  generateChart\r\n  // renderChart\r\n}\r\n"],"sourceRoot":""}