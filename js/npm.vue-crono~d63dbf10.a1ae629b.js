(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["npm.vue-crono~d63dbf10"],{"646b":function(t,n,o){"use strict";o.d(n,"a",(function(){return r}));const i=function(t,n){return t.constructor!==Array?n(t):t.map(n)},s=function(t){this._cron=this._cron||{};const n=t.method;this._cron[n]&&this._cron[n].timerRunning||(!1===t.autoStart?this._cron[n]={timerRunning:!1}:this._cron[n]={timer:setInterval(()=>{this.$options.methods[n].call(this),this._cron[n].lastInvocation=+new Date},t.time),timerRunning:!0,time:t.time,lastInvocation:+new Date})},r={mounted(){void 0!==this.$options.cron&&i(this.$options.cron,s.bind(this)),this.$cron={stop:t=>{let n=!1;if(i(this.$options.cron,o=>{if(o.method===t){if(n=!0,!this._cron[o.method].timerRunning)return;clearInterval(this._cron[o.method].timer),this._cron[o.method].timerRunning=!1}}),!n)throw new Error(`Cron method '${t}' does not exist and cannot be stopped.`)},start:t=>{let n=!1;if(i(this.$options.cron,o=>{o.method===t&&(n=!0,s.call(this,{...o,autoStart:!0}))}),!n)throw new Error(`Cron method '${t}' does not exist and cannot be started.`)},restart:t=>{this.$cron.stop(t),this.$cron.start(t)},time:(t,n)=>{const o=+new Date;this._cron[t].timerRunning||(this._cron[t].lastInvocation=o);const i=o-this._cron[t].lastInvocation;this.$cron.stop(t),i>n?(this.$options.methods[t].call(this),s.call(this,{method:t,time:n})):setTimeout(()=>{this.$options.methods[t].call(this),s.call(this,{method:t,time:n})},n-i)}}},beforeDestroy(){for(const t in this._cron)void 0!==this._cron[t]&&clearInterval(this._cron[t].timer)}}}}]);
//# sourceMappingURL=npm.vue-crono~d63dbf10.a1ae629b.js.map