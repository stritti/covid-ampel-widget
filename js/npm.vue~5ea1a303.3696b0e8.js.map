{"version":3,"sources":["webpack:///./node_modules/@vue/runtime-core/dist/runtime-core.esm-bundler.js"],"names":["stack","warn","msg","args","instance","length","component","appWarnHandler","appContext","config","warnHandler","trace","getComponentTrace","callWithErrorHandling","join","proxy","map","vnode","formatComponentName","type","warnArgs","push","formatTrace","console","currentVNode","normalizedStack","last","recurseCount","parentInstance","parent","logs","forEach","entry","i","formatTraceEntry","postfix","isRoot","open","close","props","formatProps","res","keys","Object","slice","key","formatProp","value","raw","JSON","stringify","name","fn","err","handleError","callWithAsyncErrorHandling","catch","values","throwInDev","contextVNode","cur","exposedInstance","errorInfo","errorCapturedHooks","ec","appErrorHandler","errorHandler","logError","error","isFlushing","isFlushPending","queue","flushIndex","pendingPreFlushCbs","activePreFlushCbs","preFlushIndex","pendingPostFlushCbs","activePostFlushCbs","postFlushIndex","resolvedPromise","Promise","resolve","currentFlushPromise","currentPreFlushParentJob","nextTick","p","then","this","bind","findInsertionIndex","job","start","end","jobId","getId","middle","middleJobId","queueJob","includes","allowRecurse","pos","splice","queueFlush","flushJobs","invalidateJob","indexOf","queueCb","cb","activeQueue","pendingQueue","index","queuePreFlushCb","queuePostFlushCb","flushPreFlushCbs","seen","parentJob","Set","flushPostFlushCbs","deduped","sort","a","b","id","Infinity","Map","emit","event","rawArgs","isModelListener","startsWith","modelArg","modifiersKey","number","trim","handlerName","handler","onceHandler","emitted","normalizeEmitsOptions","comp","asMixin","deopt","undefined","__emits","emits","normalized","hasExtends","extendEmits","normalizedFromExtend","mixins","extends","isEmitListener","options","replace","toLowerCase","isRenderingCompiledSlot","setCompiledSlotRendering","n","renderSlot","slots","fallback","noSlotted","slot","openBlock","validSlotContent","ensureValidVNode","rendered","createBlock","Fragment","_","scopeId","slotScopeIds","vnodes","some","child","isVNode","Comment","children","currentRenderingInstance","currentScopeId","setCurrentRenderingInstance","prev","__scopeId","pushScopeId","popScopeId","withScopeId","_id","withCtx","ctx","renderFnWithContext","prevInstance","closeBlock","_c","renderComponentRoot","Component","withProxy","propsOptions","attrs","render","renderCache","data","setupState","result","fallthroughAttrs","shapeFlag","proxyToUse","normalizeVNode","call","getFunctionalFallthrough","root","inheritAttrs","filterModelListeners","cloneVNode","dirs","concat","transition","blockStack","createVNode","filterSingleRoot","singleRoot","shouldUpdateComponent","prevVNode","nextVNode","optimized","prevProps","prevChildren","nextProps","nextChildren","patchFlag","emitsOptions","$stable","hasPropsChanged","dynamicProps","nextKeys","updateHOCHostEl","el","subTree","isSuspense","__isSuspense","normalizeSuspenseChildren","content","normalizeSuspenseSlot","default","s","singleChild","queueEffectWithSuspense","suspense","pendingBranch","effects","initProps","rawProps","isStateful","isSSR","InternalObjectKey","propsDefaults","create","setFullProps","updateProps","rawPrevProps","rawCurrentProps","kebabKey","resolvePropValue","propsToUpdate","camelizedKey","needCastKeys","camelKey","opt","hasDefault","defaultValue","Function","setCurrentInstance","normalizePropsOptions","__props","extendProps","normalizedKey","validatePropName","prop","booleanIndex","getTypeIndex","Boolean","stringIndex","String","getType","ctor","match","toString","isSameType","expectedTypes","findIndex","t","injectHook","hook","target","currentInstance","prepend","hooks","wrappedHook","__weh","isUnmounted","unshift","createHook","lifecycle","isInSSRComponentSetup","onBeforeMount","onMounted","onBeforeUpdate","onUpdated","onBeforeUnmount","onUnmounted","onRenderTriggered","onRenderTracked","onErrorCaptured","watchEffect","effect","doWatch","INITIAL_WATCHER_VALUE","watch","source","immediate","deep","flush","onTrack","onTrigger","getter","cleanup","forceTrigger","_shallow","traverse","onInvalidate","baseGetter","runner","onStop","oldValue","active","newValue","scheduler","queuePostRenderEffect","isMounted","lazy","recordInstanceBoundEffect","instanceWatch","publicThis","has","add","v","useTransitionState","state","isLeaving","isUnmounting","leavingVNodes","TransitionHookValidator","Array","BaseTransitionImpl","mode","appear","persisted","onBeforeEnter","onEnter","onAfterEnter","onEnterCancelled","onBeforeLeave","onLeave","onAfterLeave","onLeaveCancelled","onBeforeAppear","onAppear","onAfterAppear","onAppearCancelled","getCurrentInstance","prevTransitionKey","getTransitionRawChildren","emptyPlaceholder","innerChild","getKeepAliveChild","enterHooks","resolveTransitionHooks","setTransitionHooks","oldChild","oldInnerChild","transitionKeyChanged","getTransitionKey","isSameVNodeType","leavingHooks","afterLeave","update","delayLeave","earlyRemove","delayedLeave","leavingVNodesCache","getLeavingNodesForType","_leaveCb","BaseTransition","get","set","callHook","leavingVNode","afterHook","cancelHook","called","done","_enterCb","cancelled","remove","isKeepAlive","ssContent","clone","ssFallback","keepComment","ret","keyedFragmentCount","__isKeepAlive","RegExp","matches","pattern","split","test","onActivated","registerKeepAliveHook","onDeactivated","__wdc","current","isDeactivated","injectToKeepAliveRoot","keepAliveRoot","injected","resetShapeFlag","getInnerChild","isInternalKey","normalizeSlotValue","normalizeSlot","rawSlot","normalizeObjectSlots","rawSlots","_ctx","normalizeVNodeSlots","initSlots","updateSlots","needDeletionCheck","deletionComparisonTarget","withDirectives","directives","internalInstance","bindings","dir","arg","modifiers","mounted","updated","invokeDirectiveHook","oldBindings","binding","createAppContext","app","isNativeTag","performance","globalProperties","optionMergeStrategies","isCustomElement","components","provides","uid","createAppAPI","hydrate","rootComponent","rootProps","context","installedPlugins","_uid","_component","_props","_container","_context","version","plugin","install","mixin","directive","rootContainer","isHydrate","isSVG","__vue_app__","hasMismatch","isSVGContainer","container","namespaceURI","tagName","isComment","node","nodeType","createHydrationFunctions","rendererInternals","mt","mountComponent","patch","o","patchProp","nextSibling","parentNode","insert","createComment","hydrateNode","firstChild","parentComponent","parentSuspense","isFragmentStart","onMismatch","handleMismatch","ref","domType","nextNode","Text","Static","needToAdoptContent","staticCount","outerHTML","anchor","hydrateFragment","hydrateElement","hydrateComponent","loadAsync","__asyncLoader","locateClosingAsyncAnchor","hydrateChildren","setRef","dynamicChildren","onClick","vnodeHooks","onVnodeBeforeMount","invokeVNodeHook","onVnodeMounted","innerHTML","textContent","next","parentVNode","l","fragmentSlotScopeIds","isFragment","initFeatureFlags","defineComponent","setup","isAsyncWrapper","prodEffectOptions","rawRef","oldRawRef","r","exposed","owner","oldRef","refs","doSet","createRenderer","baseCreateRenderer","createHydrationRenderer","createHydrationFns","hostInsert","hostRemove","hostPatchProp","forcePatchProp","hostForcePatchProp","createElement","hostCreateElement","createText","hostCreateText","hostCreateComment","setText","hostSetText","setElementText","hostSetElementText","hostParentNode","hostNextSibling","setScopeId","hostSetScopeId","cloneNode","hostCloneNode","insertStaticContent","hostInsertStaticContent","n1","n2","getNextHostNode","unmount","processText","processCommentNode","mountStaticNode","processFragment","processElement","processComponent","process","internals","moveStaticNode","removeStaticNode","mountElement","patchElement","vnodeHook","is","mountChildren","unmountChildren","needCallTransitionHooks","beforeEnter","enter","cloneIfMounted","oldProps","newProps","onVnodeBeforeUpdate","patchProps","class","style","areChildrenSVG","patchBlockChildren","patchChildren","onVnodeUpdated","oldChildren","newChildren","fallbackContainer","oldVNode","newVNode","fragmentStartAnchor","fragmentEndAnchor","traverseStaticChildren","activate","updateComponent","initialVNode","createComponentInstance","renderer","setupComponent","asyncDep","registerDep","setupRenderEffect","placeholder","asyncResolved","updateComponentPreRender","bu","u","originNext","nextTree","prevTree","bm","m","scopedInitialVNode","c1","prevShapeFlag","c2","patchKeyedChildren","patchUnkeyedChildren","oldLength","newLength","commonLength","Math","min","nextChild","parentAnchor","l2","e1","e2","nextPos","s1","s2","keyToNewIndexMap","j","patched","toBePatched","moved","maxNewIndexSoFar","newIndexToOldIndexMap","prevChild","newIndex","increasingNewIndexSequence","getSequence","nextIndex","move","moveType","needTransition","leave","performLeave","doRemove","deactivate","shouldInvokeDirs","onVnodeBeforeUnmount","unmountComponent","onVnodeUnmounted","removeFragment","performRemove","bum","um","suspenseId","pendingId","deps","_vnode","mc","pc","pbc","createApp","shallow","ch1","ch2","arr","c","len","arrI","isTeleport","__isTeleport","isTeleportDisabled","disabled","isTargetSVG","SVGElement","resolveTarget","select","targetSelector","to","TeleportImpl","querySelector","mainAnchor","targetAnchor","mount","wasDisabled","currentContainer","currentAnchor","moveTeleport","nextTarget","hydrateTeleport","isReorder","targetNode","_lpa","Teleport","COMPONENTS","DIRECTIVES","resolveComponent","maybeSelfReference","resolveAsset","NULL_DYNAMIC_COMPONENT","Symbol","resolveDynamicComponent","resolveDirective","warnMissing","selfName","getComponentName","registry","currentBlock","disableTracking","pop","shouldTrack","__v_isVNode","normalizeKey","normalizeRef","_createVNode","isBlockNode","cloned","normalizeChildren","isClassComponent","__vccOpts","klass","extraProps","mergeRef","mergedProps","mergeProps","createTextVNode","text","flag","createStaticVNode","numberOfNodes","createCommentVNode","asBlock","slotFlag","toMerge","existing","incoming","provide","parentProvides","inject","treatDefaultAsFactory","arguments","shouldCacheAccess","applyOptions","deferredData","deferredWatch","deferredProvide","extendsOptions","dataOptions","computed","computedOptions","methods","watchOptions","provideOptions","injectOptions","beforeMount","beforeUpdate","activated","deactivated","beforeDestroy","beforeUnmount","destroyed","unmounted","renderTracked","renderTriggered","errorCaptured","expose","globalMixins","callSyncHook","applyMixins","from","methodHandler","dataFn","resolveData","defineProperty","enumerable","configurable","createWatcher","Reflect","ownKeys","callHookWithMixinAndExtends","base","selfHook","createPathGetter","path","segments","resolveMergedOptions","__merged","mergeOptions","strats","getPublicInstance","isStatefulComponent","publicPropertiesMap","$","$el","$data","$props","$attrs","$slots","$refs","$parent","$root","$emit","$options","$forceUpdate","$nextTick","$watch","PublicInstanceProxyHandlers","accessCache","normalizedProps","publicGetter","cssModule","__cssModules","RuntimeCompiledPublicInstanceProxyHandlers","unscopables","emptyAppContext","uid$1","setupContext","bc","da","rtg","rtc","compile","setupResult","setupStatefulComponent","Proxy","createSetupContext","resolvedResult","handleSetupResult","e","finishComponentSetup","isRuntimeOnly","template","delimiters","_rc","classifyRE","classify","str","toUpperCase","displayName","__file","inferFromRegistry","getterOrOptions","h","propsOrChildren","prototype","initCustomFormatter","renderList","renderItem","iterator"],"mappings":"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","file":"js/npm.vue~5ea1a303.3696b0e8.js","sourcesContent":["import { pauseTracking, resetTracking, isRef, toRaw, shallowReactive, trigger, isReactive, effect, stop, ref, isProxy, proxyRefs, toRef, reactive, shallowReadonly, track, computed as computed$1, isReadonly } from '@vue/reactivity';\nexport { customRef, isProxy, isReactive, isReadonly, isRef, markRaw, proxyRefs, reactive, readonly, ref, shallowReactive, shallowReadonly, shallowRef, toRaw, toRef, toRefs, triggerRef, unref } from '@vue/reactivity';\nimport { isString, isFunction, isPromise, isArray, extend, EMPTY_OBJ, toHandlerKey, toNumber, hyphenate, camelize, isOn, hasOwn, isModelListener, def, isReservedProp, EMPTY_ARR, isObject, capitalize, toRawType, makeMap, remove, NOOP, hasChanged, isSet, isMap, invokeArrayFns, NO, getGlobalThis, normalizeClass, normalizeStyle, isGloballyWhitelisted } from '@vue/shared';\nexport { camelize, capitalize, toDisplayString, toHandlerKey } from '@vue/shared';\n\nconst stack = [];\r\nfunction pushWarningContext(vnode) {\r\n    stack.push(vnode);\r\n}\r\nfunction popWarningContext() {\r\n    stack.pop();\r\n}\r\nfunction warn(msg, ...args) {\r\n    // avoid props formatting or warn handler tracking deps that might be mutated\r\n    // during patch, leading to infinite recursion.\r\n    pauseTracking();\r\n    const instance = stack.length ? stack[stack.length - 1].component : null;\r\n    const appWarnHandler = instance && instance.appContext.config.warnHandler;\r\n    const trace = getComponentTrace();\r\n    if (appWarnHandler) {\r\n        callWithErrorHandling(appWarnHandler, instance, 11 /* APP_WARN_HANDLER */, [\r\n            msg + args.join(''),\r\n            instance && instance.proxy,\r\n            trace\r\n                .map(({ vnode }) => `at <${formatComponentName(instance, vnode.type)}>`)\r\n                .join('\\n'),\r\n            trace\r\n        ]);\r\n    }\r\n    else {\r\n        const warnArgs = [`[Vue warn]: ${msg}`, ...args];\r\n        /* istanbul ignore if */\r\n        if (trace.length &&\r\n            // avoid spamming console during tests\r\n            !false) {\r\n            warnArgs.push(`\\n`, ...formatTrace(trace));\r\n        }\r\n        console.warn(...warnArgs);\r\n    }\r\n    resetTracking();\r\n}\r\nfunction getComponentTrace() {\r\n    let currentVNode = stack[stack.length - 1];\r\n    if (!currentVNode) {\r\n        return [];\r\n    }\r\n    // we can't just use the stack because it will be incomplete during updates\r\n    // that did not start from the root. Re-construct the parent chain using\r\n    // instance parent pointers.\r\n    const normalizedStack = [];\r\n    while (currentVNode) {\r\n        const last = normalizedStack[0];\r\n        if (last && last.vnode === currentVNode) {\r\n            last.recurseCount++;\r\n        }\r\n        else {\r\n            normalizedStack.push({\r\n                vnode: currentVNode,\r\n                recurseCount: 0\r\n            });\r\n        }\r\n        const parentInstance = currentVNode.component && currentVNode.component.parent;\r\n        currentVNode = parentInstance && parentInstance.vnode;\r\n    }\r\n    return normalizedStack;\r\n}\r\n/* istanbul ignore next */\r\nfunction formatTrace(trace) {\r\n    const logs = [];\r\n    trace.forEach((entry, i) => {\r\n        logs.push(...(i === 0 ? [] : [`\\n`]), ...formatTraceEntry(entry));\r\n    });\r\n    return logs;\r\n}\r\nfunction formatTraceEntry({ vnode, recurseCount }) {\r\n    const postfix = recurseCount > 0 ? `... (${recurseCount} recursive calls)` : ``;\r\n    const isRoot = vnode.component ? vnode.component.parent == null : false;\r\n    const open = ` at <${formatComponentName(vnode.component, vnode.type, isRoot)}`;\r\n    const close = `>` + postfix;\r\n    return vnode.props\r\n        ? [open, ...formatProps(vnode.props), close]\r\n        : [open + close];\r\n}\r\n/* istanbul ignore next */\r\nfunction formatProps(props) {\r\n    const res = [];\r\n    const keys = Object.keys(props);\r\n    keys.slice(0, 3).forEach(key => {\r\n        res.push(...formatProp(key, props[key]));\r\n    });\r\n    if (keys.length > 3) {\r\n        res.push(` ...`);\r\n    }\r\n    return res;\r\n}\r\n/* istanbul ignore next */\r\nfunction formatProp(key, value, raw) {\r\n    if (isString(value)) {\r\n        value = JSON.stringify(value);\r\n        return raw ? value : [`${key}=${value}`];\r\n    }\r\n    else if (typeof value === 'number' ||\r\n        typeof value === 'boolean' ||\r\n        value == null) {\r\n        return raw ? value : [`${key}=${value}`];\r\n    }\r\n    else if (isRef(value)) {\r\n        value = formatProp(key, toRaw(value.value), true);\r\n        return raw ? value : [`${key}=Ref<`, value, `>`];\r\n    }\r\n    else if (isFunction(value)) {\r\n        return [`${key}=fn${value.name ? `<${value.name}>` : ``}`];\r\n    }\r\n    else {\r\n        value = toRaw(value);\r\n        return raw ? value : [`${key}=`, value];\r\n    }\r\n}\n\nconst ErrorTypeStrings = {\r\n    [\"bc\" /* BEFORE_CREATE */]: 'beforeCreate hook',\r\n    [\"c\" /* CREATED */]: 'created hook',\r\n    [\"bm\" /* BEFORE_MOUNT */]: 'beforeMount hook',\r\n    [\"m\" /* MOUNTED */]: 'mounted hook',\r\n    [\"bu\" /* BEFORE_UPDATE */]: 'beforeUpdate hook',\r\n    [\"u\" /* UPDATED */]: 'updated',\r\n    [\"bum\" /* BEFORE_UNMOUNT */]: 'beforeUnmount hook',\r\n    [\"um\" /* UNMOUNTED */]: 'unmounted hook',\r\n    [\"a\" /* ACTIVATED */]: 'activated hook',\r\n    [\"da\" /* DEACTIVATED */]: 'deactivated hook',\r\n    [\"ec\" /* ERROR_CAPTURED */]: 'errorCaptured hook',\r\n    [\"rtc\" /* RENDER_TRACKED */]: 'renderTracked hook',\r\n    [\"rtg\" /* RENDER_TRIGGERED */]: 'renderTriggered hook',\r\n    [0 /* SETUP_FUNCTION */]: 'setup function',\r\n    [1 /* RENDER_FUNCTION */]: 'render function',\r\n    [2 /* WATCH_GETTER */]: 'watcher getter',\r\n    [3 /* WATCH_CALLBACK */]: 'watcher callback',\r\n    [4 /* WATCH_CLEANUP */]: 'watcher cleanup function',\r\n    [5 /* NATIVE_EVENT_HANDLER */]: 'native event handler',\r\n    [6 /* COMPONENT_EVENT_HANDLER */]: 'component event handler',\r\n    [7 /* VNODE_HOOK */]: 'vnode hook',\r\n    [8 /* DIRECTIVE_HOOK */]: 'directive hook',\r\n    [9 /* TRANSITION_HOOK */]: 'transition hook',\r\n    [10 /* APP_ERROR_HANDLER */]: 'app errorHandler',\r\n    [11 /* APP_WARN_HANDLER */]: 'app warnHandler',\r\n    [12 /* FUNCTION_REF */]: 'ref function',\r\n    [13 /* ASYNC_COMPONENT_LOADER */]: 'async component loader',\r\n    [14 /* SCHEDULER */]: 'scheduler flush. This is likely a Vue internals bug. ' +\r\n        'Please open an issue at https://new-issue.vuejs.org/?repo=vuejs/vue-next'\r\n};\r\nfunction callWithErrorHandling(fn, instance, type, args) {\r\n    let res;\r\n    try {\r\n        res = args ? fn(...args) : fn();\r\n    }\r\n    catch (err) {\r\n        handleError(err, instance, type);\r\n    }\r\n    return res;\r\n}\r\nfunction callWithAsyncErrorHandling(fn, instance, type, args) {\r\n    if (isFunction(fn)) {\r\n        const res = callWithErrorHandling(fn, instance, type, args);\r\n        if (res && isPromise(res)) {\r\n            res.catch(err => {\r\n                handleError(err, instance, type);\r\n            });\r\n        }\r\n        return res;\r\n    }\r\n    const values = [];\r\n    for (let i = 0; i < fn.length; i++) {\r\n        values.push(callWithAsyncErrorHandling(fn[i], instance, type, args));\r\n    }\r\n    return values;\r\n}\r\nfunction handleError(err, instance, type, throwInDev = true) {\r\n    const contextVNode = instance ? instance.vnode : null;\r\n    if (instance) {\r\n        let cur = instance.parent;\r\n        // the exposed instance is the render proxy to keep it consistent with 2.x\r\n        const exposedInstance = instance.proxy;\r\n        // in production the hook receives only the error code\r\n        const errorInfo = (process.env.NODE_ENV !== 'production') ? ErrorTypeStrings[type] : type;\r\n        while (cur) {\r\n            const errorCapturedHooks = cur.ec;\r\n            if (errorCapturedHooks) {\r\n                for (let i = 0; i < errorCapturedHooks.length; i++) {\r\n                    if (errorCapturedHooks[i](err, exposedInstance, errorInfo) === false) {\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n            cur = cur.parent;\r\n        }\r\n        // app-level handling\r\n        const appErrorHandler = instance.appContext.config.errorHandler;\r\n        if (appErrorHandler) {\r\n            callWithErrorHandling(appErrorHandler, null, 10 /* APP_ERROR_HANDLER */, [err, exposedInstance, errorInfo]);\r\n            return;\r\n        }\r\n    }\r\n    logError(err, type, contextVNode, throwInDev);\r\n}\r\nfunction logError(err, type, contextVNode, throwInDev = true) {\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        const info = ErrorTypeStrings[type];\r\n        if (contextVNode) {\r\n            pushWarningContext(contextVNode);\r\n        }\r\n        warn(`Unhandled error${info ? ` during execution of ${info}` : ``}`);\r\n        if (contextVNode) {\r\n            popWarningContext();\r\n        }\r\n        // crash in dev by default so it's more noticeable\r\n        if (throwInDev) {\r\n            throw err;\r\n        }\r\n        else {\r\n            console.error(err);\r\n        }\r\n    }\r\n    else {\r\n        // recover in prod to reduce the impact on end-user\r\n        console.error(err);\r\n    }\r\n}\n\nlet isFlushing = false;\r\nlet isFlushPending = false;\r\nconst queue = [];\r\nlet flushIndex = 0;\r\nconst pendingPreFlushCbs = [];\r\nlet activePreFlushCbs = null;\r\nlet preFlushIndex = 0;\r\nconst pendingPostFlushCbs = [];\r\nlet activePostFlushCbs = null;\r\nlet postFlushIndex = 0;\r\nconst resolvedPromise = Promise.resolve();\r\nlet currentFlushPromise = null;\r\nlet currentPreFlushParentJob = null;\r\nconst RECURSION_LIMIT = 100;\r\nfunction nextTick(fn) {\r\n    const p = currentFlushPromise || resolvedPromise;\r\n    return fn ? p.then(this ? fn.bind(this) : fn) : p;\r\n}\r\n// #2768\r\n// Use binary-search to find a suitable position in the queue,\r\n// so that the queue maintains the increasing order of job's id,\r\n// which can prevent the job from being skipped and also can avoid repeated patching.\r\nfunction findInsertionIndex(job) {\r\n    // the start index should be `flushIndex + 1`\r\n    let start = flushIndex + 1;\r\n    let end = queue.length;\r\n    const jobId = getId(job);\r\n    while (start < end) {\r\n        const middle = (start + end) >>> 1;\r\n        const middleJobId = getId(queue[middle]);\r\n        middleJobId < jobId ? (start = middle + 1) : (end = middle);\r\n    }\r\n    return start;\r\n}\r\nfunction queueJob(job) {\r\n    // the dedupe search uses the startIndex argument of Array.includes()\r\n    // by default the search index includes the current job that is being run\r\n    // so it cannot recursively trigger itself again.\r\n    // if the job is a watch() callback, the search will start with a +1 index to\r\n    // allow it recursively trigger itself - it is the user's responsibility to\r\n    // ensure it doesn't end up in an infinite loop.\r\n    if ((!queue.length ||\r\n        !queue.includes(job, isFlushing && job.allowRecurse ? flushIndex + 1 : flushIndex)) &&\r\n        job !== currentPreFlushParentJob) {\r\n        const pos = findInsertionIndex(job);\r\n        if (pos > -1) {\r\n            queue.splice(pos, 0, job);\r\n        }\r\n        else {\r\n            queue.push(job);\r\n        }\r\n        queueFlush();\r\n    }\r\n}\r\nfunction queueFlush() {\r\n    if (!isFlushing && !isFlushPending) {\r\n        isFlushPending = true;\r\n        currentFlushPromise = resolvedPromise.then(flushJobs);\r\n    }\r\n}\r\nfunction invalidateJob(job) {\r\n    const i = queue.indexOf(job);\r\n    if (i > flushIndex) {\r\n        queue.splice(i, 1);\r\n    }\r\n}\r\nfunction queueCb(cb, activeQueue, pendingQueue, index) {\r\n    if (!isArray(cb)) {\r\n        if (!activeQueue ||\r\n            !activeQueue.includes(cb, cb.allowRecurse ? index + 1 : index)) {\r\n            pendingQueue.push(cb);\r\n        }\r\n    }\r\n    else {\r\n        // if cb is an array, it is a component lifecycle hook which can only be\r\n        // triggered by a job, which is already deduped in the main queue, so\r\n        // we can skip duplicate check here to improve perf\r\n        pendingQueue.push(...cb);\r\n    }\r\n    queueFlush();\r\n}\r\nfunction queuePreFlushCb(cb) {\r\n    queueCb(cb, activePreFlushCbs, pendingPreFlushCbs, preFlushIndex);\r\n}\r\nfunction queuePostFlushCb(cb) {\r\n    queueCb(cb, activePostFlushCbs, pendingPostFlushCbs, postFlushIndex);\r\n}\r\nfunction flushPreFlushCbs(seen, parentJob = null) {\r\n    if (pendingPreFlushCbs.length) {\r\n        currentPreFlushParentJob = parentJob;\r\n        activePreFlushCbs = [...new Set(pendingPreFlushCbs)];\r\n        pendingPreFlushCbs.length = 0;\r\n        if ((process.env.NODE_ENV !== 'production')) {\r\n            seen = seen || new Map();\r\n        }\r\n        for (preFlushIndex = 0; preFlushIndex < activePreFlushCbs.length; preFlushIndex++) {\r\n            if ((process.env.NODE_ENV !== 'production')) {\r\n                checkRecursiveUpdates(seen, activePreFlushCbs[preFlushIndex]);\r\n            }\r\n            activePreFlushCbs[preFlushIndex]();\r\n        }\r\n        activePreFlushCbs = null;\r\n        preFlushIndex = 0;\r\n        currentPreFlushParentJob = null;\r\n        // recursively flush until it drains\r\n        flushPreFlushCbs(seen, parentJob);\r\n    }\r\n}\r\nfunction flushPostFlushCbs(seen) {\r\n    if (pendingPostFlushCbs.length) {\r\n        const deduped = [...new Set(pendingPostFlushCbs)];\r\n        pendingPostFlushCbs.length = 0;\r\n        // #1947 already has active queue, nested flushPostFlushCbs call\r\n        if (activePostFlushCbs) {\r\n            activePostFlushCbs.push(...deduped);\r\n            return;\r\n        }\r\n        activePostFlushCbs = deduped;\r\n        if ((process.env.NODE_ENV !== 'production')) {\r\n            seen = seen || new Map();\r\n        }\r\n        activePostFlushCbs.sort((a, b) => getId(a) - getId(b));\r\n        for (postFlushIndex = 0; postFlushIndex < activePostFlushCbs.length; postFlushIndex++) {\r\n            if ((process.env.NODE_ENV !== 'production')) {\r\n                checkRecursiveUpdates(seen, activePostFlushCbs[postFlushIndex]);\r\n            }\r\n            activePostFlushCbs[postFlushIndex]();\r\n        }\r\n        activePostFlushCbs = null;\r\n        postFlushIndex = 0;\r\n    }\r\n}\r\nconst getId = (job) => job.id == null ? Infinity : job.id;\r\nfunction flushJobs(seen) {\r\n    isFlushPending = false;\r\n    isFlushing = true;\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        seen = seen || new Map();\r\n    }\r\n    flushPreFlushCbs(seen);\r\n    // Sort queue before flush.\r\n    // This ensures that:\r\n    // 1. Components are updated from parent to child. (because parent is always\r\n    //    created before the child so its render effect will have smaller\r\n    //    priority number)\r\n    // 2. If a component is unmounted during a parent component's update,\r\n    //    its update can be skipped.\r\n    queue.sort((a, b) => getId(a) - getId(b));\r\n    try {\r\n        for (flushIndex = 0; flushIndex < queue.length; flushIndex++) {\r\n            const job = queue[flushIndex];\r\n            if (job) {\r\n                if ((process.env.NODE_ENV !== 'production')) {\r\n                    checkRecursiveUpdates(seen, job);\r\n                }\r\n                callWithErrorHandling(job, null, 14 /* SCHEDULER */);\r\n            }\r\n        }\r\n    }\r\n    finally {\r\n        flushIndex = 0;\r\n        queue.length = 0;\r\n        flushPostFlushCbs(seen);\r\n        isFlushing = false;\r\n        currentFlushPromise = null;\r\n        // some postFlushCb queued jobs!\r\n        // keep flushing until it drains.\r\n        if (queue.length || pendingPostFlushCbs.length) {\r\n            flushJobs(seen);\r\n        }\r\n    }\r\n}\r\nfunction checkRecursiveUpdates(seen, fn) {\r\n    if (!seen.has(fn)) {\r\n        seen.set(fn, 1);\r\n    }\r\n    else {\r\n        const count = seen.get(fn);\r\n        if (count > RECURSION_LIMIT) {\r\n            throw new Error(`Maximum recursive updates exceeded. ` +\r\n                `This means you have a reactive effect that is mutating its own ` +\r\n                `dependencies and thus recursively triggering itself. Possible sources ` +\r\n                `include component template, render function, updated hook or ` +\r\n                `watcher source function.`);\r\n        }\r\n        else {\r\n            seen.set(fn, count + 1);\r\n        }\r\n    }\r\n}\n\n/* eslint-disable no-restricted-globals */\r\nlet isHmrUpdating = false;\r\nconst hmrDirtyComponents = new Set();\r\n// Expose the HMR runtime on the global object\r\n// This makes it entirely tree-shakable without polluting the exports and makes\r\n// it easier to be used in toolings like vue-loader\r\n// Note: for a component to be eligible for HMR it also needs the __hmrId option\r\n// to be set so that its instances can be registered / removed.\r\nif ((process.env.NODE_ENV !== 'production')) {\r\n    const globalObject = typeof global !== 'undefined'\r\n        ? global\r\n        : typeof self !== 'undefined'\r\n            ? self\r\n            : typeof window !== 'undefined'\r\n                ? window\r\n                : {};\r\n    globalObject.__VUE_HMR_RUNTIME__ = {\r\n        createRecord: tryWrap(createRecord),\r\n        rerender: tryWrap(rerender),\r\n        reload: tryWrap(reload)\r\n    };\r\n}\r\nconst map = new Map();\r\nfunction registerHMR(instance) {\r\n    const id = instance.type.__hmrId;\r\n    let record = map.get(id);\r\n    if (!record) {\r\n        createRecord(id, instance.type);\r\n        record = map.get(id);\r\n    }\r\n    record.instances.add(instance);\r\n}\r\nfunction unregisterHMR(instance) {\r\n    map.get(instance.type.__hmrId).instances.delete(instance);\r\n}\r\nfunction createRecord(id, component) {\r\n    if (!component) {\r\n        warn(`HMR API usage is out of date.\\n` +\r\n            `Please upgrade vue-loader/vite/rollup-plugin-vue or other relevant ` +\r\n            `dependency that handles Vue SFC compilation.`);\r\n        component = {};\r\n    }\r\n    if (map.has(id)) {\r\n        return false;\r\n    }\r\n    map.set(id, {\r\n        component: isClassComponent(component) ? component.__vccOpts : component,\r\n        instances: new Set()\r\n    });\r\n    return true;\r\n}\r\nfunction rerender(id, newRender) {\r\n    const record = map.get(id);\r\n    if (!record)\r\n        return;\r\n    if (newRender)\r\n        record.component.render = newRender;\r\n    // Array.from creates a snapshot which avoids the set being mutated during\r\n    // updates\r\n    Array.from(record.instances).forEach(instance => {\r\n        if (newRender) {\r\n            instance.render = newRender;\r\n        }\r\n        instance.renderCache = [];\r\n        // this flag forces child components with slot content to update\r\n        isHmrUpdating = true;\r\n        instance.update();\r\n        isHmrUpdating = false;\r\n    });\r\n}\r\nfunction reload(id, newComp) {\r\n    const record = map.get(id);\r\n    if (!record)\r\n        return;\r\n    // Array.from creates a snapshot which avoids the set being mutated during\r\n    // updates\r\n    const { component, instances } = record;\r\n    if (!hmrDirtyComponents.has(component)) {\r\n        // 1. Update existing comp definition to match new one\r\n        newComp = isClassComponent(newComp) ? newComp.__vccOpts : newComp;\r\n        extend(component, newComp);\r\n        for (const key in component) {\r\n            if (!(key in newComp)) {\r\n                delete component[key];\r\n            }\r\n        }\r\n        // 2. Mark component dirty. This forces the renderer to replace the component\r\n        // on patch.\r\n        hmrDirtyComponents.add(component);\r\n        // 3. Make sure to unmark the component after the reload.\r\n        queuePostFlushCb(() => {\r\n            hmrDirtyComponents.delete(component);\r\n        });\r\n    }\r\n    Array.from(instances).forEach(instance => {\r\n        if (instance.parent) {\r\n            // 4. Force the parent instance to re-render. This will cause all updated\r\n            // components to be unmounted and re-mounted. Queue the update so that we\r\n            // don't end up forcing the same parent to re-render multiple times.\r\n            queueJob(instance.parent.update);\r\n        }\r\n        else if (instance.appContext.reload) {\r\n            // root instance mounted via createApp() has a reload method\r\n            instance.appContext.reload();\r\n        }\r\n        else if (typeof window !== 'undefined') {\r\n            // root instance inside tree created via raw render(). Force reload.\r\n            window.location.reload();\r\n        }\r\n        else {\r\n            console.warn('[HMR] Root or manually mounted instance modified. Full reload required.');\r\n        }\r\n    });\r\n}\r\nfunction tryWrap(fn) {\r\n    return (id, arg) => {\r\n        try {\r\n            return fn(id, arg);\r\n        }\r\n        catch (e) {\r\n            console.error(e);\r\n            console.warn(`[HMR] Something went wrong during Vue component hot-reload. ` +\r\n                `Full reload required.`);\r\n        }\r\n    };\r\n}\n\nlet devtools;\r\nfunction setDevtoolsHook(hook) {\r\n    devtools = hook;\r\n}\r\nfunction devtoolsInitApp(app, version) {\r\n    // TODO queue if devtools is undefined\r\n    if (!devtools)\r\n        return;\r\n    devtools.emit(\"app:init\" /* APP_INIT */, app, version, {\r\n        Fragment,\r\n        Text,\r\n        Comment,\r\n        Static\r\n    });\r\n}\r\nfunction devtoolsUnmountApp(app) {\r\n    if (!devtools)\r\n        return;\r\n    devtools.emit(\"app:unmount\" /* APP_UNMOUNT */, app);\r\n}\r\nconst devtoolsComponentAdded = /*#__PURE__*/ createDevtoolsComponentHook(\"component:added\" /* COMPONENT_ADDED */);\r\nconst devtoolsComponentUpdated = /*#__PURE__*/ createDevtoolsComponentHook(\"component:updated\" /* COMPONENT_UPDATED */);\r\nconst devtoolsComponentRemoved = /*#__PURE__*/ createDevtoolsComponentHook(\"component:removed\" /* COMPONENT_REMOVED */);\r\nfunction createDevtoolsComponentHook(hook) {\r\n    return (component) => {\r\n        if (!devtools)\r\n            return;\r\n        devtools.emit(hook, component.appContext.app, component.uid, component.parent ? component.parent.uid : undefined, component);\r\n    };\r\n}\r\nfunction devtoolsComponentEmit(component, event, params) {\r\n    if (!devtools)\r\n        return;\r\n    devtools.emit(\"component:emit\" /* COMPONENT_EMIT */, component.appContext.app, component, event, params);\r\n}\n\nfunction emit(instance, event, ...rawArgs) {\r\n    const props = instance.vnode.props || EMPTY_OBJ;\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        const { emitsOptions, propsOptions: [propsOptions] } = instance;\r\n        if (emitsOptions) {\r\n            if (!(event in emitsOptions)) {\r\n                if (!propsOptions || !(toHandlerKey(event) in propsOptions)) {\r\n                    warn(`Component emitted event \"${event}\" but it is neither declared in ` +\r\n                        `the emits option nor as an \"${toHandlerKey(event)}\" prop.`);\r\n                }\r\n            }\r\n            else {\r\n                const validator = emitsOptions[event];\r\n                if (isFunction(validator)) {\r\n                    const isValid = validator(...rawArgs);\r\n                    if (!isValid) {\r\n                        warn(`Invalid event arguments: event validation failed for event \"${event}\".`);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    let args = rawArgs;\r\n    const isModelListener = event.startsWith('update:');\r\n    // for v-model update:xxx events, apply modifiers on args\r\n    const modelArg = isModelListener && event.slice(7);\r\n    if (modelArg && modelArg in props) {\r\n        const modifiersKey = `${modelArg === 'modelValue' ? 'model' : modelArg}Modifiers`;\r\n        const { number, trim } = props[modifiersKey] || EMPTY_OBJ;\r\n        if (trim) {\r\n            args = rawArgs.map(a => a.trim());\r\n        }\r\n        else if (number) {\r\n            args = rawArgs.map(toNumber);\r\n        }\r\n    }\r\n    if ((process.env.NODE_ENV !== 'production') || __VUE_PROD_DEVTOOLS__) {\r\n        devtoolsComponentEmit(instance, event, args);\r\n    }\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        const lowerCaseEvent = event.toLowerCase();\r\n        if (lowerCaseEvent !== event && props[toHandlerKey(lowerCaseEvent)]) {\r\n            warn(`Event \"${lowerCaseEvent}\" is emitted in component ` +\r\n                `${formatComponentName(instance, instance.type)} but the handler is registered for \"${event}\". ` +\r\n                `Note that HTML attributes are case-insensitive and you cannot use ` +\r\n                `v-on to listen to camelCase events when using in-DOM templates. ` +\r\n                `You should probably use \"${hyphenate(event)}\" instead of \"${event}\".`);\r\n        }\r\n    }\r\n    // convert handler name to camelCase. See issue #2249\r\n    let handlerName = toHandlerKey(camelize(event));\r\n    let handler = props[handlerName];\r\n    // for v-model update:xxx events, also trigger kebab-case equivalent\r\n    // for props passed via kebab-case\r\n    if (!handler && isModelListener) {\r\n        handlerName = toHandlerKey(hyphenate(event));\r\n        handler = props[handlerName];\r\n    }\r\n    if (handler) {\r\n        callWithAsyncErrorHandling(handler, instance, 6 /* COMPONENT_EVENT_HANDLER */, args);\r\n    }\r\n    const onceHandler = props[handlerName + `Once`];\r\n    if (onceHandler) {\r\n        if (!instance.emitted) {\r\n            (instance.emitted = {})[handlerName] = true;\r\n        }\r\n        else if (instance.emitted[handlerName]) {\r\n            return;\r\n        }\r\n        callWithAsyncErrorHandling(onceHandler, instance, 6 /* COMPONENT_EVENT_HANDLER */, args);\r\n    }\r\n}\r\nfunction normalizeEmitsOptions(comp, appContext, asMixin = false) {\r\n    if (!appContext.deopt && comp.__emits !== undefined) {\r\n        return comp.__emits;\r\n    }\r\n    const raw = comp.emits;\r\n    let normalized = {};\r\n    // apply mixin/extends props\r\n    let hasExtends = false;\r\n    if (__VUE_OPTIONS_API__ && !isFunction(comp)) {\r\n        const extendEmits = (raw) => {\r\n            const normalizedFromExtend = normalizeEmitsOptions(raw, appContext, true);\r\n            if (normalizedFromExtend) {\r\n                hasExtends = true;\r\n                extend(normalized, normalizedFromExtend);\r\n            }\r\n        };\r\n        if (!asMixin && appContext.mixins.length) {\r\n            appContext.mixins.forEach(extendEmits);\r\n        }\r\n        if (comp.extends) {\r\n            extendEmits(comp.extends);\r\n        }\r\n        if (comp.mixins) {\r\n            comp.mixins.forEach(extendEmits);\r\n        }\r\n    }\r\n    if (!raw && !hasExtends) {\r\n        return (comp.__emits = null);\r\n    }\r\n    if (isArray(raw)) {\r\n        raw.forEach(key => (normalized[key] = null));\r\n    }\r\n    else {\r\n        extend(normalized, raw);\r\n    }\r\n    return (comp.__emits = normalized);\r\n}\r\n// Check if an incoming prop key is a declared emit event listener.\r\n// e.g. With `emits: { click: null }`, props named `onClick` and `onclick` are\r\n// both considered matched listeners.\r\nfunction isEmitListener(options, key) {\r\n    if (!options || !isOn(key)) {\r\n        return false;\r\n    }\r\n    key = key.slice(2).replace(/Once$/, '');\r\n    return (hasOwn(options, key[0].toLowerCase() + key.slice(1)) ||\r\n        hasOwn(options, hyphenate(key)) ||\r\n        hasOwn(options, key));\r\n}\n\nlet isRenderingCompiledSlot = 0;\r\nconst setCompiledSlotRendering = (n) => (isRenderingCompiledSlot += n);\r\n/**\r\n * Compiler runtime helper for rendering `<slot/>`\r\n * @private\r\n */\r\nfunction renderSlot(slots, name, props = {}, \r\n// this is not a user-facing function, so the fallback is always generated by\r\n// the compiler and guaranteed to be a function returning an array\r\nfallback, noSlotted) {\r\n    let slot = slots[name];\r\n    if ((process.env.NODE_ENV !== 'production') && slot && slot.length > 1) {\r\n        warn(`SSR-optimized slot function detected in a non-SSR-optimized render ` +\r\n            `function. You need to mark this component with $dynamic-slots in the ` +\r\n            `parent template.`);\r\n        slot = () => [];\r\n    }\r\n    // a compiled slot disables block tracking by default to avoid manual\r\n    // invocation interfering with template-based block tracking, but in\r\n    // `renderSlot` we can be sure that it's template-based so we can force\r\n    // enable it.\r\n    isRenderingCompiledSlot++;\r\n    openBlock();\r\n    const validSlotContent = slot && ensureValidVNode(slot(props));\r\n    const rendered = createBlock(Fragment, { key: props.key || `_${name}` }, validSlotContent || (fallback ? fallback() : []), validSlotContent && slots._ === 1 /* STABLE */\r\n        ? 64 /* STABLE_FRAGMENT */\r\n        : -2 /* BAIL */);\r\n    if (!noSlotted && rendered.scopeId) {\r\n        rendered.slotScopeIds = [rendered.scopeId + '-s'];\r\n    }\r\n    isRenderingCompiledSlot--;\r\n    return rendered;\r\n}\r\nfunction ensureValidVNode(vnodes) {\r\n    return vnodes.some(child => {\r\n        if (!isVNode(child))\r\n            return true;\r\n        if (child.type === Comment)\r\n            return false;\r\n        if (child.type === Fragment &&\r\n            !ensureValidVNode(child.children))\r\n            return false;\r\n        return true;\r\n    })\r\n        ? vnodes\r\n        : null;\r\n}\n\n/**\r\n * mark the current rendering instance for asset resolution (e.g.\r\n * resolveComponent, resolveDirective) during render\r\n */\r\nlet currentRenderingInstance = null;\r\nlet currentScopeId = null;\r\n/**\r\n * Note: rendering calls maybe nested. The function returns the parent rendering\r\n * instance if present, which should be restored after the render is done:\r\n *\r\n * ```js\r\n * const prev = setCurrentRenderingInstance(i)\r\n * // ...render\r\n * setCurrentRenderingInstance(prev)\r\n * ```\r\n */\r\nfunction setCurrentRenderingInstance(instance) {\r\n    const prev = currentRenderingInstance;\r\n    currentRenderingInstance = instance;\r\n    currentScopeId = (instance && instance.type.__scopeId) || null;\r\n    return prev;\r\n}\r\n/**\r\n * Set scope id when creating hoisted vnodes.\r\n * @private compiler helper\r\n */\r\nfunction pushScopeId(id) {\r\n    currentScopeId = id;\r\n}\r\n/**\r\n * Technically we no longer need this after 3.0.8 but we need to keep the same\r\n * API for backwards compat w/ code generated by compilers.\r\n * @private\r\n */\r\nfunction popScopeId() {\r\n    currentScopeId = null;\r\n}\r\n/**\r\n * Only for backwards compat\r\n * @private\r\n */\r\nconst withScopeId = (_id) => withCtx;\r\n/**\r\n * Wrap a slot function to memoize current rendering instance\r\n * @private compiler helper\r\n */\r\nfunction withCtx(fn, ctx = currentRenderingInstance) {\r\n    if (!ctx)\r\n        return fn;\r\n    const renderFnWithContext = (...args) => {\r\n        // If a user calls a compiled slot inside a template expression (#1745), it\r\n        // can mess up block tracking, so by default we need to push a null block to\r\n        // avoid that. This isn't necessary if rendering a compiled `<slot>`.\r\n        if (!isRenderingCompiledSlot) {\r\n            openBlock(true /* null block that disables tracking */);\r\n        }\r\n        const prevInstance = setCurrentRenderingInstance(ctx);\r\n        const res = fn(...args);\r\n        setCurrentRenderingInstance(prevInstance);\r\n        if (!isRenderingCompiledSlot) {\r\n            closeBlock();\r\n        }\r\n        return res;\r\n    };\r\n    // mark this as a compiled slot function.\r\n    // this is used in vnode.ts -> normalizeChildren() to set the slot\r\n    // rendering flag.\r\n    renderFnWithContext._c = true;\r\n    return renderFnWithContext;\r\n}\n\n/**\r\n * dev only flag to track whether $attrs was used during render.\r\n * If $attrs was used during render then the warning for failed attrs\r\n * fallthrough can be suppressed.\r\n */\r\nlet accessedAttrs = false;\r\nfunction markAttrsAccessed() {\r\n    accessedAttrs = true;\r\n}\r\nfunction renderComponentRoot(instance) {\r\n    const { type: Component, vnode, proxy, withProxy, props, propsOptions: [propsOptions], slots, attrs, emit, render, renderCache, data, setupState, ctx } = instance;\r\n    let result;\r\n    const prev = setCurrentRenderingInstance(instance);\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        accessedAttrs = false;\r\n    }\r\n    try {\r\n        let fallthroughAttrs;\r\n        if (vnode.shapeFlag & 4 /* STATEFUL_COMPONENT */) {\r\n            // withProxy is a proxy with a different `has` trap only for\r\n            // runtime-compiled render functions using `with` block.\r\n            const proxyToUse = withProxy || proxy;\r\n            result = normalizeVNode(render.call(proxyToUse, proxyToUse, renderCache, props, setupState, data, ctx));\r\n            fallthroughAttrs = attrs;\r\n        }\r\n        else {\r\n            // functional\r\n            const render = Component;\r\n            // in dev, mark attrs accessed if optional props (attrs === props)\r\n            if ((process.env.NODE_ENV !== 'production') && attrs === props) {\r\n                markAttrsAccessed();\r\n            }\r\n            result = normalizeVNode(render.length > 1\r\n                ? render(props, (process.env.NODE_ENV !== 'production')\r\n                    ? {\r\n                        get attrs() {\r\n                            markAttrsAccessed();\r\n                            return attrs;\r\n                        },\r\n                        slots,\r\n                        emit\r\n                    }\r\n                    : { attrs, slots, emit })\r\n                : render(props, null /* we know it doesn't need it */));\r\n            fallthroughAttrs = Component.props\r\n                ? attrs\r\n                : getFunctionalFallthrough(attrs);\r\n        }\r\n        // attr merging\r\n        // in dev mode, comments are preserved, and it's possible for a template\r\n        // to have comments along side the root element which makes it a fragment\r\n        let root = result;\r\n        let setRoot = undefined;\r\n        if ((process.env.NODE_ENV !== 'production') &&\r\n            result.patchFlag > 0 &&\r\n            result.patchFlag & 2048 /* DEV_ROOT_FRAGMENT */) {\r\n            ;\r\n            [root, setRoot] = getChildRoot(result);\r\n        }\r\n        if (Component.inheritAttrs !== false && fallthroughAttrs) {\r\n            const keys = Object.keys(fallthroughAttrs);\r\n            const { shapeFlag } = root;\r\n            if (keys.length) {\r\n                if (shapeFlag & 1 /* ELEMENT */ ||\r\n                    shapeFlag & 6 /* COMPONENT */) {\r\n                    if (propsOptions && keys.some(isModelListener)) {\r\n                        // If a v-model listener (onUpdate:xxx) has a corresponding declared\r\n                        // prop, it indicates this component expects to handle v-model and\r\n                        // it should not fallthrough.\r\n                        // related: #1543, #1643, #1989\r\n                        fallthroughAttrs = filterModelListeners(fallthroughAttrs, propsOptions);\r\n                    }\r\n                    root = cloneVNode(root, fallthroughAttrs);\r\n                }\r\n                else if ((process.env.NODE_ENV !== 'production') && !accessedAttrs && root.type !== Comment) {\r\n                    const allAttrs = Object.keys(attrs);\r\n                    const eventAttrs = [];\r\n                    const extraAttrs = [];\r\n                    for (let i = 0, l = allAttrs.length; i < l; i++) {\r\n                        const key = allAttrs[i];\r\n                        if (isOn(key)) {\r\n                            // ignore v-model handlers when they fail to fallthrough\r\n                            if (!isModelListener(key)) {\r\n                                // remove `on`, lowercase first letter to reflect event casing\r\n                                // accurately\r\n                                eventAttrs.push(key[2].toLowerCase() + key.slice(3));\r\n                            }\r\n                        }\r\n                        else {\r\n                            extraAttrs.push(key);\r\n                        }\r\n                    }\r\n                    if (extraAttrs.length) {\r\n                        warn(`Extraneous non-props attributes (` +\r\n                            `${extraAttrs.join(', ')}) ` +\r\n                            `were passed to component but could not be automatically inherited ` +\r\n                            `because component renders fragment or text root nodes.`);\r\n                    }\r\n                    if (eventAttrs.length) {\r\n                        warn(`Extraneous non-emits event listeners (` +\r\n                            `${eventAttrs.join(', ')}) ` +\r\n                            `were passed to component but could not be automatically inherited ` +\r\n                            `because component renders fragment or text root nodes. ` +\r\n                            `If the listener is intended to be a component custom event listener only, ` +\r\n                            `declare it using the \"emits\" option.`);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // inherit directives\r\n        if (vnode.dirs) {\r\n            if ((process.env.NODE_ENV !== 'production') && !isElementRoot(root)) {\r\n                warn(`Runtime directive used on component with non-element root node. ` +\r\n                    `The directives will not function as intended.`);\r\n            }\r\n            root.dirs = root.dirs ? root.dirs.concat(vnode.dirs) : vnode.dirs;\r\n        }\r\n        // inherit transition data\r\n        if (vnode.transition) {\r\n            if ((process.env.NODE_ENV !== 'production') && !isElementRoot(root)) {\r\n                warn(`Component inside <Transition> renders non-element root node ` +\r\n                    `that cannot be animated.`);\r\n            }\r\n            root.transition = vnode.transition;\r\n        }\r\n        if ((process.env.NODE_ENV !== 'production') && setRoot) {\r\n            setRoot(root);\r\n        }\r\n        else {\r\n            result = root;\r\n        }\r\n    }\r\n    catch (err) {\r\n        blockStack.length = 0;\r\n        handleError(err, instance, 1 /* RENDER_FUNCTION */);\r\n        result = createVNode(Comment);\r\n    }\r\n    setCurrentRenderingInstance(prev);\r\n    return result;\r\n}\r\n/**\r\n * dev only\r\n * In dev mode, template root level comments are rendered, which turns the\r\n * template into a fragment root, but we need to locate the single element\r\n * root for attrs and scope id processing.\r\n */\r\nconst getChildRoot = (vnode) => {\r\n    const rawChildren = vnode.children;\r\n    const dynamicChildren = vnode.dynamicChildren;\r\n    const childRoot = filterSingleRoot(rawChildren);\r\n    if (!childRoot) {\r\n        return [vnode, undefined];\r\n    }\r\n    const index = rawChildren.indexOf(childRoot);\r\n    const dynamicIndex = dynamicChildren ? dynamicChildren.indexOf(childRoot) : -1;\r\n    const setRoot = (updatedRoot) => {\r\n        rawChildren[index] = updatedRoot;\r\n        if (dynamicChildren) {\r\n            if (dynamicIndex > -1) {\r\n                dynamicChildren[dynamicIndex] = updatedRoot;\r\n            }\r\n            else if (updatedRoot.patchFlag > 0) {\r\n                vnode.dynamicChildren = [...dynamicChildren, updatedRoot];\r\n            }\r\n        }\r\n    };\r\n    return [normalizeVNode(childRoot), setRoot];\r\n};\r\nfunction filterSingleRoot(children) {\r\n    let singleRoot;\r\n    for (let i = 0; i < children.length; i++) {\r\n        const child = children[i];\r\n        if (isVNode(child)) {\r\n            // ignore user comment\r\n            if (child.type !== Comment || child.children === 'v-if') {\r\n                if (singleRoot) {\r\n                    // has more than 1 non-comment child, return now\r\n                    return;\r\n                }\r\n                else {\r\n                    singleRoot = child;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            return;\r\n        }\r\n    }\r\n    return singleRoot;\r\n}\r\nconst getFunctionalFallthrough = (attrs) => {\r\n    let res;\r\n    for (const key in attrs) {\r\n        if (key === 'class' || key === 'style' || isOn(key)) {\r\n            (res || (res = {}))[key] = attrs[key];\r\n        }\r\n    }\r\n    return res;\r\n};\r\nconst filterModelListeners = (attrs, props) => {\r\n    const res = {};\r\n    for (const key in attrs) {\r\n        if (!isModelListener(key) || !(key.slice(9) in props)) {\r\n            res[key] = attrs[key];\r\n        }\r\n    }\r\n    return res;\r\n};\r\nconst isElementRoot = (vnode) => {\r\n    return (vnode.shapeFlag & 6 /* COMPONENT */ ||\r\n        vnode.shapeFlag & 1 /* ELEMENT */ ||\r\n        vnode.type === Comment // potential v-if branch switch\r\n    );\r\n};\r\nfunction shouldUpdateComponent(prevVNode, nextVNode, optimized) {\r\n    const { props: prevProps, children: prevChildren, component } = prevVNode;\r\n    const { props: nextProps, children: nextChildren, patchFlag } = nextVNode;\r\n    const emits = component.emitsOptions;\r\n    // Parent component's render function was hot-updated. Since this may have\r\n    // caused the child component's slots content to have changed, we need to\r\n    // force the child to update as well.\r\n    if ((process.env.NODE_ENV !== 'production') && (prevChildren || nextChildren) && isHmrUpdating) {\r\n        return true;\r\n    }\r\n    // force child update for runtime directive or transition on component vnode.\r\n    if (nextVNode.dirs || nextVNode.transition) {\r\n        return true;\r\n    }\r\n    if (optimized && patchFlag >= 0) {\r\n        if (patchFlag & 1024 /* DYNAMIC_SLOTS */) {\r\n            // slot content that references values that might have changed,\r\n            // e.g. in a v-for\r\n            return true;\r\n        }\r\n        if (patchFlag & 16 /* FULL_PROPS */) {\r\n            if (!prevProps) {\r\n                return !!nextProps;\r\n            }\r\n            // presence of this flag indicates props are always non-null\r\n            return hasPropsChanged(prevProps, nextProps, emits);\r\n        }\r\n        else if (patchFlag & 8 /* PROPS */) {\r\n            const dynamicProps = nextVNode.dynamicProps;\r\n            for (let i = 0; i < dynamicProps.length; i++) {\r\n                const key = dynamicProps[i];\r\n                if (nextProps[key] !== prevProps[key] &&\r\n                    !isEmitListener(emits, key)) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        // this path is only taken by manually written render functions\r\n        // so presence of any children leads to a forced update\r\n        if (prevChildren || nextChildren) {\r\n            if (!nextChildren || !nextChildren.$stable) {\r\n                return true;\r\n            }\r\n        }\r\n        if (prevProps === nextProps) {\r\n            return false;\r\n        }\r\n        if (!prevProps) {\r\n            return !!nextProps;\r\n        }\r\n        if (!nextProps) {\r\n            return true;\r\n        }\r\n        return hasPropsChanged(prevProps, nextProps, emits);\r\n    }\r\n    return false;\r\n}\r\nfunction hasPropsChanged(prevProps, nextProps, emitsOptions) {\r\n    const nextKeys = Object.keys(nextProps);\r\n    if (nextKeys.length !== Object.keys(prevProps).length) {\r\n        return true;\r\n    }\r\n    for (let i = 0; i < nextKeys.length; i++) {\r\n        const key = nextKeys[i];\r\n        if (nextProps[key] !== prevProps[key] &&\r\n            !isEmitListener(emitsOptions, key)) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\nfunction updateHOCHostEl({ vnode, parent }, el // HostNode\r\n) {\r\n    while (parent && parent.subTree === vnode) {\r\n        (vnode = parent.vnode).el = el;\r\n        parent = parent.parent;\r\n    }\r\n}\n\nconst isSuspense = (type) => type.__isSuspense;\r\n// Suspense exposes a component-like API, and is treated like a component\r\n// in the compiler, but internally it's a special built-in type that hooks\r\n// directly into the renderer.\r\nconst SuspenseImpl = {\r\n    name: 'Suspense',\r\n    // In order to make Suspense tree-shakable, we need to avoid importing it\r\n    // directly in the renderer. The renderer checks for the __isSuspense flag\r\n    // on a vnode's type and calls the `process` method, passing in renderer\r\n    // internals.\r\n    __isSuspense: true,\r\n    process(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, \r\n    // platform-specific impl passed from renderer\r\n    rendererInternals) {\r\n        if (n1 == null) {\r\n            mountSuspense(n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, rendererInternals);\r\n        }\r\n        else {\r\n            patchSuspense(n1, n2, container, anchor, parentComponent, isSVG, slotScopeIds, optimized, rendererInternals);\r\n        }\r\n    },\r\n    hydrate: hydrateSuspense,\r\n    create: createSuspenseBoundary\r\n};\r\n// Force-casted public typing for h and TSX props inference\r\nconst Suspense = (SuspenseImpl\r\n    );\r\nfunction mountSuspense(vnode, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, rendererInternals) {\r\n    const { p: patch, o: { createElement } } = rendererInternals;\r\n    const hiddenContainer = createElement('div');\r\n    const suspense = (vnode.suspense = createSuspenseBoundary(vnode, parentSuspense, parentComponent, container, hiddenContainer, anchor, isSVG, slotScopeIds, optimized, rendererInternals));\r\n    // start mounting the content subtree in an off-dom container\r\n    patch(null, (suspense.pendingBranch = vnode.ssContent), hiddenContainer, null, parentComponent, suspense, isSVG, slotScopeIds);\r\n    // now check if we have encountered any async deps\r\n    if (suspense.deps > 0) {\r\n        // has async\r\n        // mount the fallback tree\r\n        patch(null, vnode.ssFallback, container, anchor, parentComponent, null, // fallback tree will not have suspense context\r\n        isSVG, slotScopeIds);\r\n        setActiveBranch(suspense, vnode.ssFallback);\r\n    }\r\n    else {\r\n        // Suspense has no async deps. Just resolve.\r\n        suspense.resolve();\r\n    }\r\n}\r\nfunction patchSuspense(n1, n2, container, anchor, parentComponent, isSVG, slotScopeIds, optimized, { p: patch, um: unmount, o: { createElement } }) {\r\n    const suspense = (n2.suspense = n1.suspense);\r\n    suspense.vnode = n2;\r\n    n2.el = n1.el;\r\n    const newBranch = n2.ssContent;\r\n    const newFallback = n2.ssFallback;\r\n    const { activeBranch, pendingBranch, isInFallback, isHydrating } = suspense;\r\n    if (pendingBranch) {\r\n        suspense.pendingBranch = newBranch;\r\n        if (isSameVNodeType(newBranch, pendingBranch)) {\r\n            // same root type but content may have changed.\r\n            patch(pendingBranch, newBranch, suspense.hiddenContainer, null, parentComponent, suspense, isSVG, slotScopeIds, optimized);\r\n            if (suspense.deps <= 0) {\r\n                suspense.resolve();\r\n            }\r\n            else if (isInFallback) {\r\n                patch(activeBranch, newFallback, container, anchor, parentComponent, null, // fallback tree will not have suspense context\r\n                isSVG, slotScopeIds, optimized);\r\n                setActiveBranch(suspense, newFallback);\r\n            }\r\n        }\r\n        else {\r\n            // toggled before pending tree is resolved\r\n            suspense.pendingId++;\r\n            if (isHydrating) {\r\n                // if toggled before hydration is finished, the current DOM tree is\r\n                // no longer valid. set it as the active branch so it will be unmounted\r\n                // when resolved\r\n                suspense.isHydrating = false;\r\n                suspense.activeBranch = pendingBranch;\r\n            }\r\n            else {\r\n                unmount(pendingBranch, parentComponent, suspense);\r\n            }\r\n            // increment pending ID. this is used to invalidate async callbacks\r\n            // reset suspense state\r\n            suspense.deps = 0;\r\n            // discard effects from pending branch\r\n            suspense.effects.length = 0;\r\n            // discard previous container\r\n            suspense.hiddenContainer = createElement('div');\r\n            if (isInFallback) {\r\n                // already in fallback state\r\n                patch(null, newBranch, suspense.hiddenContainer, null, parentComponent, suspense, isSVG, slotScopeIds, optimized);\r\n                if (suspense.deps <= 0) {\r\n                    suspense.resolve();\r\n                }\r\n                else {\r\n                    patch(activeBranch, newFallback, container, anchor, parentComponent, null, // fallback tree will not have suspense context\r\n                    isSVG, slotScopeIds, optimized);\r\n                    setActiveBranch(suspense, newFallback);\r\n                }\r\n            }\r\n            else if (activeBranch && isSameVNodeType(newBranch, activeBranch)) {\r\n                // toggled \"back\" to current active branch\r\n                patch(activeBranch, newBranch, container, anchor, parentComponent, suspense, isSVG, slotScopeIds, optimized);\r\n                // force resolve\r\n                suspense.resolve(true);\r\n            }\r\n            else {\r\n                // switched to a 3rd branch\r\n                patch(null, newBranch, suspense.hiddenContainer, null, parentComponent, suspense, isSVG, slotScopeIds, optimized);\r\n                if (suspense.deps <= 0) {\r\n                    suspense.resolve();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        if (activeBranch && isSameVNodeType(newBranch, activeBranch)) {\r\n            // root did not change, just normal patch\r\n            patch(activeBranch, newBranch, container, anchor, parentComponent, suspense, isSVG, slotScopeIds, optimized);\r\n            setActiveBranch(suspense, newBranch);\r\n        }\r\n        else {\r\n            // root node toggled\r\n            // invoke @pending event\r\n            const onPending = n2.props && n2.props.onPending;\r\n            if (isFunction(onPending)) {\r\n                onPending();\r\n            }\r\n            // mount pending branch in off-dom container\r\n            suspense.pendingBranch = newBranch;\r\n            suspense.pendingId++;\r\n            patch(null, newBranch, suspense.hiddenContainer, null, parentComponent, suspense, isSVG, slotScopeIds, optimized);\r\n            if (suspense.deps <= 0) {\r\n                // incoming branch has no async deps, resolve now.\r\n                suspense.resolve();\r\n            }\r\n            else {\r\n                const { timeout, pendingId } = suspense;\r\n                if (timeout > 0) {\r\n                    setTimeout(() => {\r\n                        if (suspense.pendingId === pendingId) {\r\n                            suspense.fallback(newFallback);\r\n                        }\r\n                    }, timeout);\r\n                }\r\n                else if (timeout === 0) {\r\n                    suspense.fallback(newFallback);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\nlet hasWarned = false;\r\nfunction createSuspenseBoundary(vnode, parent, parentComponent, container, hiddenContainer, anchor, isSVG, slotScopeIds, optimized, rendererInternals, isHydrating = false) {\r\n    /* istanbul ignore if */\r\n    if ((process.env.NODE_ENV !== 'production') && !false && !hasWarned) {\r\n        hasWarned = true;\r\n        // @ts-ignore `console.info` cannot be null error\r\n        console[console.info ? 'info' : 'log'](`<Suspense> is an experimental feature and its API will likely change.`);\r\n    }\r\n    const { p: patch, m: move, um: unmount, n: next, o: { parentNode, remove } } = rendererInternals;\r\n    const timeout = toNumber(vnode.props && vnode.props.timeout);\r\n    const suspense = {\r\n        vnode,\r\n        parent,\r\n        parentComponent,\r\n        isSVG,\r\n        container,\r\n        hiddenContainer,\r\n        anchor,\r\n        deps: 0,\r\n        pendingId: 0,\r\n        timeout: typeof timeout === 'number' ? timeout : -1,\r\n        activeBranch: null,\r\n        pendingBranch: null,\r\n        isInFallback: true,\r\n        isHydrating,\r\n        isUnmounted: false,\r\n        effects: [],\r\n        resolve(resume = false) {\r\n            if ((process.env.NODE_ENV !== 'production')) {\r\n                if (!resume && !suspense.pendingBranch) {\r\n                    throw new Error(`suspense.resolve() is called without a pending branch.`);\r\n                }\r\n                if (suspense.isUnmounted) {\r\n                    throw new Error(`suspense.resolve() is called on an already unmounted suspense boundary.`);\r\n                }\r\n            }\r\n            const { vnode, activeBranch, pendingBranch, pendingId, effects, parentComponent, container } = suspense;\r\n            if (suspense.isHydrating) {\r\n                suspense.isHydrating = false;\r\n            }\r\n            else if (!resume) {\r\n                const delayEnter = activeBranch &&\r\n                    pendingBranch.transition &&\r\n                    pendingBranch.transition.mode === 'out-in';\r\n                if (delayEnter) {\r\n                    activeBranch.transition.afterLeave = () => {\r\n                        if (pendingId === suspense.pendingId) {\r\n                            move(pendingBranch, container, anchor, 0 /* ENTER */);\r\n                        }\r\n                    };\r\n                }\r\n                // this is initial anchor on mount\r\n                let { anchor } = suspense;\r\n                // unmount current active tree\r\n                if (activeBranch) {\r\n                    // if the fallback tree was mounted, it may have been moved\r\n                    // as part of a parent suspense. get the latest anchor for insertion\r\n                    anchor = next(activeBranch);\r\n                    unmount(activeBranch, parentComponent, suspense, true);\r\n                }\r\n                if (!delayEnter) {\r\n                    // move content from off-dom container to actual container\r\n                    move(pendingBranch, container, anchor, 0 /* ENTER */);\r\n                }\r\n            }\r\n            setActiveBranch(suspense, pendingBranch);\r\n            suspense.pendingBranch = null;\r\n            suspense.isInFallback = false;\r\n            // flush buffered effects\r\n            // check if there is a pending parent suspense\r\n            let parent = suspense.parent;\r\n            let hasUnresolvedAncestor = false;\r\n            while (parent) {\r\n                if (parent.pendingBranch) {\r\n                    // found a pending parent suspense, merge buffered post jobs\r\n                    // into that parent\r\n                    parent.effects.push(...effects);\r\n                    hasUnresolvedAncestor = true;\r\n                    break;\r\n                }\r\n                parent = parent.parent;\r\n            }\r\n            // no pending parent suspense, flush all jobs\r\n            if (!hasUnresolvedAncestor) {\r\n                queuePostFlushCb(effects);\r\n            }\r\n            suspense.effects = [];\r\n            // invoke @resolve event\r\n            const onResolve = vnode.props && vnode.props.onResolve;\r\n            if (isFunction(onResolve)) {\r\n                onResolve();\r\n            }\r\n        },\r\n        fallback(fallbackVNode) {\r\n            if (!suspense.pendingBranch) {\r\n                return;\r\n            }\r\n            const { vnode, activeBranch, parentComponent, container, isSVG } = suspense;\r\n            // invoke @fallback event\r\n            const onFallback = vnode.props && vnode.props.onFallback;\r\n            if (isFunction(onFallback)) {\r\n                onFallback();\r\n            }\r\n            const anchor = next(activeBranch);\r\n            const mountFallback = () => {\r\n                if (!suspense.isInFallback) {\r\n                    return;\r\n                }\r\n                // mount the fallback tree\r\n                patch(null, fallbackVNode, container, anchor, parentComponent, null, // fallback tree will not have suspense context\r\n                isSVG, slotScopeIds, optimized);\r\n                setActiveBranch(suspense, fallbackVNode);\r\n            };\r\n            const delayEnter = fallbackVNode.transition && fallbackVNode.transition.mode === 'out-in';\r\n            if (delayEnter) {\r\n                activeBranch.transition.afterLeave = mountFallback;\r\n            }\r\n            // unmount current active branch\r\n            unmount(activeBranch, parentComponent, null, // no suspense so unmount hooks fire now\r\n            true // shouldRemove\r\n            );\r\n            suspense.isInFallback = true;\r\n            if (!delayEnter) {\r\n                mountFallback();\r\n            }\r\n        },\r\n        move(container, anchor, type) {\r\n            suspense.activeBranch &&\r\n                move(suspense.activeBranch, container, anchor, type);\r\n            suspense.container = container;\r\n        },\r\n        next() {\r\n            return suspense.activeBranch && next(suspense.activeBranch);\r\n        },\r\n        registerDep(instance, setupRenderEffect) {\r\n            const isInPendingSuspense = !!suspense.pendingBranch;\r\n            if (isInPendingSuspense) {\r\n                suspense.deps++;\r\n            }\r\n            const hydratedEl = instance.vnode.el;\r\n            instance\r\n                .asyncDep.catch(err => {\r\n                handleError(err, instance, 0 /* SETUP_FUNCTION */);\r\n            })\r\n                .then(asyncSetupResult => {\r\n                // retry when the setup() promise resolves.\r\n                // component may have been unmounted before resolve.\r\n                if (instance.isUnmounted ||\r\n                    suspense.isUnmounted ||\r\n                    suspense.pendingId !== instance.suspenseId) {\r\n                    return;\r\n                }\r\n                // retry from this component\r\n                instance.asyncResolved = true;\r\n                const { vnode } = instance;\r\n                if ((process.env.NODE_ENV !== 'production')) {\r\n                    pushWarningContext(vnode);\r\n                }\r\n                handleSetupResult(instance, asyncSetupResult, false);\r\n                if (hydratedEl) {\r\n                    // vnode may have been replaced if an update happened before the\r\n                    // async dep is resolved.\r\n                    vnode.el = hydratedEl;\r\n                }\r\n                const placeholder = !hydratedEl && instance.subTree.el;\r\n                setupRenderEffect(instance, vnode, \r\n                // component may have been moved before resolve.\r\n                // if this is not a hydration, instance.subTree will be the comment\r\n                // placeholder.\r\n                parentNode(hydratedEl || instance.subTree.el), \r\n                // anchor will not be used if this is hydration, so only need to\r\n                // consider the comment placeholder case.\r\n                hydratedEl ? null : next(instance.subTree), suspense, isSVG, optimized);\r\n                if (placeholder) {\r\n                    remove(placeholder);\r\n                }\r\n                updateHOCHostEl(instance, vnode.el);\r\n                if ((process.env.NODE_ENV !== 'production')) {\r\n                    popWarningContext();\r\n                }\r\n                // only decrease deps count if suspense is not already resolved\r\n                if (isInPendingSuspense && --suspense.deps === 0) {\r\n                    suspense.resolve();\r\n                }\r\n            });\r\n        },\r\n        unmount(parentSuspense, doRemove) {\r\n            suspense.isUnmounted = true;\r\n            if (suspense.activeBranch) {\r\n                unmount(suspense.activeBranch, parentComponent, parentSuspense, doRemove);\r\n            }\r\n            if (suspense.pendingBranch) {\r\n                unmount(suspense.pendingBranch, parentComponent, parentSuspense, doRemove);\r\n            }\r\n        }\r\n    };\r\n    return suspense;\r\n}\r\nfunction hydrateSuspense(node, vnode, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, rendererInternals, hydrateNode) {\r\n    /* eslint-disable no-restricted-globals */\r\n    const suspense = (vnode.suspense = createSuspenseBoundary(vnode, parentSuspense, parentComponent, node.parentNode, document.createElement('div'), null, isSVG, slotScopeIds, optimized, rendererInternals, true /* hydrating */));\r\n    // there are two possible scenarios for server-rendered suspense:\r\n    // - success: ssr content should be fully resolved\r\n    // - failure: ssr content should be the fallback branch.\r\n    // however, on the client we don't really know if it has failed or not\r\n    // attempt to hydrate the DOM assuming it has succeeded, but we still\r\n    // need to construct a suspense boundary first\r\n    const result = hydrateNode(node, (suspense.pendingBranch = vnode.ssContent), parentComponent, suspense, slotScopeIds, optimized);\r\n    if (suspense.deps === 0) {\r\n        suspense.resolve();\r\n    }\r\n    return result;\r\n    /* eslint-enable no-restricted-globals */\r\n}\r\nfunction normalizeSuspenseChildren(vnode) {\r\n    const { shapeFlag, children } = vnode;\r\n    let content;\r\n    let fallback;\r\n    if (shapeFlag & 32 /* SLOTS_CHILDREN */) {\r\n        content = normalizeSuspenseSlot(children.default);\r\n        fallback = normalizeSuspenseSlot(children.fallback);\r\n    }\r\n    else {\r\n        content = normalizeSuspenseSlot(children);\r\n        fallback = normalizeVNode(null);\r\n    }\r\n    return {\r\n        content,\r\n        fallback\r\n    };\r\n}\r\nfunction normalizeSuspenseSlot(s) {\r\n    if (isFunction(s)) {\r\n        s = s();\r\n    }\r\n    if (isArray(s)) {\r\n        const singleChild = filterSingleRoot(s);\r\n        if ((process.env.NODE_ENV !== 'production') && !singleChild) {\r\n            warn(`<Suspense> slots expect a single root node.`);\r\n        }\r\n        s = singleChild;\r\n    }\r\n    return normalizeVNode(s);\r\n}\r\nfunction queueEffectWithSuspense(fn, suspense) {\r\n    if (suspense && suspense.pendingBranch) {\r\n        if (isArray(fn)) {\r\n            suspense.effects.push(...fn);\r\n        }\r\n        else {\r\n            suspense.effects.push(fn);\r\n        }\r\n    }\r\n    else {\r\n        queuePostFlushCb(fn);\r\n    }\r\n}\r\nfunction setActiveBranch(suspense, branch) {\r\n    suspense.activeBranch = branch;\r\n    const { vnode, parentComponent } = suspense;\r\n    const el = (vnode.el = branch.el);\r\n    // in case suspense is the root node of a component,\r\n    // recursively update the HOC el\r\n    if (parentComponent && parentComponent.subTree === vnode) {\r\n        parentComponent.vnode.el = el;\r\n        updateHOCHostEl(parentComponent, el);\r\n    }\r\n}\n\nfunction initProps(instance, rawProps, isStateful, // result of bitwise flag comparison\r\nisSSR = false) {\r\n    const props = {};\r\n    const attrs = {};\r\n    def(attrs, InternalObjectKey, 1);\r\n    instance.propsDefaults = Object.create(null);\r\n    setFullProps(instance, rawProps, props, attrs);\r\n    // validation\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        validateProps(rawProps || {}, props, instance);\r\n    }\r\n    if (isStateful) {\r\n        // stateful\r\n        instance.props = isSSR ? props : shallowReactive(props);\r\n    }\r\n    else {\r\n        if (!instance.type.props) {\r\n            // functional w/ optional props, props === attrs\r\n            instance.props = attrs;\r\n        }\r\n        else {\r\n            // functional w/ declared props\r\n            instance.props = props;\r\n        }\r\n    }\r\n    instance.attrs = attrs;\r\n}\r\nfunction updateProps(instance, rawProps, rawPrevProps, optimized) {\r\n    const { props, attrs, vnode: { patchFlag } } = instance;\r\n    const rawCurrentProps = toRaw(props);\r\n    const [options] = instance.propsOptions;\r\n    if (\r\n    // always force full diff in dev\r\n    // - #1942 if hmr is enabled with sfc component\r\n    // - vite#872 non-sfc component used by sfc component\r\n    !((process.env.NODE_ENV !== 'production') &&\r\n        (instance.type.__hmrId ||\r\n            (instance.parent && instance.parent.type.__hmrId))) &&\r\n        (optimized || patchFlag > 0) &&\r\n        !(patchFlag & 16 /* FULL_PROPS */)) {\r\n        if (patchFlag & 8 /* PROPS */) {\r\n            // Compiler-generated props & no keys change, just set the updated\r\n            // the props.\r\n            const propsToUpdate = instance.vnode.dynamicProps;\r\n            for (let i = 0; i < propsToUpdate.length; i++) {\r\n                const key = propsToUpdate[i];\r\n                // PROPS flag guarantees rawProps to be non-null\r\n                const value = rawProps[key];\r\n                if (options) {\r\n                    // attr / props separation was done on init and will be consistent\r\n                    // in this code path, so just check if attrs have it.\r\n                    if (hasOwn(attrs, key)) {\r\n                        attrs[key] = value;\r\n                    }\r\n                    else {\r\n                        const camelizedKey = camelize(key);\r\n                        props[camelizedKey] = resolvePropValue(options, rawCurrentProps, camelizedKey, value, instance);\r\n                    }\r\n                }\r\n                else {\r\n                    attrs[key] = value;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        // full props update.\r\n        setFullProps(instance, rawProps, props, attrs);\r\n        // in case of dynamic props, check if we need to delete keys from\r\n        // the props object\r\n        let kebabKey;\r\n        for (const key in rawCurrentProps) {\r\n            if (!rawProps ||\r\n                // for camelCase\r\n                (!hasOwn(rawProps, key) &&\r\n                    // it's possible the original props was passed in as kebab-case\r\n                    // and converted to camelCase (#955)\r\n                    ((kebabKey = hyphenate(key)) === key || !hasOwn(rawProps, kebabKey)))) {\r\n                if (options) {\r\n                    if (rawPrevProps &&\r\n                        // for camelCase\r\n                        (rawPrevProps[key] !== undefined ||\r\n                            // for kebab-case\r\n                            rawPrevProps[kebabKey] !== undefined)) {\r\n                        props[key] = resolvePropValue(options, rawProps || EMPTY_OBJ, key, undefined, instance);\r\n                    }\r\n                }\r\n                else {\r\n                    delete props[key];\r\n                }\r\n            }\r\n        }\r\n        // in the case of functional component w/o props declaration, props and\r\n        // attrs point to the same object so it should already have been updated.\r\n        if (attrs !== rawCurrentProps) {\r\n            for (const key in attrs) {\r\n                if (!rawProps || !hasOwn(rawProps, key)) {\r\n                    delete attrs[key];\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // trigger updates for $attrs in case it's used in component slots\r\n    trigger(instance, \"set\" /* SET */, '$attrs');\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        validateProps(rawProps || {}, props, instance);\r\n    }\r\n}\r\nfunction setFullProps(instance, rawProps, props, attrs) {\r\n    const [options, needCastKeys] = instance.propsOptions;\r\n    if (rawProps) {\r\n        for (const key in rawProps) {\r\n            const value = rawProps[key];\r\n            // key, ref are reserved and never passed down\r\n            if (isReservedProp(key)) {\r\n                continue;\r\n            }\r\n            // prop option names are camelized during normalization, so to support\r\n            // kebab -> camel conversion here we need to camelize the key.\r\n            let camelKey;\r\n            if (options && hasOwn(options, (camelKey = camelize(key)))) {\r\n                props[camelKey] = value;\r\n            }\r\n            else if (!isEmitListener(instance.emitsOptions, key)) {\r\n                // Any non-declared (either as a prop or an emitted event) props are put\r\n                // into a separate `attrs` object for spreading. Make sure to preserve\r\n                // original key casing\r\n                attrs[key] = value;\r\n            }\r\n        }\r\n    }\r\n    if (needCastKeys) {\r\n        const rawCurrentProps = toRaw(props);\r\n        for (let i = 0; i < needCastKeys.length; i++) {\r\n            const key = needCastKeys[i];\r\n            props[key] = resolvePropValue(options, rawCurrentProps, key, rawCurrentProps[key], instance);\r\n        }\r\n    }\r\n}\r\nfunction resolvePropValue(options, props, key, value, instance) {\r\n    const opt = options[key];\r\n    if (opt != null) {\r\n        const hasDefault = hasOwn(opt, 'default');\r\n        // default values\r\n        if (hasDefault && value === undefined) {\r\n            const defaultValue = opt.default;\r\n            if (opt.type !== Function && isFunction(defaultValue)) {\r\n                const { propsDefaults } = instance;\r\n                if (key in propsDefaults) {\r\n                    value = propsDefaults[key];\r\n                }\r\n                else {\r\n                    setCurrentInstance(instance);\r\n                    value = propsDefaults[key] = defaultValue(props);\r\n                    setCurrentInstance(null);\r\n                }\r\n            }\r\n            else {\r\n                value = defaultValue;\r\n            }\r\n        }\r\n        // boolean casting\r\n        if (opt[0 /* shouldCast */]) {\r\n            if (!hasOwn(props, key) && !hasDefault) {\r\n                value = false;\r\n            }\r\n            else if (opt[1 /* shouldCastTrue */] &&\r\n                (value === '' || value === hyphenate(key))) {\r\n                value = true;\r\n            }\r\n        }\r\n    }\r\n    return value;\r\n}\r\nfunction normalizePropsOptions(comp, appContext, asMixin = false) {\r\n    if (!appContext.deopt && comp.__props) {\r\n        return comp.__props;\r\n    }\r\n    const raw = comp.props;\r\n    const normalized = {};\r\n    const needCastKeys = [];\r\n    // apply mixin/extends props\r\n    let hasExtends = false;\r\n    if (__VUE_OPTIONS_API__ && !isFunction(comp)) {\r\n        const extendProps = (raw) => {\r\n            hasExtends = true;\r\n            const [props, keys] = normalizePropsOptions(raw, appContext, true);\r\n            extend(normalized, props);\r\n            if (keys)\r\n                needCastKeys.push(...keys);\r\n        };\r\n        if (!asMixin && appContext.mixins.length) {\r\n            appContext.mixins.forEach(extendProps);\r\n        }\r\n        if (comp.extends) {\r\n            extendProps(comp.extends);\r\n        }\r\n        if (comp.mixins) {\r\n            comp.mixins.forEach(extendProps);\r\n        }\r\n    }\r\n    if (!raw && !hasExtends) {\r\n        return (comp.__props = EMPTY_ARR);\r\n    }\r\n    if (isArray(raw)) {\r\n        for (let i = 0; i < raw.length; i++) {\r\n            if ((process.env.NODE_ENV !== 'production') && !isString(raw[i])) {\r\n                warn(`props must be strings when using array syntax.`, raw[i]);\r\n            }\r\n            const normalizedKey = camelize(raw[i]);\r\n            if (validatePropName(normalizedKey)) {\r\n                normalized[normalizedKey] = EMPTY_OBJ;\r\n            }\r\n        }\r\n    }\r\n    else if (raw) {\r\n        if ((process.env.NODE_ENV !== 'production') && !isObject(raw)) {\r\n            warn(`invalid props options`, raw);\r\n        }\r\n        for (const key in raw) {\r\n            const normalizedKey = camelize(key);\r\n            if (validatePropName(normalizedKey)) {\r\n                const opt = raw[key];\r\n                const prop = (normalized[normalizedKey] =\r\n                    isArray(opt) || isFunction(opt) ? { type: opt } : opt);\r\n                if (prop) {\r\n                    const booleanIndex = getTypeIndex(Boolean, prop.type);\r\n                    const stringIndex = getTypeIndex(String, prop.type);\r\n                    prop[0 /* shouldCast */] = booleanIndex > -1;\r\n                    prop[1 /* shouldCastTrue */] =\r\n                        stringIndex < 0 || booleanIndex < stringIndex;\r\n                    // if the prop needs boolean casting or default value\r\n                    if (booleanIndex > -1 || hasOwn(prop, 'default')) {\r\n                        needCastKeys.push(normalizedKey);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return (comp.__props = [normalized, needCastKeys]);\r\n}\r\nfunction validatePropName(key) {\r\n    if (key[0] !== '$') {\r\n        return true;\r\n    }\r\n    else if ((process.env.NODE_ENV !== 'production')) {\r\n        warn(`Invalid prop name: \"${key}\" is a reserved property.`);\r\n    }\r\n    return false;\r\n}\r\n// use function string name to check type constructors\r\n// so that it works across vms / iframes.\r\nfunction getType(ctor) {\r\n    const match = ctor && ctor.toString().match(/^\\s*function (\\w+)/);\r\n    return match ? match[1] : '';\r\n}\r\nfunction isSameType(a, b) {\r\n    return getType(a) === getType(b);\r\n}\r\nfunction getTypeIndex(type, expectedTypes) {\r\n    if (isArray(expectedTypes)) {\r\n        return expectedTypes.findIndex(t => isSameType(t, type));\r\n    }\r\n    else if (isFunction(expectedTypes)) {\r\n        return isSameType(expectedTypes, type) ? 0 : -1;\r\n    }\r\n    return -1;\r\n}\r\n/**\r\n * dev only\r\n */\r\nfunction validateProps(rawProps, props, instance) {\r\n    const resolvedValues = toRaw(props);\r\n    const options = instance.propsOptions[0];\r\n    for (const key in options) {\r\n        let opt = options[key];\r\n        if (opt == null)\r\n            continue;\r\n        validateProp(key, resolvedValues[key], opt, !hasOwn(rawProps, key) && !hasOwn(rawProps, hyphenate(key)));\r\n    }\r\n}\r\n/**\r\n * dev only\r\n */\r\nfunction validateProp(name, value, prop, isAbsent) {\r\n    const { type, required, validator } = prop;\r\n    // required!\r\n    if (required && isAbsent) {\r\n        warn('Missing required prop: \"' + name + '\"');\r\n        return;\r\n    }\r\n    // missing but optional\r\n    if (value == null && !prop.required) {\r\n        return;\r\n    }\r\n    // type check\r\n    if (type != null && type !== true) {\r\n        let isValid = false;\r\n        const types = isArray(type) ? type : [type];\r\n        const expectedTypes = [];\r\n        // value is valid as long as one of the specified types match\r\n        for (let i = 0; i < types.length && !isValid; i++) {\r\n            const { valid, expectedType } = assertType(value, types[i]);\r\n            expectedTypes.push(expectedType || '');\r\n            isValid = valid;\r\n        }\r\n        if (!isValid) {\r\n            warn(getInvalidTypeMessage(name, value, expectedTypes));\r\n            return;\r\n        }\r\n    }\r\n    // custom validator\r\n    if (validator && !validator(value)) {\r\n        warn('Invalid prop: custom validator check failed for prop \"' + name + '\".');\r\n    }\r\n}\r\nconst isSimpleType = /*#__PURE__*/ makeMap('String,Number,Boolean,Function,Symbol,BigInt');\r\n/**\r\n * dev only\r\n */\r\nfunction assertType(value, type) {\r\n    let valid;\r\n    const expectedType = getType(type);\r\n    if (isSimpleType(expectedType)) {\r\n        const t = typeof value;\r\n        valid = t === expectedType.toLowerCase();\r\n        // for primitive wrapper objects\r\n        if (!valid && t === 'object') {\r\n            valid = value instanceof type;\r\n        }\r\n    }\r\n    else if (expectedType === 'Object') {\r\n        valid = isObject(value);\r\n    }\r\n    else if (expectedType === 'Array') {\r\n        valid = isArray(value);\r\n    }\r\n    else {\r\n        valid = value instanceof type;\r\n    }\r\n    return {\r\n        valid,\r\n        expectedType\r\n    };\r\n}\r\n/**\r\n * dev only\r\n */\r\nfunction getInvalidTypeMessage(name, value, expectedTypes) {\r\n    let message = `Invalid prop: type check failed for prop \"${name}\".` +\r\n        ` Expected ${expectedTypes.map(capitalize).join(', ')}`;\r\n    const expectedType = expectedTypes[0];\r\n    const receivedType = toRawType(value);\r\n    const expectedValue = styleValue(value, expectedType);\r\n    const receivedValue = styleValue(value, receivedType);\r\n    // check if we need to specify expected value\r\n    if (expectedTypes.length === 1 &&\r\n        isExplicable(expectedType) &&\r\n        !isBoolean(expectedType, receivedType)) {\r\n        message += ` with value ${expectedValue}`;\r\n    }\r\n    message += `, got ${receivedType} `;\r\n    // check if we need to specify received value\r\n    if (isExplicable(receivedType)) {\r\n        message += `with value ${receivedValue}.`;\r\n    }\r\n    return message;\r\n}\r\n/**\r\n * dev only\r\n */\r\nfunction styleValue(value, type) {\r\n    if (type === 'String') {\r\n        return `\"${value}\"`;\r\n    }\r\n    else if (type === 'Number') {\r\n        return `${Number(value)}`;\r\n    }\r\n    else {\r\n        return `${value}`;\r\n    }\r\n}\r\n/**\r\n * dev only\r\n */\r\nfunction isExplicable(type) {\r\n    const explicitTypes = ['string', 'number', 'boolean'];\r\n    return explicitTypes.some(elem => type.toLowerCase() === elem);\r\n}\r\n/**\r\n * dev only\r\n */\r\nfunction isBoolean(...args) {\r\n    return args.some(elem => elem.toLowerCase() === 'boolean');\r\n}\n\nfunction injectHook(type, hook, target = currentInstance, prepend = false) {\r\n    if (target) {\r\n        const hooks = target[type] || (target[type] = []);\r\n        // cache the error handling wrapper for injected hooks so the same hook\r\n        // can be properly deduped by the scheduler. \"__weh\" stands for \"with error\r\n        // handling\".\r\n        const wrappedHook = hook.__weh ||\r\n            (hook.__weh = (...args) => {\r\n                if (target.isUnmounted) {\r\n                    return;\r\n                }\r\n                // disable tracking inside all lifecycle hooks\r\n                // since they can potentially be called inside effects.\r\n                pauseTracking();\r\n                // Set currentInstance during hook invocation.\r\n                // This assumes the hook does not synchronously trigger other hooks, which\r\n                // can only be false when the user does something really funky.\r\n                setCurrentInstance(target);\r\n                const res = callWithAsyncErrorHandling(hook, target, type, args);\r\n                setCurrentInstance(null);\r\n                resetTracking();\r\n                return res;\r\n            });\r\n        if (prepend) {\r\n            hooks.unshift(wrappedHook);\r\n        }\r\n        else {\r\n            hooks.push(wrappedHook);\r\n        }\r\n        return wrappedHook;\r\n    }\r\n    else if ((process.env.NODE_ENV !== 'production')) {\r\n        const apiName = toHandlerKey(ErrorTypeStrings[type].replace(/ hook$/, ''));\r\n        warn(`${apiName} is called when there is no active component instance to be ` +\r\n            `associated with. ` +\r\n            `Lifecycle injection APIs can only be used during execution of setup().` +\r\n            (` If you are using async setup(), make sure to register lifecycle ` +\r\n                    `hooks before the first await statement.`\r\n                ));\r\n    }\r\n}\r\nconst createHook = (lifecycle) => (hook, target = currentInstance) => \r\n// post-create lifecycle registrations are noops during SSR\r\n!isInSSRComponentSetup && injectHook(lifecycle, hook, target);\r\nconst onBeforeMount = createHook(\"bm\" /* BEFORE_MOUNT */);\r\nconst onMounted = createHook(\"m\" /* MOUNTED */);\r\nconst onBeforeUpdate = createHook(\"bu\" /* BEFORE_UPDATE */);\r\nconst onUpdated = createHook(\"u\" /* UPDATED */);\r\nconst onBeforeUnmount = createHook(\"bum\" /* BEFORE_UNMOUNT */);\r\nconst onUnmounted = createHook(\"um\" /* UNMOUNTED */);\r\nconst onRenderTriggered = createHook(\"rtg\" /* RENDER_TRIGGERED */);\r\nconst onRenderTracked = createHook(\"rtc\" /* RENDER_TRACKED */);\r\nconst onErrorCaptured = (hook, target = currentInstance) => {\r\n    injectHook(\"ec\" /* ERROR_CAPTURED */, hook, target);\r\n};\n\n// Simple effect.\r\nfunction watchEffect(effect, options) {\r\n    return doWatch(effect, null, options);\r\n}\r\n// initial value for watchers to trigger on undefined initial values\r\nconst INITIAL_WATCHER_VALUE = {};\r\n// implementation\r\nfunction watch(source, cb, options) {\r\n    if ((process.env.NODE_ENV !== 'production') && !isFunction(cb)) {\r\n        warn(`\\`watch(fn, options?)\\` signature has been moved to a separate API. ` +\r\n            `Use \\`watchEffect(fn, options?)\\` instead. \\`watch\\` now only ` +\r\n            `supports \\`watch(source, cb, options?) signature.`);\r\n    }\r\n    return doWatch(source, cb, options);\r\n}\r\nfunction doWatch(source, cb, { immediate, deep, flush, onTrack, onTrigger } = EMPTY_OBJ, instance = currentInstance) {\r\n    if ((process.env.NODE_ENV !== 'production') && !cb) {\r\n        if (immediate !== undefined) {\r\n            warn(`watch() \"immediate\" option is only respected when using the ` +\r\n                `watch(source, callback, options?) signature.`);\r\n        }\r\n        if (deep !== undefined) {\r\n            warn(`watch() \"deep\" option is only respected when using the ` +\r\n                `watch(source, callback, options?) signature.`);\r\n        }\r\n    }\r\n    const warnInvalidSource = (s) => {\r\n        warn(`Invalid watch source: `, s, `A watch source can only be a getter/effect function, a ref, ` +\r\n            `a reactive object, or an array of these types.`);\r\n    };\r\n    let getter;\r\n    let forceTrigger = false;\r\n    if (isRef(source)) {\r\n        getter = () => source.value;\r\n        forceTrigger = !!source._shallow;\r\n    }\r\n    else if (isReactive(source)) {\r\n        getter = () => source;\r\n        deep = true;\r\n    }\r\n    else if (isArray(source)) {\r\n        getter = () => source.map(s => {\r\n            if (isRef(s)) {\r\n                return s.value;\r\n            }\r\n            else if (isReactive(s)) {\r\n                return traverse(s);\r\n            }\r\n            else if (isFunction(s)) {\r\n                return callWithErrorHandling(s, instance, 2 /* WATCH_GETTER */, [\r\n                    instance && instance.proxy\r\n                ]);\r\n            }\r\n            else {\r\n                (process.env.NODE_ENV !== 'production') && warnInvalidSource(s);\r\n            }\r\n        });\r\n    }\r\n    else if (isFunction(source)) {\r\n        if (cb) {\r\n            // getter with cb\r\n            getter = () => callWithErrorHandling(source, instance, 2 /* WATCH_GETTER */, [\r\n                instance && instance.proxy\r\n            ]);\r\n        }\r\n        else {\r\n            // no cb -> simple effect\r\n            getter = () => {\r\n                if (instance && instance.isUnmounted) {\r\n                    return;\r\n                }\r\n                if (cleanup) {\r\n                    cleanup();\r\n                }\r\n                return callWithAsyncErrorHandling(source, instance, 3 /* WATCH_CALLBACK */, [onInvalidate]);\r\n            };\r\n        }\r\n    }\r\n    else {\r\n        getter = NOOP;\r\n        (process.env.NODE_ENV !== 'production') && warnInvalidSource(source);\r\n    }\r\n    if (cb && deep) {\r\n        const baseGetter = getter;\r\n        getter = () => traverse(baseGetter());\r\n    }\r\n    let cleanup;\r\n    let onInvalidate = (fn) => {\r\n        cleanup = runner.options.onStop = () => {\r\n            callWithErrorHandling(fn, instance, 4 /* WATCH_CLEANUP */);\r\n        };\r\n    };\r\n    let oldValue = isArray(source) ? [] : INITIAL_WATCHER_VALUE;\r\n    const job = () => {\r\n        if (!runner.active) {\r\n            return;\r\n        }\r\n        if (cb) {\r\n            // watch(source, cb)\r\n            const newValue = runner();\r\n            if (deep || forceTrigger || hasChanged(newValue, oldValue)) {\r\n                // cleanup before running cb again\r\n                if (cleanup) {\r\n                    cleanup();\r\n                }\r\n                callWithAsyncErrorHandling(cb, instance, 3 /* WATCH_CALLBACK */, [\r\n                    newValue,\r\n                    // pass undefined as the old value when it's changed for the first time\r\n                    oldValue === INITIAL_WATCHER_VALUE ? undefined : oldValue,\r\n                    onInvalidate\r\n                ]);\r\n                oldValue = newValue;\r\n            }\r\n        }\r\n        else {\r\n            // watchEffect\r\n            runner();\r\n        }\r\n    };\r\n    // important: mark the job as a watcher callback so that scheduler knows\r\n    // it is allowed to self-trigger (#1727)\r\n    job.allowRecurse = !!cb;\r\n    let scheduler;\r\n    if (flush === 'sync') {\r\n        scheduler = job;\r\n    }\r\n    else if (flush === 'post') {\r\n        scheduler = () => queuePostRenderEffect(job, instance && instance.suspense);\r\n    }\r\n    else {\r\n        // default: 'pre'\r\n        scheduler = () => {\r\n            if (!instance || instance.isMounted) {\r\n                queuePreFlushCb(job);\r\n            }\r\n            else {\r\n                // with 'pre' option, the first call must happen before\r\n                // the component is mounted so it is called synchronously.\r\n                job();\r\n            }\r\n        };\r\n    }\r\n    const runner = effect(getter, {\r\n        lazy: true,\r\n        onTrack,\r\n        onTrigger,\r\n        scheduler\r\n    });\r\n    recordInstanceBoundEffect(runner, instance);\r\n    // initial run\r\n    if (cb) {\r\n        if (immediate) {\r\n            job();\r\n        }\r\n        else {\r\n            oldValue = runner();\r\n        }\r\n    }\r\n    else if (flush === 'post') {\r\n        queuePostRenderEffect(runner, instance && instance.suspense);\r\n    }\r\n    else {\r\n        runner();\r\n    }\r\n    return () => {\r\n        stop(runner);\r\n        if (instance) {\r\n            remove(instance.effects, runner);\r\n        }\r\n    };\r\n}\r\n// this.$watch\r\nfunction instanceWatch(source, cb, options) {\r\n    const publicThis = this.proxy;\r\n    const getter = isString(source)\r\n        ? () => publicThis[source]\r\n        : source.bind(publicThis);\r\n    return doWatch(getter, cb.bind(publicThis), options, this);\r\n}\r\nfunction traverse(value, seen = new Set()) {\r\n    if (!isObject(value) || seen.has(value)) {\r\n        return value;\r\n    }\r\n    seen.add(value);\r\n    if (isRef(value)) {\r\n        traverse(value.value, seen);\r\n    }\r\n    else if (isArray(value)) {\r\n        for (let i = 0; i < value.length; i++) {\r\n            traverse(value[i], seen);\r\n        }\r\n    }\r\n    else if (isSet(value) || isMap(value)) {\r\n        value.forEach((v) => {\r\n            traverse(v, seen);\r\n        });\r\n    }\r\n    else {\r\n        for (const key in value) {\r\n            traverse(value[key], seen);\r\n        }\r\n    }\r\n    return value;\r\n}\n\nfunction useTransitionState() {\r\n    const state = {\r\n        isMounted: false,\r\n        isLeaving: false,\r\n        isUnmounting: false,\r\n        leavingVNodes: new Map()\r\n    };\r\n    onMounted(() => {\r\n        state.isMounted = true;\r\n    });\r\n    onBeforeUnmount(() => {\r\n        state.isUnmounting = true;\r\n    });\r\n    return state;\r\n}\r\nconst TransitionHookValidator = [Function, Array];\r\nconst BaseTransitionImpl = {\r\n    name: `BaseTransition`,\r\n    props: {\r\n        mode: String,\r\n        appear: Boolean,\r\n        persisted: Boolean,\r\n        // enter\r\n        onBeforeEnter: TransitionHookValidator,\r\n        onEnter: TransitionHookValidator,\r\n        onAfterEnter: TransitionHookValidator,\r\n        onEnterCancelled: TransitionHookValidator,\r\n        // leave\r\n        onBeforeLeave: TransitionHookValidator,\r\n        onLeave: TransitionHookValidator,\r\n        onAfterLeave: TransitionHookValidator,\r\n        onLeaveCancelled: TransitionHookValidator,\r\n        // appear\r\n        onBeforeAppear: TransitionHookValidator,\r\n        onAppear: TransitionHookValidator,\r\n        onAfterAppear: TransitionHookValidator,\r\n        onAppearCancelled: TransitionHookValidator\r\n    },\r\n    setup(props, { slots }) {\r\n        const instance = getCurrentInstance();\r\n        const state = useTransitionState();\r\n        let prevTransitionKey;\r\n        return () => {\r\n            const children = slots.default && getTransitionRawChildren(slots.default(), true);\r\n            if (!children || !children.length) {\r\n                return;\r\n            }\r\n            // warn multiple elements\r\n            if ((process.env.NODE_ENV !== 'production') && children.length > 1) {\r\n                warn('<transition> can only be used on a single element or component. Use ' +\r\n                    '<transition-group> for lists.');\r\n            }\r\n            // there's no need to track reactivity for these props so use the raw\r\n            // props for a bit better perf\r\n            const rawProps = toRaw(props);\r\n            const { mode } = rawProps;\r\n            // check mode\r\n            if ((process.env.NODE_ENV !== 'production') && mode && !['in-out', 'out-in', 'default'].includes(mode)) {\r\n                warn(`invalid <transition> mode: ${mode}`);\r\n            }\r\n            // at this point children has a guaranteed length of 1.\r\n            const child = children[0];\r\n            if (state.isLeaving) {\r\n                return emptyPlaceholder(child);\r\n            }\r\n            // in the case of <transition><keep-alive/></transition>, we need to\r\n            // compare the type of the kept-alive children.\r\n            const innerChild = getKeepAliveChild(child);\r\n            if (!innerChild) {\r\n                return emptyPlaceholder(child);\r\n            }\r\n            const enterHooks = resolveTransitionHooks(innerChild, rawProps, state, instance);\r\n            setTransitionHooks(innerChild, enterHooks);\r\n            const oldChild = instance.subTree;\r\n            const oldInnerChild = oldChild && getKeepAliveChild(oldChild);\r\n            let transitionKeyChanged = false;\r\n            const { getTransitionKey } = innerChild.type;\r\n            if (getTransitionKey) {\r\n                const key = getTransitionKey();\r\n                if (prevTransitionKey === undefined) {\r\n                    prevTransitionKey = key;\r\n                }\r\n                else if (key !== prevTransitionKey) {\r\n                    prevTransitionKey = key;\r\n                    transitionKeyChanged = true;\r\n                }\r\n            }\r\n            // handle mode\r\n            if (oldInnerChild &&\r\n                oldInnerChild.type !== Comment &&\r\n                (!isSameVNodeType(innerChild, oldInnerChild) || transitionKeyChanged)) {\r\n                const leavingHooks = resolveTransitionHooks(oldInnerChild, rawProps, state, instance);\r\n                // update old tree's hooks in case of dynamic transition\r\n                setTransitionHooks(oldInnerChild, leavingHooks);\r\n                // switching between different views\r\n                if (mode === 'out-in') {\r\n                    state.isLeaving = true;\r\n                    // return placeholder node and queue update when leave finishes\r\n                    leavingHooks.afterLeave = () => {\r\n                        state.isLeaving = false;\r\n                        instance.update();\r\n                    };\r\n                    return emptyPlaceholder(child);\r\n                }\r\n                else if (mode === 'in-out' && innerChild.type !== Comment) {\r\n                    leavingHooks.delayLeave = (el, earlyRemove, delayedLeave) => {\r\n                        const leavingVNodesCache = getLeavingNodesForType(state, oldInnerChild);\r\n                        leavingVNodesCache[String(oldInnerChild.key)] = oldInnerChild;\r\n                        // early removal callback\r\n                        el._leaveCb = () => {\r\n                            earlyRemove();\r\n                            el._leaveCb = undefined;\r\n                            delete enterHooks.delayedLeave;\r\n                        };\r\n                        enterHooks.delayedLeave = delayedLeave;\r\n                    };\r\n                }\r\n            }\r\n            return child;\r\n        };\r\n    }\r\n};\r\n// export the public type for h/tsx inference\r\n// also to avoid inline import() in generated d.ts files\r\nconst BaseTransition = BaseTransitionImpl;\r\nfunction getLeavingNodesForType(state, vnode) {\r\n    const { leavingVNodes } = state;\r\n    let leavingVNodesCache = leavingVNodes.get(vnode.type);\r\n    if (!leavingVNodesCache) {\r\n        leavingVNodesCache = Object.create(null);\r\n        leavingVNodes.set(vnode.type, leavingVNodesCache);\r\n    }\r\n    return leavingVNodesCache;\r\n}\r\n// The transition hooks are attached to the vnode as vnode.transition\r\n// and will be called at appropriate timing in the renderer.\r\nfunction resolveTransitionHooks(vnode, props, state, instance) {\r\n    const { appear, mode, persisted = false, onBeforeEnter, onEnter, onAfterEnter, onEnterCancelled, onBeforeLeave, onLeave, onAfterLeave, onLeaveCancelled, onBeforeAppear, onAppear, onAfterAppear, onAppearCancelled } = props;\r\n    const key = String(vnode.key);\r\n    const leavingVNodesCache = getLeavingNodesForType(state, vnode);\r\n    const callHook = (hook, args) => {\r\n        hook &&\r\n            callWithAsyncErrorHandling(hook, instance, 9 /* TRANSITION_HOOK */, args);\r\n    };\r\n    const hooks = {\r\n        mode,\r\n        persisted,\r\n        beforeEnter(el) {\r\n            let hook = onBeforeEnter;\r\n            if (!state.isMounted) {\r\n                if (appear) {\r\n                    hook = onBeforeAppear || onBeforeEnter;\r\n                }\r\n                else {\r\n                    return;\r\n                }\r\n            }\r\n            // for same element (v-show)\r\n            if (el._leaveCb) {\r\n                el._leaveCb(true /* cancelled */);\r\n            }\r\n            // for toggled element with same key (v-if)\r\n            const leavingVNode = leavingVNodesCache[key];\r\n            if (leavingVNode &&\r\n                isSameVNodeType(vnode, leavingVNode) &&\r\n                leavingVNode.el._leaveCb) {\r\n                // force early removal (not cancelled)\r\n                leavingVNode.el._leaveCb();\r\n            }\r\n            callHook(hook, [el]);\r\n        },\r\n        enter(el) {\r\n            let hook = onEnter;\r\n            let afterHook = onAfterEnter;\r\n            let cancelHook = onEnterCancelled;\r\n            if (!state.isMounted) {\r\n                if (appear) {\r\n                    hook = onAppear || onEnter;\r\n                    afterHook = onAfterAppear || onAfterEnter;\r\n                    cancelHook = onAppearCancelled || onEnterCancelled;\r\n                }\r\n                else {\r\n                    return;\r\n                }\r\n            }\r\n            let called = false;\r\n            const done = (el._enterCb = (cancelled) => {\r\n                if (called)\r\n                    return;\r\n                called = true;\r\n                if (cancelled) {\r\n                    callHook(cancelHook, [el]);\r\n                }\r\n                else {\r\n                    callHook(afterHook, [el]);\r\n                }\r\n                if (hooks.delayedLeave) {\r\n                    hooks.delayedLeave();\r\n                }\r\n                el._enterCb = undefined;\r\n            });\r\n            if (hook) {\r\n                hook(el, done);\r\n                if (hook.length <= 1) {\r\n                    done();\r\n                }\r\n            }\r\n            else {\r\n                done();\r\n            }\r\n        },\r\n        leave(el, remove) {\r\n            const key = String(vnode.key);\r\n            if (el._enterCb) {\r\n                el._enterCb(true /* cancelled */);\r\n            }\r\n            if (state.isUnmounting) {\r\n                return remove();\r\n            }\r\n            callHook(onBeforeLeave, [el]);\r\n            let called = false;\r\n            const done = (el._leaveCb = (cancelled) => {\r\n                if (called)\r\n                    return;\r\n                called = true;\r\n                remove();\r\n                if (cancelled) {\r\n                    callHook(onLeaveCancelled, [el]);\r\n                }\r\n                else {\r\n                    callHook(onAfterLeave, [el]);\r\n                }\r\n                el._leaveCb = undefined;\r\n                if (leavingVNodesCache[key] === vnode) {\r\n                    delete leavingVNodesCache[key];\r\n                }\r\n            });\r\n            leavingVNodesCache[key] = vnode;\r\n            if (onLeave) {\r\n                onLeave(el, done);\r\n                if (onLeave.length <= 1) {\r\n                    done();\r\n                }\r\n            }\r\n            else {\r\n                done();\r\n            }\r\n        },\r\n        clone(vnode) {\r\n            return resolveTransitionHooks(vnode, props, state, instance);\r\n        }\r\n    };\r\n    return hooks;\r\n}\r\n// the placeholder really only handles one special case: KeepAlive\r\n// in the case of a KeepAlive in a leave phase we need to return a KeepAlive\r\n// placeholder with empty content to avoid the KeepAlive instance from being\r\n// unmounted.\r\nfunction emptyPlaceholder(vnode) {\r\n    if (isKeepAlive(vnode)) {\r\n        vnode = cloneVNode(vnode);\r\n        vnode.children = null;\r\n        return vnode;\r\n    }\r\n}\r\nfunction getKeepAliveChild(vnode) {\r\n    return isKeepAlive(vnode)\r\n        ? vnode.children\r\n            ? vnode.children[0]\r\n            : undefined\r\n        : vnode;\r\n}\r\nfunction setTransitionHooks(vnode, hooks) {\r\n    if (vnode.shapeFlag & 6 /* COMPONENT */ && vnode.component) {\r\n        setTransitionHooks(vnode.component.subTree, hooks);\r\n    }\r\n    else if (vnode.shapeFlag & 128 /* SUSPENSE */) {\r\n        vnode.ssContent.transition = hooks.clone(vnode.ssContent);\r\n        vnode.ssFallback.transition = hooks.clone(vnode.ssFallback);\r\n    }\r\n    else {\r\n        vnode.transition = hooks;\r\n    }\r\n}\r\nfunction getTransitionRawChildren(children, keepComment = false) {\r\n    let ret = [];\r\n    let keyedFragmentCount = 0;\r\n    for (let i = 0; i < children.length; i++) {\r\n        const child = children[i];\r\n        // handle fragment children case, e.g. v-for\r\n        if (child.type === Fragment) {\r\n            if (child.patchFlag & 128 /* KEYED_FRAGMENT */)\r\n                keyedFragmentCount++;\r\n            ret = ret.concat(getTransitionRawChildren(child.children, keepComment));\r\n        }\r\n        // comment placeholders should be skipped, e.g. v-if\r\n        else if (keepComment || child.type !== Comment) {\r\n            ret.push(child);\r\n        }\r\n    }\r\n    // #1126 if a transition children list contains multiple sub fragments, these\r\n    // fragments will be merged into a flat children array. Since each v-for\r\n    // fragment may contain different static bindings inside, we need to de-op\r\n    // these children to force full diffs to ensure correct behavior.\r\n    if (keyedFragmentCount > 1) {\r\n        for (let i = 0; i < ret.length; i++) {\r\n            ret[i].patchFlag = -2 /* BAIL */;\r\n        }\r\n    }\r\n    return ret;\r\n}\n\nconst isKeepAlive = (vnode) => vnode.type.__isKeepAlive;\r\nconst KeepAliveImpl = {\r\n    name: `KeepAlive`,\r\n    // Marker for special handling inside the renderer. We are not using a ===\r\n    // check directly on KeepAlive in the renderer, because importing it directly\r\n    // would prevent it from being tree-shaken.\r\n    __isKeepAlive: true,\r\n    props: {\r\n        include: [String, RegExp, Array],\r\n        exclude: [String, RegExp, Array],\r\n        max: [String, Number]\r\n    },\r\n    setup(props, { slots }) {\r\n        const instance = getCurrentInstance();\r\n        // KeepAlive communicates with the instantiated renderer via the\r\n        // ctx where the renderer passes in its internals,\r\n        // and the KeepAlive instance exposes activate/deactivate implementations.\r\n        // The whole point of this is to avoid importing KeepAlive directly in the\r\n        // renderer to facilitate tree-shaking.\r\n        const sharedContext = instance.ctx;\r\n        // if the internal renderer is not registered, it indicates that this is server-side rendering,\r\n        // for KeepAlive, we just need to render its children\r\n        if (!sharedContext.renderer) {\r\n            return slots.default;\r\n        }\r\n        const cache = new Map();\r\n        const keys = new Set();\r\n        let current = null;\r\n        const parentSuspense = instance.suspense;\r\n        const { renderer: { p: patch, m: move, um: _unmount, o: { createElement } } } = sharedContext;\r\n        const storageContainer = createElement('div');\r\n        sharedContext.activate = (vnode, container, anchor, isSVG, optimized) => {\r\n            const instance = vnode.component;\r\n            move(vnode, container, anchor, 0 /* ENTER */, parentSuspense);\r\n            // in case props have changed\r\n            patch(instance.vnode, vnode, container, anchor, instance, parentSuspense, isSVG, vnode.slotScopeIds, optimized);\r\n            queuePostRenderEffect(() => {\r\n                instance.isDeactivated = false;\r\n                if (instance.a) {\r\n                    invokeArrayFns(instance.a);\r\n                }\r\n                const vnodeHook = vnode.props && vnode.props.onVnodeMounted;\r\n                if (vnodeHook) {\r\n                    invokeVNodeHook(vnodeHook, instance.parent, vnode);\r\n                }\r\n            }, parentSuspense);\r\n        };\r\n        sharedContext.deactivate = (vnode) => {\r\n            const instance = vnode.component;\r\n            move(vnode, storageContainer, null, 1 /* LEAVE */, parentSuspense);\r\n            queuePostRenderEffect(() => {\r\n                if (instance.da) {\r\n                    invokeArrayFns(instance.da);\r\n                }\r\n                const vnodeHook = vnode.props && vnode.props.onVnodeUnmounted;\r\n                if (vnodeHook) {\r\n                    invokeVNodeHook(vnodeHook, instance.parent, vnode);\r\n                }\r\n                instance.isDeactivated = true;\r\n            }, parentSuspense);\r\n        };\r\n        function unmount(vnode) {\r\n            // reset the shapeFlag so it can be properly unmounted\r\n            resetShapeFlag(vnode);\r\n            _unmount(vnode, instance, parentSuspense);\r\n        }\r\n        function pruneCache(filter) {\r\n            cache.forEach((vnode, key) => {\r\n                const name = getComponentName(vnode.type);\r\n                if (name && (!filter || !filter(name))) {\r\n                    pruneCacheEntry(key);\r\n                }\r\n            });\r\n        }\r\n        function pruneCacheEntry(key) {\r\n            const cached = cache.get(key);\r\n            if (!current || cached.type !== current.type) {\r\n                unmount(cached);\r\n            }\r\n            else if (current) {\r\n                // current active instance should no longer be kept-alive.\r\n                // we can't unmount it now but it might be later, so reset its flag now.\r\n                resetShapeFlag(current);\r\n            }\r\n            cache.delete(key);\r\n            keys.delete(key);\r\n        }\r\n        // prune cache on include/exclude prop change\r\n        watch(() => [props.include, props.exclude], ([include, exclude]) => {\r\n            include && pruneCache(name => matches(include, name));\r\n            exclude && pruneCache(name => !matches(exclude, name));\r\n        }, \r\n        // prune post-render after `current` has been updated\r\n        { flush: 'post', deep: true });\r\n        // cache sub tree after render\r\n        let pendingCacheKey = null;\r\n        const cacheSubtree = () => {\r\n            // fix #1621, the pendingCacheKey could be 0\r\n            if (pendingCacheKey != null) {\r\n                cache.set(pendingCacheKey, getInnerChild(instance.subTree));\r\n            }\r\n        };\r\n        onMounted(cacheSubtree);\r\n        onUpdated(cacheSubtree);\r\n        onBeforeUnmount(() => {\r\n            cache.forEach(cached => {\r\n                const { subTree, suspense } = instance;\r\n                const vnode = getInnerChild(subTree);\r\n                if (cached.type === vnode.type) {\r\n                    // current instance will be unmounted as part of keep-alive's unmount\r\n                    resetShapeFlag(vnode);\r\n                    // but invoke its deactivated hook here\r\n                    const da = vnode.component.da;\r\n                    da && queuePostRenderEffect(da, suspense);\r\n                    return;\r\n                }\r\n                unmount(cached);\r\n            });\r\n        });\r\n        return () => {\r\n            pendingCacheKey = null;\r\n            if (!slots.default) {\r\n                return null;\r\n            }\r\n            const children = slots.default();\r\n            const rawVNode = children[0];\r\n            if (children.length > 1) {\r\n                if ((process.env.NODE_ENV !== 'production')) {\r\n                    warn(`KeepAlive should contain exactly one component child.`);\r\n                }\r\n                current = null;\r\n                return children;\r\n            }\r\n            else if (!isVNode(rawVNode) ||\r\n                (!(rawVNode.shapeFlag & 4 /* STATEFUL_COMPONENT */) &&\r\n                    !(rawVNode.shapeFlag & 128 /* SUSPENSE */))) {\r\n                current = null;\r\n                return rawVNode;\r\n            }\r\n            let vnode = getInnerChild(rawVNode);\r\n            const comp = vnode.type;\r\n            const name = getComponentName(comp);\r\n            const { include, exclude, max } = props;\r\n            if ((include && (!name || !matches(include, name))) ||\r\n                (exclude && name && matches(exclude, name))) {\r\n                current = vnode;\r\n                return rawVNode;\r\n            }\r\n            const key = vnode.key == null ? comp : vnode.key;\r\n            const cachedVNode = cache.get(key);\r\n            // clone vnode if it's reused because we are going to mutate it\r\n            if (vnode.el) {\r\n                vnode = cloneVNode(vnode);\r\n                if (rawVNode.shapeFlag & 128 /* SUSPENSE */) {\r\n                    rawVNode.ssContent = vnode;\r\n                }\r\n            }\r\n            // #1513 it's possible for the returned vnode to be cloned due to attr\r\n            // fallthrough or scopeId, so the vnode here may not be the final vnode\r\n            // that is mounted. Instead of caching it directly, we store the pending\r\n            // key and cache `instance.subTree` (the normalized vnode) in\r\n            // beforeMount/beforeUpdate hooks.\r\n            pendingCacheKey = key;\r\n            if (cachedVNode) {\r\n                // copy over mounted state\r\n                vnode.el = cachedVNode.el;\r\n                vnode.component = cachedVNode.component;\r\n                if (vnode.transition) {\r\n                    // recursively update transition hooks on subTree\r\n                    setTransitionHooks(vnode, vnode.transition);\r\n                }\r\n                // avoid vnode being mounted as fresh\r\n                vnode.shapeFlag |= 512 /* COMPONENT_KEPT_ALIVE */;\r\n                // make this key the freshest\r\n                keys.delete(key);\r\n                keys.add(key);\r\n            }\r\n            else {\r\n                keys.add(key);\r\n                // prune oldest entry\r\n                if (max && keys.size > parseInt(max, 10)) {\r\n                    pruneCacheEntry(keys.values().next().value);\r\n                }\r\n            }\r\n            // avoid vnode being unmounted\r\n            vnode.shapeFlag |= 256 /* COMPONENT_SHOULD_KEEP_ALIVE */;\r\n            current = vnode;\r\n            return rawVNode;\r\n        };\r\n    }\r\n};\r\n// export the public type for h/tsx inference\r\n// also to avoid inline import() in generated d.ts files\r\nconst KeepAlive = KeepAliveImpl;\r\nfunction matches(pattern, name) {\r\n    if (isArray(pattern)) {\r\n        return pattern.some((p) => matches(p, name));\r\n    }\r\n    else if (isString(pattern)) {\r\n        return pattern.split(',').indexOf(name) > -1;\r\n    }\r\n    else if (pattern.test) {\r\n        return pattern.test(name);\r\n    }\r\n    /* istanbul ignore next */\r\n    return false;\r\n}\r\nfunction onActivated(hook, target) {\r\n    registerKeepAliveHook(hook, \"a\" /* ACTIVATED */, target);\r\n}\r\nfunction onDeactivated(hook, target) {\r\n    registerKeepAliveHook(hook, \"da\" /* DEACTIVATED */, target);\r\n}\r\nfunction registerKeepAliveHook(hook, type, target = currentInstance) {\r\n    // cache the deactivate branch check wrapper for injected hooks so the same\r\n    // hook can be properly deduped by the scheduler. \"__wdc\" stands for \"with\r\n    // deactivation check\".\r\n    const wrappedHook = hook.__wdc ||\r\n        (hook.__wdc = () => {\r\n            // only fire the hook if the target instance is NOT in a deactivated branch.\r\n            let current = target;\r\n            while (current) {\r\n                if (current.isDeactivated) {\r\n                    return;\r\n                }\r\n                current = current.parent;\r\n            }\r\n            hook();\r\n        });\r\n    injectHook(type, wrappedHook, target);\r\n    // In addition to registering it on the target instance, we walk up the parent\r\n    // chain and register it on all ancestor instances that are keep-alive roots.\r\n    // This avoids the need to walk the entire component tree when invoking these\r\n    // hooks, and more importantly, avoids the need to track child components in\r\n    // arrays.\r\n    if (target) {\r\n        let current = target.parent;\r\n        while (current && current.parent) {\r\n            if (isKeepAlive(current.parent.vnode)) {\r\n                injectToKeepAliveRoot(wrappedHook, type, target, current);\r\n            }\r\n            current = current.parent;\r\n        }\r\n    }\r\n}\r\nfunction injectToKeepAliveRoot(hook, type, target, keepAliveRoot) {\r\n    // injectHook wraps the original for error handling, so make sure to remove\r\n    // the wrapped version.\r\n    const injected = injectHook(type, hook, keepAliveRoot, true /* prepend */);\r\n    onUnmounted(() => {\r\n        remove(keepAliveRoot[type], injected);\r\n    }, target);\r\n}\r\nfunction resetShapeFlag(vnode) {\r\n    let shapeFlag = vnode.shapeFlag;\r\n    if (shapeFlag & 256 /* COMPONENT_SHOULD_KEEP_ALIVE */) {\r\n        shapeFlag -= 256 /* COMPONENT_SHOULD_KEEP_ALIVE */;\r\n    }\r\n    if (shapeFlag & 512 /* COMPONENT_KEPT_ALIVE */) {\r\n        shapeFlag -= 512 /* COMPONENT_KEPT_ALIVE */;\r\n    }\r\n    vnode.shapeFlag = shapeFlag;\r\n}\r\nfunction getInnerChild(vnode) {\r\n    return vnode.shapeFlag & 128 /* SUSPENSE */ ? vnode.ssContent : vnode;\r\n}\n\nconst isInternalKey = (key) => key[0] === '_' || key === '$stable';\r\nconst normalizeSlotValue = (value) => isArray(value)\r\n    ? value.map(normalizeVNode)\r\n    : [normalizeVNode(value)];\r\nconst normalizeSlot = (key, rawSlot, ctx) => withCtx((props) => {\r\n    if ((process.env.NODE_ENV !== 'production') && currentInstance) {\r\n        warn(`Slot \"${key}\" invoked outside of the render function: ` +\r\n            `this will not track dependencies used in the slot. ` +\r\n            `Invoke the slot function inside the render function instead.`);\r\n    }\r\n    return normalizeSlotValue(rawSlot(props));\r\n}, ctx);\r\nconst normalizeObjectSlots = (rawSlots, slots) => {\r\n    const ctx = rawSlots._ctx;\r\n    for (const key in rawSlots) {\r\n        if (isInternalKey(key))\r\n            continue;\r\n        const value = rawSlots[key];\r\n        if (isFunction(value)) {\r\n            slots[key] = normalizeSlot(key, value, ctx);\r\n        }\r\n        else if (value != null) {\r\n            if ((process.env.NODE_ENV !== 'production')) {\r\n                warn(`Non-function value encountered for slot \"${key}\". ` +\r\n                    `Prefer function slots for better performance.`);\r\n            }\r\n            const normalized = normalizeSlotValue(value);\r\n            slots[key] = () => normalized;\r\n        }\r\n    }\r\n};\r\nconst normalizeVNodeSlots = (instance, children) => {\r\n    if ((process.env.NODE_ENV !== 'production') && !isKeepAlive(instance.vnode)) {\r\n        warn(`Non-function value encountered for default slot. ` +\r\n            `Prefer function slots for better performance.`);\r\n    }\r\n    const normalized = normalizeSlotValue(children);\r\n    instance.slots.default = () => normalized;\r\n};\r\nconst initSlots = (instance, children) => {\r\n    if (instance.vnode.shapeFlag & 32 /* SLOTS_CHILDREN */) {\r\n        const type = children._;\r\n        if (type) {\r\n            instance.slots = children;\r\n            // make compiler marker non-enumerable\r\n            def(children, '_', type);\r\n        }\r\n        else {\r\n            normalizeObjectSlots(children, (instance.slots = {}));\r\n        }\r\n    }\r\n    else {\r\n        instance.slots = {};\r\n        if (children) {\r\n            normalizeVNodeSlots(instance, children);\r\n        }\r\n    }\r\n    def(instance.slots, InternalObjectKey, 1);\r\n};\r\nconst updateSlots = (instance, children) => {\r\n    const { vnode, slots } = instance;\r\n    let needDeletionCheck = true;\r\n    let deletionComparisonTarget = EMPTY_OBJ;\r\n    if (vnode.shapeFlag & 32 /* SLOTS_CHILDREN */) {\r\n        const type = children._;\r\n        if (type) {\r\n            // compiled slots.\r\n            if ((process.env.NODE_ENV !== 'production') && isHmrUpdating) {\r\n                // Parent was HMR updated so slot content may have changed.\r\n                // force update slots and mark instance for hmr as well\r\n                extend(slots, children);\r\n            }\r\n            else if (type === 1 /* STABLE */) {\r\n                // compiled AND stable.\r\n                // no need to update, and skip stale slots removal.\r\n                needDeletionCheck = false;\r\n            }\r\n            else {\r\n                // compiled but dynamic (v-if/v-for on slots) - update slots, but skip\r\n                // normalization.\r\n                extend(slots, children);\r\n            }\r\n        }\r\n        else {\r\n            needDeletionCheck = !children.$stable;\r\n            normalizeObjectSlots(children, slots);\r\n        }\r\n        deletionComparisonTarget = children;\r\n    }\r\n    else if (children) {\r\n        // non slot object children (direct value) passed to a component\r\n        normalizeVNodeSlots(instance, children);\r\n        deletionComparisonTarget = { default: 1 };\r\n    }\r\n    // delete stale slots\r\n    if (needDeletionCheck) {\r\n        for (const key in slots) {\r\n            if (!isInternalKey(key) && !(key in deletionComparisonTarget)) {\r\n                delete slots[key];\r\n            }\r\n        }\r\n    }\r\n};\n\n/**\r\nRuntime helper for applying directives to a vnode. Example usage:\r\n\nconst comp = resolveComponent('comp')\r\nconst foo = resolveDirective('foo')\r\nconst bar = resolveDirective('bar')\r\n\nreturn withDirectives(h(comp), [\r\n  [foo, this.x],\r\n  [bar, this.y]\r\n])\r\n*/\r\nconst isBuiltInDirective = /*#__PURE__*/ makeMap('bind,cloak,else-if,else,for,html,if,model,on,once,pre,show,slot,text');\r\nfunction validateDirectiveName(name) {\r\n    if (isBuiltInDirective(name)) {\r\n        warn('Do not use built-in directive ids as custom directive id: ' + name);\r\n    }\r\n}\r\n/**\r\n * Adds directives to a VNode.\r\n */\r\nfunction withDirectives(vnode, directives) {\r\n    const internalInstance = currentRenderingInstance;\r\n    if (internalInstance === null) {\r\n        (process.env.NODE_ENV !== 'production') && warn(`withDirectives can only be used inside render functions.`);\r\n        return vnode;\r\n    }\r\n    const instance = internalInstance.proxy;\r\n    const bindings = vnode.dirs || (vnode.dirs = []);\r\n    for (let i = 0; i < directives.length; i++) {\r\n        let [dir, value, arg, modifiers = EMPTY_OBJ] = directives[i];\r\n        if (isFunction(dir)) {\r\n            dir = {\r\n                mounted: dir,\r\n                updated: dir\r\n            };\r\n        }\r\n        bindings.push({\r\n            dir,\r\n            instance,\r\n            value,\r\n            oldValue: void 0,\r\n            arg,\r\n            modifiers\r\n        });\r\n    }\r\n    return vnode;\r\n}\r\nfunction invokeDirectiveHook(vnode, prevVNode, instance, name) {\r\n    const bindings = vnode.dirs;\r\n    const oldBindings = prevVNode && prevVNode.dirs;\r\n    for (let i = 0; i < bindings.length; i++) {\r\n        const binding = bindings[i];\r\n        if (oldBindings) {\r\n            binding.oldValue = oldBindings[i].value;\r\n        }\r\n        const hook = binding.dir[name];\r\n        if (hook) {\r\n            callWithAsyncErrorHandling(hook, instance, 8 /* DIRECTIVE_HOOK */, [\r\n                vnode.el,\r\n                binding,\r\n                vnode,\r\n                prevVNode\r\n            ]);\r\n        }\r\n    }\r\n}\n\nfunction createAppContext() {\r\n    return {\r\n        app: null,\r\n        config: {\r\n            isNativeTag: NO,\r\n            performance: false,\r\n            globalProperties: {},\r\n            optionMergeStrategies: {},\r\n            isCustomElement: NO,\r\n            errorHandler: undefined,\r\n            warnHandler: undefined\r\n        },\r\n        mixins: [],\r\n        components: {},\r\n        directives: {},\r\n        provides: Object.create(null)\r\n    };\r\n}\r\nlet uid = 0;\r\nfunction createAppAPI(render, hydrate) {\r\n    return function createApp(rootComponent, rootProps = null) {\r\n        if (rootProps != null && !isObject(rootProps)) {\r\n            (process.env.NODE_ENV !== 'production') && warn(`root props passed to app.mount() must be an object.`);\r\n            rootProps = null;\r\n        }\r\n        const context = createAppContext();\r\n        const installedPlugins = new Set();\r\n        let isMounted = false;\r\n        const app = (context.app = {\r\n            _uid: uid++,\r\n            _component: rootComponent,\r\n            _props: rootProps,\r\n            _container: null,\r\n            _context: context,\r\n            version,\r\n            get config() {\r\n                return context.config;\r\n            },\r\n            set config(v) {\r\n                if ((process.env.NODE_ENV !== 'production')) {\r\n                    warn(`app.config cannot be replaced. Modify individual options instead.`);\r\n                }\r\n            },\r\n            use(plugin, ...options) {\r\n                if (installedPlugins.has(plugin)) {\r\n                    (process.env.NODE_ENV !== 'production') && warn(`Plugin has already been applied to target app.`);\r\n                }\r\n                else if (plugin && isFunction(plugin.install)) {\r\n                    installedPlugins.add(plugin);\r\n                    plugin.install(app, ...options);\r\n                }\r\n                else if (isFunction(plugin)) {\r\n                    installedPlugins.add(plugin);\r\n                    plugin(app, ...options);\r\n                }\r\n                else if ((process.env.NODE_ENV !== 'production')) {\r\n                    warn(`A plugin must either be a function or an object with an \"install\" ` +\r\n                        `function.`);\r\n                }\r\n                return app;\r\n            },\r\n            mixin(mixin) {\r\n                if (__VUE_OPTIONS_API__) {\r\n                    if (!context.mixins.includes(mixin)) {\r\n                        context.mixins.push(mixin);\r\n                        // global mixin with props/emits de-optimizes props/emits\r\n                        // normalization caching.\r\n                        if (mixin.props || mixin.emits) {\r\n                            context.deopt = true;\r\n                        }\r\n                    }\r\n                    else if ((process.env.NODE_ENV !== 'production')) {\r\n                        warn('Mixin has already been applied to target app' +\r\n                            (mixin.name ? `: ${mixin.name}` : ''));\r\n                    }\r\n                }\r\n                else if ((process.env.NODE_ENV !== 'production')) {\r\n                    warn('Mixins are only available in builds supporting Options API');\r\n                }\r\n                return app;\r\n            },\r\n            component(name, component) {\r\n                if ((process.env.NODE_ENV !== 'production')) {\r\n                    validateComponentName(name, context.config);\r\n                }\r\n                if (!component) {\r\n                    return context.components[name];\r\n                }\r\n                if ((process.env.NODE_ENV !== 'production') && context.components[name]) {\r\n                    warn(`Component \"${name}\" has already been registered in target app.`);\r\n                }\r\n                context.components[name] = component;\r\n                return app;\r\n            },\r\n            directive(name, directive) {\r\n                if ((process.env.NODE_ENV !== 'production')) {\r\n                    validateDirectiveName(name);\r\n                }\r\n                if (!directive) {\r\n                    return context.directives[name];\r\n                }\r\n                if ((process.env.NODE_ENV !== 'production') && context.directives[name]) {\r\n                    warn(`Directive \"${name}\" has already been registered in target app.`);\r\n                }\r\n                context.directives[name] = directive;\r\n                return app;\r\n            },\r\n            mount(rootContainer, isHydrate, isSVG) {\r\n                if (!isMounted) {\r\n                    const vnode = createVNode(rootComponent, rootProps);\r\n                    // store app context on the root VNode.\r\n                    // this will be set on the root instance on initial mount.\r\n                    vnode.appContext = context;\r\n                    // HMR root reload\r\n                    if ((process.env.NODE_ENV !== 'production')) {\r\n                        context.reload = () => {\r\n                            render(cloneVNode(vnode), rootContainer, isSVG);\r\n                        };\r\n                    }\r\n                    if (isHydrate && hydrate) {\r\n                        hydrate(vnode, rootContainer);\r\n                    }\r\n                    else {\r\n                        render(vnode, rootContainer, isSVG);\r\n                    }\r\n                    isMounted = true;\r\n                    app._container = rootContainer;\r\n                    rootContainer.__vue_app__ = app;\r\n                    if ((process.env.NODE_ENV !== 'production') || __VUE_PROD_DEVTOOLS__) {\r\n                        devtoolsInitApp(app, version);\r\n                    }\r\n                    return vnode.component.proxy;\r\n                }\r\n                else if ((process.env.NODE_ENV !== 'production')) {\r\n                    warn(`App has already been mounted.\\n` +\r\n                        `If you want to remount the same app, move your app creation logic ` +\r\n                        `into a factory function and create fresh app instances for each ` +\r\n                        `mount - e.g. \\`const createMyApp = () => createApp(App)\\``);\r\n                }\r\n            },\r\n            unmount() {\r\n                if (isMounted) {\r\n                    render(null, app._container);\r\n                    if ((process.env.NODE_ENV !== 'production') || __VUE_PROD_DEVTOOLS__) {\r\n                        devtoolsUnmountApp(app);\r\n                    }\r\n                    delete app._container.__vue_app__;\r\n                }\r\n                else if ((process.env.NODE_ENV !== 'production')) {\r\n                    warn(`Cannot unmount an app that is not mounted.`);\r\n                }\r\n            },\r\n            provide(key, value) {\r\n                if ((process.env.NODE_ENV !== 'production') && key in context.provides) {\r\n                    warn(`App already provides property with key \"${String(key)}\". ` +\r\n                        `It will be overwritten with the new value.`);\r\n                }\r\n                // TypeScript doesn't allow symbols as index type\r\n                // https://github.com/Microsoft/TypeScript/issues/24587\r\n                context.provides[key] = value;\r\n                return app;\r\n            }\r\n        });\r\n        return app;\r\n    };\r\n}\n\nlet hasMismatch = false;\r\nconst isSVGContainer = (container) => /svg/.test(container.namespaceURI) && container.tagName !== 'foreignObject';\r\nconst isComment = (node) => node.nodeType === 8 /* COMMENT */;\r\n// Note: hydration is DOM-specific\r\n// But we have to place it in core due to tight coupling with core - splitting\r\n// it out creates a ton of unnecessary complexity.\r\n// Hydration also depends on some renderer internal logic which needs to be\r\n// passed in via arguments.\r\nfunction createHydrationFunctions(rendererInternals) {\r\n    const { mt: mountComponent, p: patch, o: { patchProp, nextSibling, parentNode, remove, insert, createComment } } = rendererInternals;\r\n    const hydrate = (vnode, container) => {\r\n        if ((process.env.NODE_ENV !== 'production') && !container.hasChildNodes()) {\r\n            warn(`Attempting to hydrate existing markup but container is empty. ` +\r\n                `Performing full mount instead.`);\r\n            patch(null, vnode, container);\r\n            return;\r\n        }\r\n        hasMismatch = false;\r\n        hydrateNode(container.firstChild, vnode, null, null, null);\r\n        flushPostFlushCbs();\r\n        if (hasMismatch && !false) {\r\n            // this error should show up in production\r\n            console.error(`Hydration completed but contains mismatches.`);\r\n        }\r\n    };\r\n    const hydrateNode = (node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized = false) => {\r\n        const isFragmentStart = isComment(node) && node.data === '[';\r\n        const onMismatch = () => handleMismatch(node, vnode, parentComponent, parentSuspense, slotScopeIds, isFragmentStart);\r\n        const { type, ref, shapeFlag } = vnode;\r\n        const domType = node.nodeType;\r\n        vnode.el = node;\r\n        let nextNode = null;\r\n        switch (type) {\r\n            case Text:\r\n                if (domType !== 3 /* TEXT */) {\r\n                    nextNode = onMismatch();\r\n                }\r\n                else {\r\n                    if (node.data !== vnode.children) {\r\n                        hasMismatch = true;\r\n                        (process.env.NODE_ENV !== 'production') &&\r\n                            warn(`Hydration text mismatch:` +\r\n                                `\\n- Client: ${JSON.stringify(node.data)}` +\r\n                                `\\n- Server: ${JSON.stringify(vnode.children)}`);\r\n                        node.data = vnode.children;\r\n                    }\r\n                    nextNode = nextSibling(node);\r\n                }\r\n                break;\r\n            case Comment:\r\n                if (domType !== 8 /* COMMENT */ || isFragmentStart) {\r\n                    nextNode = onMismatch();\r\n                }\r\n                else {\r\n                    nextNode = nextSibling(node);\r\n                }\r\n                break;\r\n            case Static:\r\n                if (domType !== 1 /* ELEMENT */) {\r\n                    nextNode = onMismatch();\r\n                }\r\n                else {\r\n                    // determine anchor, adopt content\r\n                    nextNode = node;\r\n                    // if the static vnode has its content stripped during build,\r\n                    // adopt it from the server-rendered HTML.\r\n                    const needToAdoptContent = !vnode.children.length;\r\n                    for (let i = 0; i < vnode.staticCount; i++) {\r\n                        if (needToAdoptContent)\r\n                            vnode.children += nextNode.outerHTML;\r\n                        if (i === vnode.staticCount - 1) {\r\n                            vnode.anchor = nextNode;\r\n                        }\r\n                        nextNode = nextSibling(nextNode);\r\n                    }\r\n                    return nextNode;\r\n                }\r\n                break;\r\n            case Fragment:\r\n                if (!isFragmentStart) {\r\n                    nextNode = onMismatch();\r\n                }\r\n                else {\r\n                    nextNode = hydrateFragment(node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized);\r\n                }\r\n                break;\r\n            default:\r\n                if (shapeFlag & 1 /* ELEMENT */) {\r\n                    if (domType !== 1 /* ELEMENT */ ||\r\n                        vnode.type.toLowerCase() !==\r\n                            node.tagName.toLowerCase()) {\r\n                        nextNode = onMismatch();\r\n                    }\r\n                    else {\r\n                        nextNode = hydrateElement(node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized);\r\n                    }\r\n                }\r\n                else if (shapeFlag & 6 /* COMPONENT */) {\r\n                    // when setting up the render effect, if the initial vnode already\r\n                    // has .el set, the component will perform hydration instead of mount\r\n                    // on its sub-tree.\r\n                    vnode.slotScopeIds = slotScopeIds;\r\n                    const container = parentNode(node);\r\n                    const hydrateComponent = () => {\r\n                        mountComponent(vnode, container, null, parentComponent, parentSuspense, isSVGContainer(container), optimized);\r\n                    };\r\n                    // async component\r\n                    const loadAsync = vnode.type.__asyncLoader;\r\n                    if (loadAsync) {\r\n                        loadAsync().then(hydrateComponent);\r\n                    }\r\n                    else {\r\n                        hydrateComponent();\r\n                    }\r\n                    // component may be async, so in the case of fragments we cannot rely\r\n                    // on component's rendered output to determine the end of the fragment\r\n                    // instead, we do a lookahead to find the end anchor node.\r\n                    nextNode = isFragmentStart\r\n                        ? locateClosingAsyncAnchor(node)\r\n                        : nextSibling(node);\r\n                }\r\n                else if (shapeFlag & 64 /* TELEPORT */) {\r\n                    if (domType !== 8 /* COMMENT */) {\r\n                        nextNode = onMismatch();\r\n                    }\r\n                    else {\r\n                        nextNode = vnode.type.hydrate(node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized, rendererInternals, hydrateChildren);\r\n                    }\r\n                }\r\n                else if (shapeFlag & 128 /* SUSPENSE */) {\r\n                    nextNode = vnode.type.hydrate(node, vnode, parentComponent, parentSuspense, isSVGContainer(parentNode(node)), slotScopeIds, optimized, rendererInternals, hydrateNode);\r\n                }\r\n                else if ((process.env.NODE_ENV !== 'production')) {\r\n                    warn('Invalid HostVNode type:', type, `(${typeof type})`);\r\n                }\r\n        }\r\n        if (ref != null) {\r\n            setRef(ref, null, parentSuspense, vnode);\r\n        }\r\n        return nextNode;\r\n    };\r\n    const hydrateElement = (el, vnode, parentComponent, parentSuspense, slotScopeIds, optimized) => {\r\n        optimized = optimized || !!vnode.dynamicChildren;\r\n        const { props, patchFlag, shapeFlag, dirs } = vnode;\r\n        // skip props & children if this is hoisted static nodes\r\n        if (patchFlag !== -1 /* HOISTED */) {\r\n            if (dirs) {\r\n                invokeDirectiveHook(vnode, null, parentComponent, 'created');\r\n            }\r\n            // props\r\n            if (props) {\r\n                if (!optimized ||\r\n                    (patchFlag & 16 /* FULL_PROPS */ ||\r\n                        patchFlag & 32 /* HYDRATE_EVENTS */)) {\r\n                    for (const key in props) {\r\n                        if (!isReservedProp(key) && isOn(key)) {\r\n                            patchProp(el, key, null, props[key]);\r\n                        }\r\n                    }\r\n                }\r\n                else if (props.onClick) {\r\n                    // Fast path for click listeners (which is most often) to avoid\r\n                    // iterating through props.\r\n                    patchProp(el, 'onClick', null, props.onClick);\r\n                }\r\n            }\r\n            // vnode / directive hooks\r\n            let vnodeHooks;\r\n            if ((vnodeHooks = props && props.onVnodeBeforeMount)) {\r\n                invokeVNodeHook(vnodeHooks, parentComponent, vnode);\r\n            }\r\n            if (dirs) {\r\n                invokeDirectiveHook(vnode, null, parentComponent, 'beforeMount');\r\n            }\r\n            if ((vnodeHooks = props && props.onVnodeMounted) || dirs) {\r\n                queueEffectWithSuspense(() => {\r\n                    vnodeHooks && invokeVNodeHook(vnodeHooks, parentComponent, vnode);\r\n                    dirs && invokeDirectiveHook(vnode, null, parentComponent, 'mounted');\r\n                }, parentSuspense);\r\n            }\r\n            // children\r\n            if (shapeFlag & 16 /* ARRAY_CHILDREN */ &&\r\n                // skip if element has innerHTML / textContent\r\n                !(props && (props.innerHTML || props.textContent))) {\r\n                let next = hydrateChildren(el.firstChild, vnode, el, parentComponent, parentSuspense, slotScopeIds, optimized);\r\n                let hasWarned = false;\r\n                while (next) {\r\n                    hasMismatch = true;\r\n                    if ((process.env.NODE_ENV !== 'production') && !hasWarned) {\r\n                        warn(`Hydration children mismatch in <${vnode.type}>: ` +\r\n                            `server rendered element contains more child nodes than client vdom.`);\r\n                        hasWarned = true;\r\n                    }\r\n                    // The SSRed DOM contains more nodes than it should. Remove them.\r\n                    const cur = next;\r\n                    next = next.nextSibling;\r\n                    remove(cur);\r\n                }\r\n            }\r\n            else if (shapeFlag & 8 /* TEXT_CHILDREN */) {\r\n                if (el.textContent !== vnode.children) {\r\n                    hasMismatch = true;\r\n                    (process.env.NODE_ENV !== 'production') &&\r\n                        warn(`Hydration text content mismatch in <${vnode.type}>:\\n` +\r\n                            `- Client: ${el.textContent}\\n` +\r\n                            `- Server: ${vnode.children}`);\r\n                    el.textContent = vnode.children;\r\n                }\r\n            }\r\n        }\r\n        return el.nextSibling;\r\n    };\r\n    const hydrateChildren = (node, parentVNode, container, parentComponent, parentSuspense, slotScopeIds, optimized) => {\r\n        optimized = optimized || !!parentVNode.dynamicChildren;\r\n        const children = parentVNode.children;\r\n        const l = children.length;\r\n        let hasWarned = false;\r\n        for (let i = 0; i < l; i++) {\r\n            const vnode = optimized\r\n                ? children[i]\r\n                : (children[i] = normalizeVNode(children[i]));\r\n            if (node) {\r\n                node = hydrateNode(node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized);\r\n            }\r\n            else if (vnode.type === Text && !vnode.children) {\r\n                continue;\r\n            }\r\n            else {\r\n                hasMismatch = true;\r\n                if ((process.env.NODE_ENV !== 'production') && !hasWarned) {\r\n                    warn(`Hydration children mismatch in <${container.tagName.toLowerCase()}>: ` +\r\n                        `server rendered element contains fewer child nodes than client vdom.`);\r\n                    hasWarned = true;\r\n                }\r\n                // the SSRed DOM didn't contain enough nodes. Mount the missing ones.\r\n                patch(null, vnode, container, null, parentComponent, parentSuspense, isSVGContainer(container), slotScopeIds);\r\n            }\r\n        }\r\n        return node;\r\n    };\r\n    const hydrateFragment = (node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized) => {\r\n        const { slotScopeIds: fragmentSlotScopeIds } = vnode;\r\n        if (fragmentSlotScopeIds) {\r\n            slotScopeIds = slotScopeIds\r\n                ? slotScopeIds.concat(fragmentSlotScopeIds)\r\n                : fragmentSlotScopeIds;\r\n        }\r\n        const container = parentNode(node);\r\n        const next = hydrateChildren(nextSibling(node), vnode, container, parentComponent, parentSuspense, slotScopeIds, optimized);\r\n        if (next && isComment(next) && next.data === ']') {\r\n            return nextSibling((vnode.anchor = next));\r\n        }\r\n        else {\r\n            // fragment didn't hydrate successfully, since we didn't get a end anchor\r\n            // back. This should have led to node/children mismatch warnings.\r\n            hasMismatch = true;\r\n            // since the anchor is missing, we need to create one and insert it\r\n            insert((vnode.anchor = createComment(`]`)), container, next);\r\n            return next;\r\n        }\r\n    };\r\n    const handleMismatch = (node, vnode, parentComponent, parentSuspense, slotScopeIds, isFragment) => {\r\n        hasMismatch = true;\r\n        (process.env.NODE_ENV !== 'production') &&\r\n            warn(`Hydration node mismatch:\\n- Client vnode:`, vnode.type, `\\n- Server rendered DOM:`, node, node.nodeType === 3 /* TEXT */\r\n                ? `(text)`\r\n                : isComment(node) && node.data === '['\r\n                    ? `(start of fragment)`\r\n                    : ``);\r\n        vnode.el = null;\r\n        if (isFragment) {\r\n            // remove excessive fragment nodes\r\n            const end = locateClosingAsyncAnchor(node);\r\n            while (true) {\r\n                const next = nextSibling(node);\r\n                if (next && next !== end) {\r\n                    remove(next);\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        const next = nextSibling(node);\r\n        const container = parentNode(node);\r\n        remove(node);\r\n        patch(null, vnode, container, next, parentComponent, parentSuspense, isSVGContainer(container), slotScopeIds);\r\n        return next;\r\n    };\r\n    const locateClosingAsyncAnchor = (node) => {\r\n        let match = 0;\r\n        while (node) {\r\n            node = nextSibling(node);\r\n            if (node && isComment(node)) {\r\n                if (node.data === '[')\r\n                    match++;\r\n                if (node.data === ']') {\r\n                    if (match === 0) {\r\n                        return nextSibling(node);\r\n                    }\r\n                    else {\r\n                        match--;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return node;\r\n    };\r\n    return [hydrate, hydrateNode];\r\n}\n\nlet supported;\r\nlet perf;\r\nfunction startMeasure(instance, type) {\r\n    if (instance.appContext.config.performance && isSupported()) {\r\n        perf.mark(`vue-${type}-${instance.uid}`);\r\n    }\r\n}\r\nfunction endMeasure(instance, type) {\r\n    if (instance.appContext.config.performance && isSupported()) {\r\n        const startTag = `vue-${type}-${instance.uid}`;\r\n        const endTag = startTag + `:end`;\r\n        perf.mark(endTag);\r\n        perf.measure(`<${formatComponentName(instance, instance.type)}> ${type}`, startTag, endTag);\r\n        perf.clearMarks(startTag);\r\n        perf.clearMarks(endTag);\r\n    }\r\n}\r\nfunction isSupported() {\r\n    if (supported !== undefined) {\r\n        return supported;\r\n    }\r\n    /* eslint-disable no-restricted-globals */\r\n    if (typeof window !== 'undefined' && window.performance) {\r\n        supported = true;\r\n        perf = window.performance;\r\n    }\r\n    else {\r\n        supported = false;\r\n    }\r\n    /* eslint-enable no-restricted-globals */\r\n    return supported;\r\n}\n\n/**\r\n * This is only called in esm-bundler builds.\r\n * It is called when a renderer is created, in `baseCreateRenderer` so that\r\n * importing runtime-core is side-effects free.\r\n *\r\n * istanbul-ignore-next\r\n */\r\nfunction initFeatureFlags() {\r\n    let needWarn = false;\r\n    if (typeof __VUE_OPTIONS_API__ !== 'boolean') {\r\n        needWarn = true;\r\n        getGlobalThis().__VUE_OPTIONS_API__ = true;\r\n    }\r\n    if (typeof __VUE_PROD_DEVTOOLS__ !== 'boolean') {\r\n        needWarn = true;\r\n        getGlobalThis().__VUE_PROD_DEVTOOLS__ = false;\r\n    }\r\n    if ((process.env.NODE_ENV !== 'production') && needWarn) {\r\n        console.warn(`You are running the esm-bundler build of Vue. It is recommended to ` +\r\n            `configure your bundler to explicitly replace feature flag globals ` +\r\n            `with boolean literals to get proper tree-shaking in the final bundle. ` +\r\n            `See http://link.vuejs.org/feature-flags for more details.`);\r\n    }\r\n}\n\n// implementation, close to no-op\r\nfunction defineComponent(options) {\r\n    return isFunction(options) ? { setup: options, name: options.name } : options;\r\n}\n\nconst isAsyncWrapper = (i) => !!i.type.__asyncLoader;\r\nfunction defineAsyncComponent(source) {\r\n    if (isFunction(source)) {\r\n        source = { loader: source };\r\n    }\r\n    const { loader, loadingComponent, errorComponent, delay = 200, timeout, // undefined = never times out\r\n    suspensible = true, onError: userOnError } = source;\r\n    let pendingRequest = null;\r\n    let resolvedComp;\r\n    let retries = 0;\r\n    const retry = () => {\r\n        retries++;\r\n        pendingRequest = null;\r\n        return load();\r\n    };\r\n    const load = () => {\r\n        let thisRequest;\r\n        return (pendingRequest ||\r\n            (thisRequest = pendingRequest = loader()\r\n                .catch(err => {\r\n                err = err instanceof Error ? err : new Error(String(err));\r\n                if (userOnError) {\r\n                    return new Promise((resolve, reject) => {\r\n                        const userRetry = () => resolve(retry());\r\n                        const userFail = () => reject(err);\r\n                        userOnError(err, userRetry, userFail, retries + 1);\r\n                    });\r\n                }\r\n                else {\r\n                    throw err;\r\n                }\r\n            })\r\n                .then((comp) => {\r\n                if (thisRequest !== pendingRequest && pendingRequest) {\r\n                    return pendingRequest;\r\n                }\r\n                if ((process.env.NODE_ENV !== 'production') && !comp) {\r\n                    warn(`Async component loader resolved to undefined. ` +\r\n                        `If you are using retry(), make sure to return its return value.`);\r\n                }\r\n                // interop module default\r\n                if (comp &&\r\n                    (comp.__esModule || comp[Symbol.toStringTag] === 'Module')) {\r\n                    comp = comp.default;\r\n                }\r\n                if ((process.env.NODE_ENV !== 'production') && comp && !isObject(comp) && !isFunction(comp)) {\r\n                    throw new Error(`Invalid async component load result: ${comp}`);\r\n                }\r\n                resolvedComp = comp;\r\n                return comp;\r\n            })));\r\n    };\r\n    return defineComponent({\r\n        __asyncLoader: load,\r\n        name: 'AsyncComponentWrapper',\r\n        setup() {\r\n            const instance = currentInstance;\r\n            // already resolved\r\n            if (resolvedComp) {\r\n                return () => createInnerComp(resolvedComp, instance);\r\n            }\r\n            const onError = (err) => {\r\n                pendingRequest = null;\r\n                handleError(err, instance, 13 /* ASYNC_COMPONENT_LOADER */, !errorComponent /* do not throw in dev if user provided error component */);\r\n            };\r\n            // suspense-controlled or SSR.\r\n            if ((suspensible && instance.suspense) ||\r\n                (false )) {\r\n                return load()\r\n                    .then(comp => {\r\n                    return () => createInnerComp(comp, instance);\r\n                })\r\n                    .catch(err => {\r\n                    onError(err);\r\n                    return () => errorComponent\r\n                        ? createVNode(errorComponent, {\r\n                            error: err\r\n                        })\r\n                        : null;\r\n                });\r\n            }\r\n            const loaded = ref(false);\r\n            const error = ref();\r\n            const delayed = ref(!!delay);\r\n            if (delay) {\r\n                setTimeout(() => {\r\n                    delayed.value = false;\r\n                }, delay);\r\n            }\r\n            if (timeout != null) {\r\n                setTimeout(() => {\r\n                    if (!loaded.value && !error.value) {\r\n                        const err = new Error(`Async component timed out after ${timeout}ms.`);\r\n                        onError(err);\r\n                        error.value = err;\r\n                    }\r\n                }, timeout);\r\n            }\r\n            load()\r\n                .then(() => {\r\n                loaded.value = true;\r\n            })\r\n                .catch(err => {\r\n                onError(err);\r\n                error.value = err;\r\n            });\r\n            return () => {\r\n                if (loaded.value && resolvedComp) {\r\n                    return createInnerComp(resolvedComp, instance);\r\n                }\r\n                else if (error.value && errorComponent) {\r\n                    return createVNode(errorComponent, {\r\n                        error: error.value\r\n                    });\r\n                }\r\n                else if (loadingComponent && !delayed.value) {\r\n                    return createVNode(loadingComponent);\r\n                }\r\n            };\r\n        }\r\n    });\r\n}\r\nfunction createInnerComp(comp, { vnode: { ref, props, children } }) {\r\n    const vnode = createVNode(comp, props, children);\r\n    // ensure inner component inherits the async wrapper's ref owner\r\n    vnode.ref = ref;\r\n    return vnode;\r\n}\n\nconst prodEffectOptions = {\r\n    scheduler: queueJob,\r\n    // #1801, #2043 component render effects should allow recursive updates\r\n    allowRecurse: true\r\n};\r\nfunction createDevEffectOptions(instance) {\r\n    return {\r\n        scheduler: queueJob,\r\n        allowRecurse: true,\r\n        onTrack: instance.rtc ? e => invokeArrayFns(instance.rtc, e) : void 0,\r\n        onTrigger: instance.rtg ? e => invokeArrayFns(instance.rtg, e) : void 0\r\n    };\r\n}\r\nconst queuePostRenderEffect = queueEffectWithSuspense\r\n    ;\r\nconst setRef = (rawRef, oldRawRef, parentSuspense, vnode) => {\r\n    if (isArray(rawRef)) {\r\n        rawRef.forEach((r, i) => setRef(r, oldRawRef && (isArray(oldRawRef) ? oldRawRef[i] : oldRawRef), parentSuspense, vnode));\r\n        return;\r\n    }\r\n    let value;\r\n    if (!vnode) {\r\n        // means unmount\r\n        value = null;\r\n    }\r\n    else if (isAsyncWrapper(vnode)) {\r\n        // when mounting async components, nothing needs to be done,\r\n        // because the template ref is forwarded to inner component\r\n        return;\r\n    }\r\n    else if (vnode.shapeFlag & 4 /* STATEFUL_COMPONENT */) {\r\n        value = vnode.component.exposed || vnode.component.proxy;\r\n    }\r\n    else {\r\n        value = vnode.el;\r\n    }\r\n    const { i: owner, r: ref } = rawRef;\r\n    if ((process.env.NODE_ENV !== 'production') && !owner) {\r\n        warn(`Missing ref owner context. ref cannot be used on hoisted vnodes. ` +\r\n            `A vnode with ref must be created inside the render function.`);\r\n        return;\r\n    }\r\n    const oldRef = oldRawRef && oldRawRef.r;\r\n    const refs = owner.refs === EMPTY_OBJ ? (owner.refs = {}) : owner.refs;\r\n    const setupState = owner.setupState;\r\n    // unset old ref\r\n    if (oldRef != null && oldRef !== ref) {\r\n        if (isString(oldRef)) {\r\n            refs[oldRef] = null;\r\n            if (hasOwn(setupState, oldRef)) {\r\n                setupState[oldRef] = null;\r\n            }\r\n        }\r\n        else if (isRef(oldRef)) {\r\n            oldRef.value = null;\r\n        }\r\n    }\r\n    if (isString(ref)) {\r\n        const doSet = () => {\r\n            refs[ref] = value;\r\n            if (hasOwn(setupState, ref)) {\r\n                setupState[ref] = value;\r\n            }\r\n        };\r\n        // #1789: for non-null values, set them after render\r\n        // null values means this is unmount and it should not overwrite another\r\n        // ref with the same key\r\n        if (value) {\r\n            doSet.id = -1;\r\n            queuePostRenderEffect(doSet, parentSuspense);\r\n        }\r\n        else {\r\n            doSet();\r\n        }\r\n    }\r\n    else if (isRef(ref)) {\r\n        const doSet = () => {\r\n            ref.value = value;\r\n        };\r\n        if (value) {\r\n            doSet.id = -1;\r\n            queuePostRenderEffect(doSet, parentSuspense);\r\n        }\r\n        else {\r\n            doSet();\r\n        }\r\n    }\r\n    else if (isFunction(ref)) {\r\n        callWithErrorHandling(ref, owner, 12 /* FUNCTION_REF */, [value, refs]);\r\n    }\r\n    else if ((process.env.NODE_ENV !== 'production')) {\r\n        warn('Invalid template ref type:', value, `(${typeof value})`);\r\n    }\r\n};\r\n/**\r\n * The createRenderer function accepts two generic arguments:\r\n * HostNode and HostElement, corresponding to Node and Element types in the\r\n * host environment. For example, for runtime-dom, HostNode would be the DOM\r\n * `Node` interface and HostElement would be the DOM `Element` interface.\r\n *\r\n * Custom renderers can pass in the platform specific types like this:\r\n *\r\n * ``` js\r\n * const { render, createApp } = createRenderer<Node, Element>({\r\n *   patchProp,\r\n *   ...nodeOps\r\n * })\r\n * ```\r\n */\r\nfunction createRenderer(options) {\r\n    return baseCreateRenderer(options);\r\n}\r\n// Separate API for creating hydration-enabled renderer.\r\n// Hydration logic is only used when calling this function, making it\r\n// tree-shakable.\r\nfunction createHydrationRenderer(options) {\r\n    return baseCreateRenderer(options, createHydrationFunctions);\r\n}\r\n// implementation\r\nfunction baseCreateRenderer(options, createHydrationFns) {\r\n    // compile-time feature flags check\r\n    {\r\n        initFeatureFlags();\r\n    }\r\n    if ((process.env.NODE_ENV !== 'production') || __VUE_PROD_DEVTOOLS__) {\r\n        const target = getGlobalThis();\r\n        target.__VUE__ = true;\r\n        setDevtoolsHook(target.__VUE_DEVTOOLS_GLOBAL_HOOK__);\r\n    }\r\n    const { insert: hostInsert, remove: hostRemove, patchProp: hostPatchProp, forcePatchProp: hostForcePatchProp, createElement: hostCreateElement, createText: hostCreateText, createComment: hostCreateComment, setText: hostSetText, setElementText: hostSetElementText, parentNode: hostParentNode, nextSibling: hostNextSibling, setScopeId: hostSetScopeId = NOOP, cloneNode: hostCloneNode, insertStaticContent: hostInsertStaticContent } = options;\r\n    // Note: functions inside this closure should use `const xxx = () => {}`\r\n    // style in order to prevent being inlined by minifiers.\r\n    const patch = (n1, n2, container, anchor = null, parentComponent = null, parentSuspense = null, isSVG = false, slotScopeIds = null, optimized = false) => {\r\n        // patching & not same type, unmount old tree\r\n        if (n1 && !isSameVNodeType(n1, n2)) {\r\n            anchor = getNextHostNode(n1);\r\n            unmount(n1, parentComponent, parentSuspense, true);\r\n            n1 = null;\r\n        }\r\n        if (n2.patchFlag === -2 /* BAIL */) {\r\n            optimized = false;\r\n            n2.dynamicChildren = null;\r\n        }\r\n        const { type, ref, shapeFlag } = n2;\r\n        switch (type) {\r\n            case Text:\r\n                processText(n1, n2, container, anchor);\r\n                break;\r\n            case Comment:\r\n                processCommentNode(n1, n2, container, anchor);\r\n                break;\r\n            case Static:\r\n                if (n1 == null) {\r\n                    mountStaticNode(n2, container, anchor, isSVG);\r\n                }\r\n                else if ((process.env.NODE_ENV !== 'production')) {\r\n                    patchStaticNode(n1, n2, container, isSVG);\r\n                }\r\n                break;\r\n            case Fragment:\r\n                processFragment(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);\r\n                break;\r\n            default:\r\n                if (shapeFlag & 1 /* ELEMENT */) {\r\n                    processElement(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);\r\n                }\r\n                else if (shapeFlag & 6 /* COMPONENT */) {\r\n                    processComponent(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);\r\n                }\r\n                else if (shapeFlag & 64 /* TELEPORT */) {\r\n                    type.process(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, internals);\r\n                }\r\n                else if (shapeFlag & 128 /* SUSPENSE */) {\r\n                    type.process(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, internals);\r\n                }\r\n                else if ((process.env.NODE_ENV !== 'production')) {\r\n                    warn('Invalid VNode type:', type, `(${typeof type})`);\r\n                }\r\n        }\r\n        // set ref\r\n        if (ref != null && parentComponent) {\r\n            setRef(ref, n1 && n1.ref, parentSuspense, n2);\r\n        }\r\n    };\r\n    const processText = (n1, n2, container, anchor) => {\r\n        if (n1 == null) {\r\n            hostInsert((n2.el = hostCreateText(n2.children)), container, anchor);\r\n        }\r\n        else {\r\n            const el = (n2.el = n1.el);\r\n            if (n2.children !== n1.children) {\r\n                hostSetText(el, n2.children);\r\n            }\r\n        }\r\n    };\r\n    const processCommentNode = (n1, n2, container, anchor) => {\r\n        if (n1 == null) {\r\n            hostInsert((n2.el = hostCreateComment(n2.children || '')), container, anchor);\r\n        }\r\n        else {\r\n            // there's no support for dynamic comments\r\n            n2.el = n1.el;\r\n        }\r\n    };\r\n    const mountStaticNode = (n2, container, anchor, isSVG) => {\r\n        [n2.el, n2.anchor] = hostInsertStaticContent(n2.children, container, anchor, isSVG);\r\n    };\r\n    /**\r\n     * Dev / HMR only\r\n     */\r\n    const patchStaticNode = (n1, n2, container, isSVG) => {\r\n        // static nodes are only patched during dev for HMR\r\n        if (n2.children !== n1.children) {\r\n            const anchor = hostNextSibling(n1.anchor);\r\n            // remove existing\r\n            removeStaticNode(n1);\r\n            [n2.el, n2.anchor] = hostInsertStaticContent(n2.children, container, anchor, isSVG);\r\n        }\r\n        else {\r\n            n2.el = n1.el;\r\n            n2.anchor = n1.anchor;\r\n        }\r\n    };\r\n    const moveStaticNode = ({ el, anchor }, container, nextSibling) => {\r\n        let next;\r\n        while (el && el !== anchor) {\r\n            next = hostNextSibling(el);\r\n            hostInsert(el, container, nextSibling);\r\n            el = next;\r\n        }\r\n        hostInsert(anchor, container, nextSibling);\r\n    };\r\n    const removeStaticNode = ({ el, anchor }) => {\r\n        let next;\r\n        while (el && el !== anchor) {\r\n            next = hostNextSibling(el);\r\n            hostRemove(el);\r\n            el = next;\r\n        }\r\n        hostRemove(anchor);\r\n    };\r\n    const processElement = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {\r\n        isSVG = isSVG || n2.type === 'svg';\r\n        if (n1 == null) {\r\n            mountElement(n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);\r\n        }\r\n        else {\r\n            patchElement(n1, n2, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);\r\n        }\r\n    };\r\n    const mountElement = (vnode, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {\r\n        let el;\r\n        let vnodeHook;\r\n        const { type, props, shapeFlag, transition, patchFlag, dirs } = vnode;\r\n        if (!(process.env.NODE_ENV !== 'production') &&\r\n            vnode.el &&\r\n            hostCloneNode !== undefined &&\r\n            patchFlag === -1 /* HOISTED */) {\r\n            // If a vnode has non-null el, it means it's being reused.\r\n            // Only static vnodes can be reused, so its mounted DOM nodes should be\r\n            // exactly the same, and we can simply do a clone here.\r\n            // only do this in production since cloned trees cannot be HMR updated.\r\n            el = vnode.el = hostCloneNode(vnode.el);\r\n        }\r\n        else {\r\n            el = vnode.el = hostCreateElement(vnode.type, isSVG, props && props.is, props);\r\n            // mount children first, since some props may rely on child content\r\n            // being already rendered, e.g. `<select value>`\r\n            if (shapeFlag & 8 /* TEXT_CHILDREN */) {\r\n                hostSetElementText(el, vnode.children);\r\n            }\r\n            else if (shapeFlag & 16 /* ARRAY_CHILDREN */) {\r\n                mountChildren(vnode.children, el, null, parentComponent, parentSuspense, isSVG && type !== 'foreignObject', slotScopeIds, optimized || !!vnode.dynamicChildren);\r\n            }\r\n            if (dirs) {\r\n                invokeDirectiveHook(vnode, null, parentComponent, 'created');\r\n            }\r\n            // props\r\n            if (props) {\r\n                for (const key in props) {\r\n                    if (!isReservedProp(key)) {\r\n                        hostPatchProp(el, key, null, props[key], isSVG, vnode.children, parentComponent, parentSuspense, unmountChildren);\r\n                    }\r\n                }\r\n                if ((vnodeHook = props.onVnodeBeforeMount)) {\r\n                    invokeVNodeHook(vnodeHook, parentComponent, vnode);\r\n                }\r\n            }\r\n            // scopeId\r\n            setScopeId(el, vnode, vnode.scopeId, slotScopeIds, parentComponent);\r\n        }\r\n        if ((process.env.NODE_ENV !== 'production') || __VUE_PROD_DEVTOOLS__) {\r\n            Object.defineProperty(el, '__vnode', {\r\n                value: vnode,\r\n                enumerable: false\r\n            });\r\n            Object.defineProperty(el, '__vueParentComponent', {\r\n                value: parentComponent,\r\n                enumerable: false\r\n            });\r\n        }\r\n        if (dirs) {\r\n            invokeDirectiveHook(vnode, null, parentComponent, 'beforeMount');\r\n        }\r\n        // #1583 For inside suspense + suspense not resolved case, enter hook should call when suspense resolved\r\n        // #1689 For inside suspense + suspense resolved case, just call it\r\n        const needCallTransitionHooks = (!parentSuspense || (parentSuspense && !parentSuspense.pendingBranch)) &&\r\n            transition &&\r\n            !transition.persisted;\r\n        if (needCallTransitionHooks) {\r\n            transition.beforeEnter(el);\r\n        }\r\n        hostInsert(el, container, anchor);\r\n        if ((vnodeHook = props && props.onVnodeMounted) ||\r\n            needCallTransitionHooks ||\r\n            dirs) {\r\n            queuePostRenderEffect(() => {\r\n                vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, vnode);\r\n                needCallTransitionHooks && transition.enter(el);\r\n                dirs && invokeDirectiveHook(vnode, null, parentComponent, 'mounted');\r\n            }, parentSuspense);\r\n        }\r\n    };\r\n    const setScopeId = (el, vnode, scopeId, slotScopeIds, parentComponent) => {\r\n        if (scopeId) {\r\n            hostSetScopeId(el, scopeId);\r\n        }\r\n        if (slotScopeIds) {\r\n            for (let i = 0; i < slotScopeIds.length; i++) {\r\n                hostSetScopeId(el, slotScopeIds[i]);\r\n            }\r\n        }\r\n        if (parentComponent) {\r\n            let subTree = parentComponent.subTree;\r\n            if ((process.env.NODE_ENV !== 'production') &&\r\n                subTree.patchFlag > 0 &&\r\n                subTree.patchFlag & 2048 /* DEV_ROOT_FRAGMENT */) {\r\n                subTree =\r\n                    filterSingleRoot(subTree.children) || subTree;\r\n            }\r\n            if (vnode === subTree) {\r\n                const parentVNode = parentComponent.vnode;\r\n                setScopeId(el, parentVNode, parentVNode.scopeId, parentVNode.slotScopeIds, parentComponent.parent);\r\n            }\r\n        }\r\n    };\r\n    const mountChildren = (children, container, anchor, parentComponent, parentSuspense, isSVG, optimized, slotScopeIds, start = 0) => {\r\n        for (let i = start; i < children.length; i++) {\r\n            const child = (children[i] = optimized\r\n                ? cloneIfMounted(children[i])\r\n                : normalizeVNode(children[i]));\r\n            patch(null, child, container, anchor, parentComponent, parentSuspense, isSVG, optimized, slotScopeIds);\r\n        }\r\n    };\r\n    const patchElement = (n1, n2, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {\r\n        const el = (n2.el = n1.el);\r\n        let { patchFlag, dynamicChildren, dirs } = n2;\r\n        // #1426 take the old vnode's patch flag into account since user may clone a\r\n        // compiler-generated vnode, which de-opts to FULL_PROPS\r\n        patchFlag |= n1.patchFlag & 16 /* FULL_PROPS */;\r\n        const oldProps = n1.props || EMPTY_OBJ;\r\n        const newProps = n2.props || EMPTY_OBJ;\r\n        let vnodeHook;\r\n        if ((vnodeHook = newProps.onVnodeBeforeUpdate)) {\r\n            invokeVNodeHook(vnodeHook, parentComponent, n2, n1);\r\n        }\r\n        if (dirs) {\r\n            invokeDirectiveHook(n2, n1, parentComponent, 'beforeUpdate');\r\n        }\r\n        if ((process.env.NODE_ENV !== 'production') && isHmrUpdating) {\r\n            // HMR updated, force full diff\r\n            patchFlag = 0;\r\n            optimized = false;\r\n            dynamicChildren = null;\r\n        }\r\n        if (patchFlag > 0) {\r\n            // the presence of a patchFlag means this element's render code was\r\n            // generated by the compiler and can take the fast path.\r\n            // in this path old node and new node are guaranteed to have the same shape\r\n            // (i.e. at the exact same position in the source template)\r\n            if (patchFlag & 16 /* FULL_PROPS */) {\r\n                // element props contain dynamic keys, full diff needed\r\n                patchProps(el, n2, oldProps, newProps, parentComponent, parentSuspense, isSVG);\r\n            }\r\n            else {\r\n                // class\r\n                // this flag is matched when the element has dynamic class bindings.\r\n                if (patchFlag & 2 /* CLASS */) {\r\n                    if (oldProps.class !== newProps.class) {\r\n                        hostPatchProp(el, 'class', null, newProps.class, isSVG);\r\n                    }\r\n                }\r\n                // style\r\n                // this flag is matched when the element has dynamic style bindings\r\n                if (patchFlag & 4 /* STYLE */) {\r\n                    hostPatchProp(el, 'style', oldProps.style, newProps.style, isSVG);\r\n                }\r\n                // props\r\n                // This flag is matched when the element has dynamic prop/attr bindings\r\n                // other than class and style. The keys of dynamic prop/attrs are saved for\r\n                // faster iteration.\r\n                // Note dynamic keys like :[foo]=\"bar\" will cause this optimization to\r\n                // bail out and go through a full diff because we need to unset the old key\r\n                if (patchFlag & 8 /* PROPS */) {\r\n                    // if the flag is present then dynamicProps must be non-null\r\n                    const propsToUpdate = n2.dynamicProps;\r\n                    for (let i = 0; i < propsToUpdate.length; i++) {\r\n                        const key = propsToUpdate[i];\r\n                        const prev = oldProps[key];\r\n                        const next = newProps[key];\r\n                        if (next !== prev ||\r\n                            (hostForcePatchProp && hostForcePatchProp(el, key))) {\r\n                            hostPatchProp(el, key, prev, next, isSVG, n1.children, parentComponent, parentSuspense, unmountChildren);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            // text\r\n            // This flag is matched when the element has only dynamic text children.\r\n            if (patchFlag & 1 /* TEXT */) {\r\n                if (n1.children !== n2.children) {\r\n                    hostSetElementText(el, n2.children);\r\n                }\r\n            }\r\n        }\r\n        else if (!optimized && dynamicChildren == null) {\r\n            // unoptimized, full diff\r\n            patchProps(el, n2, oldProps, newProps, parentComponent, parentSuspense, isSVG);\r\n        }\r\n        const areChildrenSVG = isSVG && n2.type !== 'foreignObject';\r\n        if (dynamicChildren) {\r\n            patchBlockChildren(n1.dynamicChildren, dynamicChildren, el, parentComponent, parentSuspense, areChildrenSVG, slotScopeIds);\r\n            if ((process.env.NODE_ENV !== 'production') && parentComponent && parentComponent.type.__hmrId) {\r\n                traverseStaticChildren(n1, n2);\r\n            }\r\n        }\r\n        else if (!optimized) {\r\n            // full diff\r\n            patchChildren(n1, n2, el, null, parentComponent, parentSuspense, areChildrenSVG, slotScopeIds, false);\r\n        }\r\n        if ((vnodeHook = newProps.onVnodeUpdated) || dirs) {\r\n            queuePostRenderEffect(() => {\r\n                vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, n2, n1);\r\n                dirs && invokeDirectiveHook(n2, n1, parentComponent, 'updated');\r\n            }, parentSuspense);\r\n        }\r\n    };\r\n    // The fast path for blocks.\r\n    const patchBlockChildren = (oldChildren, newChildren, fallbackContainer, parentComponent, parentSuspense, isSVG, slotScopeIds) => {\r\n        for (let i = 0; i < newChildren.length; i++) {\r\n            const oldVNode = oldChildren[i];\r\n            const newVNode = newChildren[i];\r\n            // Determine the container (parent element) for the patch.\r\n            const container = \r\n            // - In the case of a Fragment, we need to provide the actual parent\r\n            // of the Fragment itself so it can move its children.\r\n            oldVNode.type === Fragment ||\r\n                // - In the case of different nodes, there is going to be a replacement\r\n                // which also requires the correct parent container\r\n                !isSameVNodeType(oldVNode, newVNode) ||\r\n                // - In the case of a component, it could contain anything.\r\n                oldVNode.shapeFlag & 6 /* COMPONENT */ ||\r\n                oldVNode.shapeFlag & 64 /* TELEPORT */\r\n                ? hostParentNode(oldVNode.el)\r\n                : // In other cases, the parent container is not actually used so we\r\n                    // just pass the block element here to avoid a DOM parentNode call.\r\n                    fallbackContainer;\r\n            patch(oldVNode, newVNode, container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, true);\r\n        }\r\n    };\r\n    const patchProps = (el, vnode, oldProps, newProps, parentComponent, parentSuspense, isSVG) => {\r\n        if (oldProps !== newProps) {\r\n            for (const key in newProps) {\r\n                // empty string is not valid prop\r\n                if (isReservedProp(key))\r\n                    continue;\r\n                const next = newProps[key];\r\n                const prev = oldProps[key];\r\n                if (next !== prev ||\r\n                    (hostForcePatchProp && hostForcePatchProp(el, key))) {\r\n                    hostPatchProp(el, key, prev, next, isSVG, vnode.children, parentComponent, parentSuspense, unmountChildren);\r\n                }\r\n            }\r\n            if (oldProps !== EMPTY_OBJ) {\r\n                for (const key in oldProps) {\r\n                    if (!isReservedProp(key) && !(key in newProps)) {\r\n                        hostPatchProp(el, key, oldProps[key], null, isSVG, vnode.children, parentComponent, parentSuspense, unmountChildren);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    const processFragment = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {\r\n        const fragmentStartAnchor = (n2.el = n1 ? n1.el : hostCreateText(''));\r\n        const fragmentEndAnchor = (n2.anchor = n1 ? n1.anchor : hostCreateText(''));\r\n        let { patchFlag, dynamicChildren, slotScopeIds: fragmentSlotScopeIds } = n2;\r\n        if (patchFlag > 0) {\r\n            optimized = true;\r\n        }\r\n        // check if this is a slot fragment with :slotted scope ids\r\n        if (fragmentSlotScopeIds) {\r\n            slotScopeIds = slotScopeIds\r\n                ? slotScopeIds.concat(fragmentSlotScopeIds)\r\n                : fragmentSlotScopeIds;\r\n        }\r\n        if ((process.env.NODE_ENV !== 'production') && isHmrUpdating) {\r\n            // HMR updated, force full diff\r\n            patchFlag = 0;\r\n            optimized = false;\r\n            dynamicChildren = null;\r\n        }\r\n        if (n1 == null) {\r\n            hostInsert(fragmentStartAnchor, container, anchor);\r\n            hostInsert(fragmentEndAnchor, container, anchor);\r\n            // a fragment can only have array children\r\n            // since they are either generated by the compiler, or implicitly created\r\n            // from arrays.\r\n            mountChildren(n2.children, container, fragmentEndAnchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);\r\n        }\r\n        else {\r\n            if (patchFlag > 0 &&\r\n                patchFlag & 64 /* STABLE_FRAGMENT */ &&\r\n                dynamicChildren &&\r\n                // #2715 the previous fragment could've been a BAILed one as a result\r\n                // of renderSlot() with no valid children\r\n                n1.dynamicChildren) {\r\n                // a stable fragment (template root or <template v-for>) doesn't need to\r\n                // patch children order, but it may contain dynamicChildren.\r\n                patchBlockChildren(n1.dynamicChildren, dynamicChildren, container, parentComponent, parentSuspense, isSVG, slotScopeIds);\r\n                if ((process.env.NODE_ENV !== 'production') && parentComponent && parentComponent.type.__hmrId) {\r\n                    traverseStaticChildren(n1, n2);\r\n                }\r\n                else if (\r\n                // #2080 if the stable fragment has a key, it's a <template v-for> that may\r\n                //  get moved around. Make sure all root level vnodes inherit el.\r\n                // #2134 or if it's a component root, it may also get moved around\r\n                // as the component is being moved.\r\n                n2.key != null ||\r\n                    (parentComponent && n2 === parentComponent.subTree)) {\r\n                    traverseStaticChildren(n1, n2, true /* shallow */);\r\n                }\r\n            }\r\n            else {\r\n                // keyed / unkeyed, or manual fragments.\r\n                // for keyed & unkeyed, since they are compiler generated from v-for,\r\n                // each child is guaranteed to be a block so the fragment will never\r\n                // have dynamicChildren.\r\n                patchChildren(n1, n2, container, fragmentEndAnchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);\r\n            }\r\n        }\r\n    };\r\n    const processComponent = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {\r\n        n2.slotScopeIds = slotScopeIds;\r\n        if (n1 == null) {\r\n            if (n2.shapeFlag & 512 /* COMPONENT_KEPT_ALIVE */) {\r\n                parentComponent.ctx.activate(n2, container, anchor, isSVG, optimized);\r\n            }\r\n            else {\r\n                mountComponent(n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized);\r\n            }\r\n        }\r\n        else {\r\n            updateComponent(n1, n2, optimized);\r\n        }\r\n    };\r\n    const mountComponent = (initialVNode, container, anchor, parentComponent, parentSuspense, isSVG, optimized) => {\r\n        const instance = (initialVNode.component = createComponentInstance(initialVNode, parentComponent, parentSuspense));\r\n        if ((process.env.NODE_ENV !== 'production') && instance.type.__hmrId) {\r\n            registerHMR(instance);\r\n        }\r\n        if ((process.env.NODE_ENV !== 'production')) {\r\n            pushWarningContext(initialVNode);\r\n            startMeasure(instance, `mount`);\r\n        }\r\n        // inject renderer internals for keepAlive\r\n        if (isKeepAlive(initialVNode)) {\r\n            instance.ctx.renderer = internals;\r\n        }\r\n        // resolve props and slots for setup context\r\n        if ((process.env.NODE_ENV !== 'production')) {\r\n            startMeasure(instance, `init`);\r\n        }\r\n        setupComponent(instance);\r\n        if ((process.env.NODE_ENV !== 'production')) {\r\n            endMeasure(instance, `init`);\r\n        }\r\n        // setup() is async. This component relies on async logic to be resolved\r\n        // before proceeding\r\n        if (instance.asyncDep) {\r\n            parentSuspense && parentSuspense.registerDep(instance, setupRenderEffect);\r\n            // Give it a placeholder if this is not hydration\r\n            // TODO handle self-defined fallback\r\n            if (!initialVNode.el) {\r\n                const placeholder = (instance.subTree = createVNode(Comment));\r\n                processCommentNode(null, placeholder, container, anchor);\r\n            }\r\n            return;\r\n        }\r\n        setupRenderEffect(instance, initialVNode, container, anchor, parentSuspense, isSVG, optimized);\r\n        if ((process.env.NODE_ENV !== 'production')) {\r\n            popWarningContext();\r\n            endMeasure(instance, `mount`);\r\n        }\r\n    };\r\n    const updateComponent = (n1, n2, optimized) => {\r\n        const instance = (n2.component = n1.component);\r\n        if (shouldUpdateComponent(n1, n2, optimized)) {\r\n            if (instance.asyncDep &&\r\n                !instance.asyncResolved) {\r\n                // async & still pending - just update props and slots\r\n                // since the component's reactive effect for render isn't set-up yet\r\n                if ((process.env.NODE_ENV !== 'production')) {\r\n                    pushWarningContext(n2);\r\n                }\r\n                updateComponentPreRender(instance, n2, optimized);\r\n                if ((process.env.NODE_ENV !== 'production')) {\r\n                    popWarningContext();\r\n                }\r\n                return;\r\n            }\r\n            else {\r\n                // normal update\r\n                instance.next = n2;\r\n                // in case the child component is also queued, remove it to avoid\r\n                // double updating the same child component in the same flush.\r\n                invalidateJob(instance.update);\r\n                // instance.update is the reactive effect runner.\r\n                instance.update();\r\n            }\r\n        }\r\n        else {\r\n            // no update needed. just copy over properties\r\n            n2.component = n1.component;\r\n            n2.el = n1.el;\r\n            instance.vnode = n2;\r\n        }\r\n    };\r\n    const setupRenderEffect = (instance, initialVNode, container, anchor, parentSuspense, isSVG, optimized) => {\r\n        // create reactive effect for rendering\r\n        instance.update = effect(function componentEffect() {\r\n            if (!instance.isMounted) {\r\n                let vnodeHook;\r\n                const { el, props } = initialVNode;\r\n                const { bm, m, parent } = instance;\r\n                // beforeMount hook\r\n                if (bm) {\r\n                    invokeArrayFns(bm);\r\n                }\r\n                // onVnodeBeforeMount\r\n                if ((vnodeHook = props && props.onVnodeBeforeMount)) {\r\n                    invokeVNodeHook(vnodeHook, parent, initialVNode);\r\n                }\r\n                // render\r\n                if ((process.env.NODE_ENV !== 'production')) {\r\n                    startMeasure(instance, `render`);\r\n                }\r\n                const subTree = (instance.subTree = renderComponentRoot(instance));\r\n                if ((process.env.NODE_ENV !== 'production')) {\r\n                    endMeasure(instance, `render`);\r\n                }\r\n                if (el && hydrateNode) {\r\n                    if ((process.env.NODE_ENV !== 'production')) {\r\n                        startMeasure(instance, `hydrate`);\r\n                    }\r\n                    // vnode has adopted host node - perform hydration instead of mount.\r\n                    hydrateNode(initialVNode.el, subTree, instance, parentSuspense, null);\r\n                    if ((process.env.NODE_ENV !== 'production')) {\r\n                        endMeasure(instance, `hydrate`);\r\n                    }\r\n                }\r\n                else {\r\n                    if ((process.env.NODE_ENV !== 'production')) {\r\n                        startMeasure(instance, `patch`);\r\n                    }\r\n                    patch(null, subTree, container, anchor, instance, parentSuspense, isSVG);\r\n                    if ((process.env.NODE_ENV !== 'production')) {\r\n                        endMeasure(instance, `patch`);\r\n                    }\r\n                    initialVNode.el = subTree.el;\r\n                }\r\n                // mounted hook\r\n                if (m) {\r\n                    queuePostRenderEffect(m, parentSuspense);\r\n                }\r\n                // onVnodeMounted\r\n                if ((vnodeHook = props && props.onVnodeMounted)) {\r\n                    const scopedInitialVNode = initialVNode;\r\n                    queuePostRenderEffect(() => {\r\n                        invokeVNodeHook(vnodeHook, parent, scopedInitialVNode);\r\n                    }, parentSuspense);\r\n                }\r\n                // activated hook for keep-alive roots.\r\n                // #1742 activated hook must be accessed after first render\r\n                // since the hook may be injected by a child keep-alive\r\n                const { a } = instance;\r\n                if (a &&\r\n                    initialVNode.shapeFlag & 256 /* COMPONENT_SHOULD_KEEP_ALIVE */) {\r\n                    queuePostRenderEffect(a, parentSuspense);\r\n                }\r\n                instance.isMounted = true;\r\n                if ((process.env.NODE_ENV !== 'production') || __VUE_PROD_DEVTOOLS__) {\r\n                    devtoolsComponentAdded(instance);\r\n                }\r\n                // #2458: deference mount-only object parameters to prevent memleaks\r\n                initialVNode = container = anchor = null;\r\n            }\r\n            else {\r\n                // updateComponent\r\n                // This is triggered by mutation of component's own state (next: null)\r\n                // OR parent calling processComponent (next: VNode)\r\n                let { next, bu, u, parent, vnode } = instance;\r\n                let originNext = next;\r\n                let vnodeHook;\r\n                if ((process.env.NODE_ENV !== 'production')) {\r\n                    pushWarningContext(next || instance.vnode);\r\n                }\r\n                if (next) {\r\n                    next.el = vnode.el;\r\n                    updateComponentPreRender(instance, next, optimized);\r\n                }\r\n                else {\r\n                    next = vnode;\r\n                }\r\n                // beforeUpdate hook\r\n                if (bu) {\r\n                    invokeArrayFns(bu);\r\n                }\r\n                // onVnodeBeforeUpdate\r\n                if ((vnodeHook = next.props && next.props.onVnodeBeforeUpdate)) {\r\n                    invokeVNodeHook(vnodeHook, parent, next, vnode);\r\n                }\r\n                // render\r\n                if ((process.env.NODE_ENV !== 'production')) {\r\n                    startMeasure(instance, `render`);\r\n                }\r\n                const nextTree = renderComponentRoot(instance);\r\n                if ((process.env.NODE_ENV !== 'production')) {\r\n                    endMeasure(instance, `render`);\r\n                }\r\n                const prevTree = instance.subTree;\r\n                instance.subTree = nextTree;\r\n                if ((process.env.NODE_ENV !== 'production')) {\r\n                    startMeasure(instance, `patch`);\r\n                }\r\n                patch(prevTree, nextTree, \r\n                // parent may have changed if it's in a teleport\r\n                hostParentNode(prevTree.el), \r\n                // anchor may have changed if it's in a fragment\r\n                getNextHostNode(prevTree), instance, parentSuspense, isSVG);\r\n                if ((process.env.NODE_ENV !== 'production')) {\r\n                    endMeasure(instance, `patch`);\r\n                }\r\n                next.el = nextTree.el;\r\n                if (originNext === null) {\r\n                    // self-triggered update. In case of HOC, update parent component\r\n                    // vnode el. HOC is indicated by parent instance's subTree pointing\r\n                    // to child component's vnode\r\n                    updateHOCHostEl(instance, nextTree.el);\r\n                }\r\n                // updated hook\r\n                if (u) {\r\n                    queuePostRenderEffect(u, parentSuspense);\r\n                }\r\n                // onVnodeUpdated\r\n                if ((vnodeHook = next.props && next.props.onVnodeUpdated)) {\r\n                    queuePostRenderEffect(() => {\r\n                        invokeVNodeHook(vnodeHook, parent, next, vnode);\r\n                    }, parentSuspense);\r\n                }\r\n                if ((process.env.NODE_ENV !== 'production') || __VUE_PROD_DEVTOOLS__) {\r\n                    devtoolsComponentUpdated(instance);\r\n                }\r\n                if ((process.env.NODE_ENV !== 'production')) {\r\n                    popWarningContext();\r\n                }\r\n            }\r\n        }, (process.env.NODE_ENV !== 'production') ? createDevEffectOptions(instance) : prodEffectOptions);\r\n    };\r\n    const updateComponentPreRender = (instance, nextVNode, optimized) => {\r\n        nextVNode.component = instance;\r\n        const prevProps = instance.vnode.props;\r\n        instance.vnode = nextVNode;\r\n        instance.next = null;\r\n        updateProps(instance, nextVNode.props, prevProps, optimized);\r\n        updateSlots(instance, nextVNode.children);\r\n        pauseTracking();\r\n        // props update may have triggered pre-flush watchers.\r\n        // flush them before the render update.\r\n        flushPreFlushCbs(undefined, instance.update);\r\n        resetTracking();\r\n    };\r\n    const patchChildren = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized = false) => {\r\n        const c1 = n1 && n1.children;\r\n        const prevShapeFlag = n1 ? n1.shapeFlag : 0;\r\n        const c2 = n2.children;\r\n        const { patchFlag, shapeFlag } = n2;\r\n        // fast path\r\n        if (patchFlag > 0) {\r\n            if (patchFlag & 128 /* KEYED_FRAGMENT */) {\r\n                // this could be either fully-keyed or mixed (some keyed some not)\r\n                // presence of patchFlag means children are guaranteed to be arrays\r\n                patchKeyedChildren(c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);\r\n                return;\r\n            }\r\n            else if (patchFlag & 256 /* UNKEYED_FRAGMENT */) {\r\n                // unkeyed\r\n                patchUnkeyedChildren(c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);\r\n                return;\r\n            }\r\n        }\r\n        // children has 3 possibilities: text, array or no children.\r\n        if (shapeFlag & 8 /* TEXT_CHILDREN */) {\r\n            // text children fast path\r\n            if (prevShapeFlag & 16 /* ARRAY_CHILDREN */) {\r\n                unmountChildren(c1, parentComponent, parentSuspense);\r\n            }\r\n            if (c2 !== c1) {\r\n                hostSetElementText(container, c2);\r\n            }\r\n        }\r\n        else {\r\n            if (prevShapeFlag & 16 /* ARRAY_CHILDREN */) {\r\n                // prev children was array\r\n                if (shapeFlag & 16 /* ARRAY_CHILDREN */) {\r\n                    // two arrays, cannot assume anything, do full diff\r\n                    patchKeyedChildren(c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);\r\n                }\r\n                else {\r\n                    // no new children, just unmount old\r\n                    unmountChildren(c1, parentComponent, parentSuspense, true);\r\n                }\r\n            }\r\n            else {\r\n                // prev children was text OR null\r\n                // new children is array OR null\r\n                if (prevShapeFlag & 8 /* TEXT_CHILDREN */) {\r\n                    hostSetElementText(container, '');\r\n                }\r\n                // mount new if array\r\n                if (shapeFlag & 16 /* ARRAY_CHILDREN */) {\r\n                    mountChildren(c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    const patchUnkeyedChildren = (c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {\r\n        c1 = c1 || EMPTY_ARR;\r\n        c2 = c2 || EMPTY_ARR;\r\n        const oldLength = c1.length;\r\n        const newLength = c2.length;\r\n        const commonLength = Math.min(oldLength, newLength);\r\n        let i;\r\n        for (i = 0; i < commonLength; i++) {\r\n            const nextChild = (c2[i] = optimized\r\n                ? cloneIfMounted(c2[i])\r\n                : normalizeVNode(c2[i]));\r\n            patch(c1[i], nextChild, container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);\r\n        }\r\n        if (oldLength > newLength) {\r\n            // remove old\r\n            unmountChildren(c1, parentComponent, parentSuspense, true, false, commonLength);\r\n        }\r\n        else {\r\n            // mount new\r\n            mountChildren(c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, commonLength);\r\n        }\r\n    };\r\n    // can be all-keyed or mixed\r\n    const patchKeyedChildren = (c1, c2, container, parentAnchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {\r\n        let i = 0;\r\n        const l2 = c2.length;\r\n        let e1 = c1.length - 1; // prev ending index\r\n        let e2 = l2 - 1; // next ending index\r\n        // 1. sync from start\r\n        // (a b) c\r\n        // (a b) d e\r\n        while (i <= e1 && i <= e2) {\r\n            const n1 = c1[i];\r\n            const n2 = (c2[i] = optimized\r\n                ? cloneIfMounted(c2[i])\r\n                : normalizeVNode(c2[i]));\r\n            if (isSameVNodeType(n1, n2)) {\r\n                patch(n1, n2, container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n            i++;\r\n        }\r\n        // 2. sync from end\r\n        // a (b c)\r\n        // d e (b c)\r\n        while (i <= e1 && i <= e2) {\r\n            const n1 = c1[e1];\r\n            const n2 = (c2[e2] = optimized\r\n                ? cloneIfMounted(c2[e2])\r\n                : normalizeVNode(c2[e2]));\r\n            if (isSameVNodeType(n1, n2)) {\r\n                patch(n1, n2, container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n            e1--;\r\n            e2--;\r\n        }\r\n        // 3. common sequence + mount\r\n        // (a b)\r\n        // (a b) c\r\n        // i = 2, e1 = 1, e2 = 2\r\n        // (a b)\r\n        // c (a b)\r\n        // i = 0, e1 = -1, e2 = 0\r\n        if (i > e1) {\r\n            if (i <= e2) {\r\n                const nextPos = e2 + 1;\r\n                const anchor = nextPos < l2 ? c2[nextPos].el : parentAnchor;\r\n                while (i <= e2) {\r\n                    patch(null, (c2[i] = optimized\r\n                        ? cloneIfMounted(c2[i])\r\n                        : normalizeVNode(c2[i])), container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);\r\n                    i++;\r\n                }\r\n            }\r\n        }\r\n        // 4. common sequence + unmount\r\n        // (a b) c\r\n        // (a b)\r\n        // i = 2, e1 = 2, e2 = 1\r\n        // a (b c)\r\n        // (b c)\r\n        // i = 0, e1 = 0, e2 = -1\r\n        else if (i > e2) {\r\n            while (i <= e1) {\r\n                unmount(c1[i], parentComponent, parentSuspense, true);\r\n                i++;\r\n            }\r\n        }\r\n        // 5. unknown sequence\r\n        // [i ... e1 + 1]: a b [c d e] f g\r\n        // [i ... e2 + 1]: a b [e d c h] f g\r\n        // i = 2, e1 = 4, e2 = 5\r\n        else {\r\n            const s1 = i; // prev starting index\r\n            const s2 = i; // next starting index\r\n            // 5.1 build key:index map for newChildren\r\n            const keyToNewIndexMap = new Map();\r\n            for (i = s2; i <= e2; i++) {\r\n                const nextChild = (c2[i] = optimized\r\n                    ? cloneIfMounted(c2[i])\r\n                    : normalizeVNode(c2[i]));\r\n                if (nextChild.key != null) {\r\n                    if ((process.env.NODE_ENV !== 'production') && keyToNewIndexMap.has(nextChild.key)) {\r\n                        warn(`Duplicate keys found during update:`, JSON.stringify(nextChild.key), `Make sure keys are unique.`);\r\n                    }\r\n                    keyToNewIndexMap.set(nextChild.key, i);\r\n                }\r\n            }\r\n            // 5.2 loop through old children left to be patched and try to patch\r\n            // matching nodes & remove nodes that are no longer present\r\n            let j;\r\n            let patched = 0;\r\n            const toBePatched = e2 - s2 + 1;\r\n            let moved = false;\r\n            // used to track whether any node has moved\r\n            let maxNewIndexSoFar = 0;\r\n            // works as Map<newIndex, oldIndex>\r\n            // Note that oldIndex is offset by +1\r\n            // and oldIndex = 0 is a special value indicating the new node has\r\n            // no corresponding old node.\r\n            // used for determining longest stable subsequence\r\n            const newIndexToOldIndexMap = new Array(toBePatched);\r\n            for (i = 0; i < toBePatched; i++)\r\n                newIndexToOldIndexMap[i] = 0;\r\n            for (i = s1; i <= e1; i++) {\r\n                const prevChild = c1[i];\r\n                if (patched >= toBePatched) {\r\n                    // all new children have been patched so this can only be a removal\r\n                    unmount(prevChild, parentComponent, parentSuspense, true);\r\n                    continue;\r\n                }\r\n                let newIndex;\r\n                if (prevChild.key != null) {\r\n                    newIndex = keyToNewIndexMap.get(prevChild.key);\r\n                }\r\n                else {\r\n                    // key-less node, try to locate a key-less node of the same type\r\n                    for (j = s2; j <= e2; j++) {\r\n                        if (newIndexToOldIndexMap[j - s2] === 0 &&\r\n                            isSameVNodeType(prevChild, c2[j])) {\r\n                            newIndex = j;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                if (newIndex === undefined) {\r\n                    unmount(prevChild, parentComponent, parentSuspense, true);\r\n                }\r\n                else {\r\n                    newIndexToOldIndexMap[newIndex - s2] = i + 1;\r\n                    if (newIndex >= maxNewIndexSoFar) {\r\n                        maxNewIndexSoFar = newIndex;\r\n                    }\r\n                    else {\r\n                        moved = true;\r\n                    }\r\n                    patch(prevChild, c2[newIndex], container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);\r\n                    patched++;\r\n                }\r\n            }\r\n            // 5.3 move and mount\r\n            // generate longest stable subsequence only when nodes have moved\r\n            const increasingNewIndexSequence = moved\r\n                ? getSequence(newIndexToOldIndexMap)\r\n                : EMPTY_ARR;\r\n            j = increasingNewIndexSequence.length - 1;\r\n            // looping backwards so that we can use last patched node as anchor\r\n            for (i = toBePatched - 1; i >= 0; i--) {\r\n                const nextIndex = s2 + i;\r\n                const nextChild = c2[nextIndex];\r\n                const anchor = nextIndex + 1 < l2 ? c2[nextIndex + 1].el : parentAnchor;\r\n                if (newIndexToOldIndexMap[i] === 0) {\r\n                    // mount new\r\n                    patch(null, nextChild, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);\r\n                }\r\n                else if (moved) {\r\n                    // move if:\r\n                    // There is no stable subsequence (e.g. a reverse)\r\n                    // OR current node is not among the stable sequence\r\n                    if (j < 0 || i !== increasingNewIndexSequence[j]) {\r\n                        move(nextChild, container, anchor, 2 /* REORDER */);\r\n                    }\r\n                    else {\r\n                        j--;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    const move = (vnode, container, anchor, moveType, parentSuspense = null) => {\r\n        const { el, type, transition, children, shapeFlag } = vnode;\r\n        if (shapeFlag & 6 /* COMPONENT */) {\r\n            move(vnode.component.subTree, container, anchor, moveType);\r\n            return;\r\n        }\r\n        if (shapeFlag & 128 /* SUSPENSE */) {\r\n            vnode.suspense.move(container, anchor, moveType);\r\n            return;\r\n        }\r\n        if (shapeFlag & 64 /* TELEPORT */) {\r\n            type.move(vnode, container, anchor, internals);\r\n            return;\r\n        }\r\n        if (type === Fragment) {\r\n            hostInsert(el, container, anchor);\r\n            for (let i = 0; i < children.length; i++) {\r\n                move(children[i], container, anchor, moveType);\r\n            }\r\n            hostInsert(vnode.anchor, container, anchor);\r\n            return;\r\n        }\r\n        if (type === Static) {\r\n            moveStaticNode(vnode, container, anchor);\r\n            return;\r\n        }\r\n        // single nodes\r\n        const needTransition = moveType !== 2 /* REORDER */ &&\r\n            shapeFlag & 1 /* ELEMENT */ &&\r\n            transition;\r\n        if (needTransition) {\r\n            if (moveType === 0 /* ENTER */) {\r\n                transition.beforeEnter(el);\r\n                hostInsert(el, container, anchor);\r\n                queuePostRenderEffect(() => transition.enter(el), parentSuspense);\r\n            }\r\n            else {\r\n                const { leave, delayLeave, afterLeave } = transition;\r\n                const remove = () => hostInsert(el, container, anchor);\r\n                const performLeave = () => {\r\n                    leave(el, () => {\r\n                        remove();\r\n                        afterLeave && afterLeave();\r\n                    });\r\n                };\r\n                if (delayLeave) {\r\n                    delayLeave(el, remove, performLeave);\r\n                }\r\n                else {\r\n                    performLeave();\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            hostInsert(el, container, anchor);\r\n        }\r\n    };\r\n    const unmount = (vnode, parentComponent, parentSuspense, doRemove = false, optimized = false) => {\r\n        const { type, props, ref, children, dynamicChildren, shapeFlag, patchFlag, dirs } = vnode;\r\n        // unset ref\r\n        if (ref != null) {\r\n            setRef(ref, null, parentSuspense, null);\r\n        }\r\n        if (shapeFlag & 256 /* COMPONENT_SHOULD_KEEP_ALIVE */) {\r\n            parentComponent.ctx.deactivate(vnode);\r\n            return;\r\n        }\r\n        const shouldInvokeDirs = shapeFlag & 1 /* ELEMENT */ && dirs;\r\n        let vnodeHook;\r\n        if ((vnodeHook = props && props.onVnodeBeforeUnmount)) {\r\n            invokeVNodeHook(vnodeHook, parentComponent, vnode);\r\n        }\r\n        if (shapeFlag & 6 /* COMPONENT */) {\r\n            unmountComponent(vnode.component, parentSuspense, doRemove);\r\n        }\r\n        else {\r\n            if (shapeFlag & 128 /* SUSPENSE */) {\r\n                vnode.suspense.unmount(parentSuspense, doRemove);\r\n                return;\r\n            }\r\n            if (shouldInvokeDirs) {\r\n                invokeDirectiveHook(vnode, null, parentComponent, 'beforeUnmount');\r\n            }\r\n            if (shapeFlag & 64 /* TELEPORT */) {\r\n                vnode.type.remove(vnode, parentComponent, parentSuspense, optimized, internals, doRemove);\r\n            }\r\n            else if (dynamicChildren &&\r\n                // #1153: fast path should not be taken for non-stable (v-for) fragments\r\n                (type !== Fragment ||\r\n                    (patchFlag > 0 && patchFlag & 64 /* STABLE_FRAGMENT */))) {\r\n                // fast path for block nodes: only need to unmount dynamic children.\r\n                unmountChildren(dynamicChildren, parentComponent, parentSuspense, false, true);\r\n            }\r\n            else if ((type === Fragment &&\r\n                (patchFlag & 128 /* KEYED_FRAGMENT */ ||\r\n                    patchFlag & 256 /* UNKEYED_FRAGMENT */)) ||\r\n                (!optimized && shapeFlag & 16 /* ARRAY_CHILDREN */)) {\r\n                unmountChildren(children, parentComponent, parentSuspense);\r\n            }\r\n            if (doRemove) {\r\n                remove(vnode);\r\n            }\r\n        }\r\n        if ((vnodeHook = props && props.onVnodeUnmounted) || shouldInvokeDirs) {\r\n            queuePostRenderEffect(() => {\r\n                vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, vnode);\r\n                shouldInvokeDirs &&\r\n                    invokeDirectiveHook(vnode, null, parentComponent, 'unmounted');\r\n            }, parentSuspense);\r\n        }\r\n    };\r\n    const remove = vnode => {\r\n        const { type, el, anchor, transition } = vnode;\r\n        if (type === Fragment) {\r\n            removeFragment(el, anchor);\r\n            return;\r\n        }\r\n        if (type === Static) {\r\n            removeStaticNode(vnode);\r\n            return;\r\n        }\r\n        const performRemove = () => {\r\n            hostRemove(el);\r\n            if (transition && !transition.persisted && transition.afterLeave) {\r\n                transition.afterLeave();\r\n            }\r\n        };\r\n        if (vnode.shapeFlag & 1 /* ELEMENT */ &&\r\n            transition &&\r\n            !transition.persisted) {\r\n            const { leave, delayLeave } = transition;\r\n            const performLeave = () => leave(el, performRemove);\r\n            if (delayLeave) {\r\n                delayLeave(vnode.el, performRemove, performLeave);\r\n            }\r\n            else {\r\n                performLeave();\r\n            }\r\n        }\r\n        else {\r\n            performRemove();\r\n        }\r\n    };\r\n    const removeFragment = (cur, end) => {\r\n        // For fragments, directly remove all contained DOM nodes.\r\n        // (fragment child nodes cannot have transition)\r\n        let next;\r\n        while (cur !== end) {\r\n            next = hostNextSibling(cur);\r\n            hostRemove(cur);\r\n            cur = next;\r\n        }\r\n        hostRemove(end);\r\n    };\r\n    const unmountComponent = (instance, parentSuspense, doRemove) => {\r\n        if ((process.env.NODE_ENV !== 'production') && instance.type.__hmrId) {\r\n            unregisterHMR(instance);\r\n        }\r\n        const { bum, effects, update, subTree, um } = instance;\r\n        // beforeUnmount hook\r\n        if (bum) {\r\n            invokeArrayFns(bum);\r\n        }\r\n        if (effects) {\r\n            for (let i = 0; i < effects.length; i++) {\r\n                stop(effects[i]);\r\n            }\r\n        }\r\n        // update may be null if a component is unmounted before its async\r\n        // setup has resolved.\r\n        if (update) {\r\n            stop(update);\r\n            unmount(subTree, instance, parentSuspense, doRemove);\r\n        }\r\n        // unmounted hook\r\n        if (um) {\r\n            queuePostRenderEffect(um, parentSuspense);\r\n        }\r\n        queuePostRenderEffect(() => {\r\n            instance.isUnmounted = true;\r\n        }, parentSuspense);\r\n        // A component with async dep inside a pending suspense is unmounted before\r\n        // its async dep resolves. This should remove the dep from the suspense, and\r\n        // cause the suspense to resolve immediately if that was the last dep.\r\n        if (parentSuspense &&\r\n            parentSuspense.pendingBranch &&\r\n            !parentSuspense.isUnmounted &&\r\n            instance.asyncDep &&\r\n            !instance.asyncResolved &&\r\n            instance.suspenseId === parentSuspense.pendingId) {\r\n            parentSuspense.deps--;\r\n            if (parentSuspense.deps === 0) {\r\n                parentSuspense.resolve();\r\n            }\r\n        }\r\n        if ((process.env.NODE_ENV !== 'production') || __VUE_PROD_DEVTOOLS__) {\r\n            devtoolsComponentRemoved(instance);\r\n        }\r\n    };\r\n    const unmountChildren = (children, parentComponent, parentSuspense, doRemove = false, optimized = false, start = 0) => {\r\n        for (let i = start; i < children.length; i++) {\r\n            unmount(children[i], parentComponent, parentSuspense, doRemove, optimized);\r\n        }\r\n    };\r\n    const getNextHostNode = vnode => {\r\n        if (vnode.shapeFlag & 6 /* COMPONENT */) {\r\n            return getNextHostNode(vnode.component.subTree);\r\n        }\r\n        if (vnode.shapeFlag & 128 /* SUSPENSE */) {\r\n            return vnode.suspense.next();\r\n        }\r\n        return hostNextSibling((vnode.anchor || vnode.el));\r\n    };\r\n    const render = (vnode, container, isSVG) => {\r\n        if (vnode == null) {\r\n            if (container._vnode) {\r\n                unmount(container._vnode, null, null, true);\r\n            }\r\n        }\r\n        else {\r\n            patch(container._vnode || null, vnode, container, null, null, null, isSVG);\r\n        }\r\n        flushPostFlushCbs();\r\n        container._vnode = vnode;\r\n    };\r\n    const internals = {\r\n        p: patch,\r\n        um: unmount,\r\n        m: move,\r\n        r: remove,\r\n        mt: mountComponent,\r\n        mc: mountChildren,\r\n        pc: patchChildren,\r\n        pbc: patchBlockChildren,\r\n        n: getNextHostNode,\r\n        o: options\r\n    };\r\n    let hydrate;\r\n    let hydrateNode;\r\n    if (createHydrationFns) {\r\n        [hydrate, hydrateNode] = createHydrationFns(internals);\r\n    }\r\n    return {\r\n        render,\r\n        hydrate,\r\n        createApp: createAppAPI(render, hydrate)\r\n    };\r\n}\r\nfunction invokeVNodeHook(hook, instance, vnode, prevVNode = null) {\r\n    callWithAsyncErrorHandling(hook, instance, 7 /* VNODE_HOOK */, [\r\n        vnode,\r\n        prevVNode\r\n    ]);\r\n}\r\n/**\r\n * #1156\r\n * When a component is HMR-enabled, we need to make sure that all static nodes\r\n * inside a block also inherit the DOM element from the previous tree so that\r\n * HMR updates (which are full updates) can retrieve the element for patching.\r\n *\r\n * #2080\r\n * Inside keyed `template` fragment static children, if a fragment is moved,\r\n * the children will always moved so that need inherit el form previous nodes\r\n * to ensure correct moved position.\r\n */\r\nfunction traverseStaticChildren(n1, n2, shallow = false) {\r\n    const ch1 = n1.children;\r\n    const ch2 = n2.children;\r\n    if (isArray(ch1) && isArray(ch2)) {\r\n        for (let i = 0; i < ch1.length; i++) {\r\n            // this is only called in the optimized path so array children are\r\n            // guaranteed to be vnodes\r\n            const c1 = ch1[i];\r\n            let c2 = ch2[i];\r\n            if (c2.shapeFlag & 1 /* ELEMENT */ && !c2.dynamicChildren) {\r\n                if (c2.patchFlag <= 0 || c2.patchFlag === 32 /* HYDRATE_EVENTS */) {\r\n                    c2 = ch2[i] = cloneIfMounted(ch2[i]);\r\n                    c2.el = c1.el;\r\n                }\r\n                if (!shallow)\r\n                    traverseStaticChildren(c1, c2);\r\n            }\r\n            // also inherit for comment nodes, but not placeholders (e.g. v-if which\r\n            // would have received .el during block patch)\r\n            if ((process.env.NODE_ENV !== 'production') && c2.type === Comment && !c2.el) {\r\n                c2.el = c1.el;\r\n            }\r\n        }\r\n    }\r\n}\r\n// https://en.wikipedia.org/wiki/Longest_increasing_subsequence\r\nfunction getSequence(arr) {\r\n    const p = arr.slice();\r\n    const result = [0];\r\n    let i, j, u, v, c;\r\n    const len = arr.length;\r\n    for (i = 0; i < len; i++) {\r\n        const arrI = arr[i];\r\n        if (arrI !== 0) {\r\n            j = result[result.length - 1];\r\n            if (arr[j] < arrI) {\r\n                p[i] = j;\r\n                result.push(i);\r\n                continue;\r\n            }\r\n            u = 0;\r\n            v = result.length - 1;\r\n            while (u < v) {\r\n                c = ((u + v) / 2) | 0;\r\n                if (arr[result[c]] < arrI) {\r\n                    u = c + 1;\r\n                }\r\n                else {\r\n                    v = c;\r\n                }\r\n            }\r\n            if (arrI < arr[result[u]]) {\r\n                if (u > 0) {\r\n                    p[i] = result[u - 1];\r\n                }\r\n                result[u] = i;\r\n            }\r\n        }\r\n    }\r\n    u = result.length;\r\n    v = result[u - 1];\r\n    while (u-- > 0) {\r\n        result[u] = v;\r\n        v = p[v];\r\n    }\r\n    return result;\r\n}\n\nconst isTeleport = (type) => type.__isTeleport;\r\nconst isTeleportDisabled = (props) => props && (props.disabled || props.disabled === '');\r\nconst isTargetSVG = (target) => typeof SVGElement !== 'undefined' && target instanceof SVGElement;\r\nconst resolveTarget = (props, select) => {\r\n    const targetSelector = props && props.to;\r\n    if (isString(targetSelector)) {\r\n        if (!select) {\r\n            (process.env.NODE_ENV !== 'production') &&\r\n                warn(`Current renderer does not support string target for Teleports. ` +\r\n                    `(missing querySelector renderer option)`);\r\n            return null;\r\n        }\r\n        else {\r\n            const target = select(targetSelector);\r\n            if (!target) {\r\n                (process.env.NODE_ENV !== 'production') &&\r\n                    warn(`Failed to locate Teleport target with selector \"${targetSelector}\". ` +\r\n                        `Note the target element must exist before the component is mounted - ` +\r\n                        `i.e. the target cannot be rendered by the component itself, and ` +\r\n                        `ideally should be outside of the entire Vue component tree.`);\r\n            }\r\n            return target;\r\n        }\r\n    }\r\n    else {\r\n        if ((process.env.NODE_ENV !== 'production') && !targetSelector && !isTeleportDisabled(props)) {\r\n            warn(`Invalid Teleport target: ${targetSelector}`);\r\n        }\r\n        return targetSelector;\r\n    }\r\n};\r\nconst TeleportImpl = {\r\n    __isTeleport: true,\r\n    process(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, internals) {\r\n        const { mc: mountChildren, pc: patchChildren, pbc: patchBlockChildren, o: { insert, querySelector, createText, createComment } } = internals;\r\n        const disabled = isTeleportDisabled(n2.props);\r\n        const { shapeFlag, children } = n2;\r\n        // #3302\r\n        // HMR updated, force full diff\r\n        if ((process.env.NODE_ENV !== 'production') && isHmrUpdating) {\r\n            optimized = false;\r\n            n2.dynamicChildren = null;\r\n        }\r\n        if (n1 == null) {\r\n            // insert anchors in the main view\r\n            const placeholder = (n2.el = (process.env.NODE_ENV !== 'production')\r\n                ? createComment('teleport start')\r\n                : createText(''));\r\n            const mainAnchor = (n2.anchor = (process.env.NODE_ENV !== 'production')\r\n                ? createComment('teleport end')\r\n                : createText(''));\r\n            insert(placeholder, container, anchor);\r\n            insert(mainAnchor, container, anchor);\r\n            const target = (n2.target = resolveTarget(n2.props, querySelector));\r\n            const targetAnchor = (n2.targetAnchor = createText(''));\r\n            if (target) {\r\n                insert(targetAnchor, target);\r\n                // #2652 we could be teleporting from a non-SVG tree into an SVG tree\r\n                isSVG = isSVG || isTargetSVG(target);\r\n            }\r\n            else if ((process.env.NODE_ENV !== 'production') && !disabled) {\r\n                warn('Invalid Teleport target on mount:', target, `(${typeof target})`);\r\n            }\r\n            const mount = (container, anchor) => {\r\n                // Teleport *always* has Array children. This is enforced in both the\r\n                // compiler and vnode children normalization.\r\n                if (shapeFlag & 16 /* ARRAY_CHILDREN */) {\r\n                    mountChildren(children, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);\r\n                }\r\n            };\r\n            if (disabled) {\r\n                mount(container, mainAnchor);\r\n            }\r\n            else if (target) {\r\n                mount(target, targetAnchor);\r\n            }\r\n        }\r\n        else {\r\n            // update content\r\n            n2.el = n1.el;\r\n            const mainAnchor = (n2.anchor = n1.anchor);\r\n            const target = (n2.target = n1.target);\r\n            const targetAnchor = (n2.targetAnchor = n1.targetAnchor);\r\n            const wasDisabled = isTeleportDisabled(n1.props);\r\n            const currentContainer = wasDisabled ? container : target;\r\n            const currentAnchor = wasDisabled ? mainAnchor : targetAnchor;\r\n            isSVG = isSVG || isTargetSVG(target);\r\n            if (n2.dynamicChildren) {\r\n                // fast path when the teleport happens to be a block root\r\n                patchBlockChildren(n1.dynamicChildren, n2.dynamicChildren, currentContainer, parentComponent, parentSuspense, isSVG, slotScopeIds);\r\n                // even in block tree mode we need to make sure all root-level nodes\r\n                // in the teleport inherit previous DOM references so that they can\r\n                // be moved in future patches.\r\n                traverseStaticChildren(n1, n2, true);\r\n            }\r\n            else if (!optimized) {\r\n                patchChildren(n1, n2, currentContainer, currentAnchor, parentComponent, parentSuspense, isSVG, slotScopeIds, false);\r\n            }\r\n            if (disabled) {\r\n                if (!wasDisabled) {\r\n                    // enabled -> disabled\r\n                    // move into main container\r\n                    moveTeleport(n2, container, mainAnchor, internals, 1 /* TOGGLE */);\r\n                }\r\n            }\r\n            else {\r\n                // target changed\r\n                if ((n2.props && n2.props.to) !== (n1.props && n1.props.to)) {\r\n                    const nextTarget = (n2.target = resolveTarget(n2.props, querySelector));\r\n                    if (nextTarget) {\r\n                        moveTeleport(n2, nextTarget, null, internals, 0 /* TARGET_CHANGE */);\r\n                    }\r\n                    else if ((process.env.NODE_ENV !== 'production')) {\r\n                        warn('Invalid Teleport target on update:', target, `(${typeof target})`);\r\n                    }\r\n                }\r\n                else if (wasDisabled) {\r\n                    // disabled -> enabled\r\n                    // move into teleport target\r\n                    moveTeleport(n2, target, targetAnchor, internals, 1 /* TOGGLE */);\r\n                }\r\n            }\r\n        }\r\n    },\r\n    remove(vnode, parentComponent, parentSuspense, optimized, { um: unmount, o: { remove: hostRemove } }, doRemove) {\r\n        const { shapeFlag, children, anchor, targetAnchor, target, props } = vnode;\r\n        if (target) {\r\n            hostRemove(targetAnchor);\r\n        }\r\n        // an unmounted teleport should always remove its children if not disabled\r\n        if (doRemove || !isTeleportDisabled(props)) {\r\n            hostRemove(anchor);\r\n            if (shapeFlag & 16 /* ARRAY_CHILDREN */) {\r\n                for (let i = 0; i < children.length; i++) {\r\n                    unmount(children[i], parentComponent, parentSuspense, true, optimized);\r\n                }\r\n            }\r\n        }\r\n    },\r\n    move: moveTeleport,\r\n    hydrate: hydrateTeleport\r\n};\r\nfunction moveTeleport(vnode, container, parentAnchor, { o: { insert }, m: move }, moveType = 2 /* REORDER */) {\r\n    // move target anchor if this is a target change.\r\n    if (moveType === 0 /* TARGET_CHANGE */) {\r\n        insert(vnode.targetAnchor, container, parentAnchor);\r\n    }\r\n    const { el, anchor, shapeFlag, children, props } = vnode;\r\n    const isReorder = moveType === 2 /* REORDER */;\r\n    // move main view anchor if this is a re-order.\r\n    if (isReorder) {\r\n        insert(el, container, parentAnchor);\r\n    }\r\n    // if this is a re-order and teleport is enabled (content is in target)\r\n    // do not move children. So the opposite is: only move children if this\r\n    // is not a reorder, or the teleport is disabled\r\n    if (!isReorder || isTeleportDisabled(props)) {\r\n        // Teleport has either Array children or no children.\r\n        if (shapeFlag & 16 /* ARRAY_CHILDREN */) {\r\n            for (let i = 0; i < children.length; i++) {\r\n                move(children[i], container, parentAnchor, 2 /* REORDER */);\r\n            }\r\n        }\r\n    }\r\n    // move main view anchor if this is a re-order.\r\n    if (isReorder) {\r\n        insert(anchor, container, parentAnchor);\r\n    }\r\n}\r\nfunction hydrateTeleport(node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized, { o: { nextSibling, parentNode, querySelector } }, hydrateChildren) {\r\n    const target = (vnode.target = resolveTarget(vnode.props, querySelector));\r\n    if (target) {\r\n        // if multiple teleports rendered to the same target element, we need to\r\n        // pick up from where the last teleport finished instead of the first node\r\n        const targetNode = target._lpa || target.firstChild;\r\n        if (vnode.shapeFlag & 16 /* ARRAY_CHILDREN */) {\r\n            if (isTeleportDisabled(vnode.props)) {\r\n                vnode.anchor = hydrateChildren(nextSibling(node), vnode, parentNode(node), parentComponent, parentSuspense, slotScopeIds, optimized);\r\n                vnode.targetAnchor = targetNode;\r\n            }\r\n            else {\r\n                vnode.anchor = nextSibling(node);\r\n                vnode.targetAnchor = hydrateChildren(targetNode, vnode, target, parentComponent, parentSuspense, slotScopeIds, optimized);\r\n            }\r\n            target._lpa =\r\n                vnode.targetAnchor && nextSibling(vnode.targetAnchor);\r\n        }\r\n    }\r\n    return vnode.anchor && nextSibling(vnode.anchor);\r\n}\r\n// Force-casted public typing for h and TSX props inference\r\nconst Teleport = TeleportImpl;\n\nconst COMPONENTS = 'components';\r\nconst DIRECTIVES = 'directives';\r\n/**\r\n * @private\r\n */\r\nfunction resolveComponent(name, maybeSelfReference) {\r\n    return resolveAsset(COMPONENTS, name, true, maybeSelfReference) || name;\r\n}\r\nconst NULL_DYNAMIC_COMPONENT = Symbol();\r\n/**\r\n * @private\r\n */\r\nfunction resolveDynamicComponent(component) {\r\n    if (isString(component)) {\r\n        return resolveAsset(COMPONENTS, component, false) || component;\r\n    }\r\n    else {\r\n        // invalid types will fallthrough to createVNode and raise warning\r\n        return (component || NULL_DYNAMIC_COMPONENT);\r\n    }\r\n}\r\n/**\r\n * @private\r\n */\r\nfunction resolveDirective(name) {\r\n    return resolveAsset(DIRECTIVES, name);\r\n}\r\n// implementation\r\nfunction resolveAsset(type, name, warnMissing = true, maybeSelfReference = false) {\r\n    const instance = currentRenderingInstance || currentInstance;\r\n    if (instance) {\r\n        const Component = instance.type;\r\n        // explicit self name has highest priority\r\n        if (type === COMPONENTS) {\r\n            const selfName = getComponentName(Component);\r\n            if (selfName &&\r\n                (selfName === name ||\r\n                    selfName === camelize(name) ||\r\n                    selfName === capitalize(camelize(name)))) {\r\n                return Component;\r\n            }\r\n        }\r\n        const res = \r\n        // local registration\r\n        // check instance[type] first for components with mixin or extends.\r\n        resolve(instance[type] || Component[type], name) ||\r\n            // global registration\r\n            resolve(instance.appContext[type], name);\r\n        if (!res && maybeSelfReference) {\r\n            // fallback to implicit self-reference\r\n            return Component;\r\n        }\r\n        if ((process.env.NODE_ENV !== 'production') && warnMissing && !res) {\r\n            warn(`Failed to resolve ${type.slice(0, -1)}: ${name}`);\r\n        }\r\n        return res;\r\n    }\r\n    else if ((process.env.NODE_ENV !== 'production')) {\r\n        warn(`resolve${capitalize(type.slice(0, -1))} ` +\r\n            `can only be used in render() or setup().`);\r\n    }\r\n}\r\nfunction resolve(registry, name) {\r\n    return (registry &&\r\n        (registry[name] ||\r\n            registry[camelize(name)] ||\r\n            registry[capitalize(camelize(name))]));\r\n}\n\nconst Fragment = Symbol((process.env.NODE_ENV !== 'production') ? 'Fragment' : undefined);\r\nconst Text = Symbol((process.env.NODE_ENV !== 'production') ? 'Text' : undefined);\r\nconst Comment = Symbol((process.env.NODE_ENV !== 'production') ? 'Comment' : undefined);\r\nconst Static = Symbol((process.env.NODE_ENV !== 'production') ? 'Static' : undefined);\r\n// Since v-if and v-for are the two possible ways node structure can dynamically\r\n// change, once we consider v-if branches and each v-for fragment a block, we\r\n// can divide a template into nested blocks, and within each block the node\r\n// structure would be stable. This allows us to skip most children diffing\r\n// and only worry about the dynamic nodes (indicated by patch flags).\r\nconst blockStack = [];\r\nlet currentBlock = null;\r\n/**\r\n * Open a block.\r\n * This must be called before `createBlock`. It cannot be part of `createBlock`\r\n * because the children of the block are evaluated before `createBlock` itself\r\n * is called. The generated code typically looks like this:\r\n *\r\n * ```js\r\n * function render() {\r\n *   return (openBlock(),createBlock('div', null, [...]))\r\n * }\r\n * ```\r\n * disableTracking is true when creating a v-for fragment block, since a v-for\r\n * fragment always diffs its children.\r\n *\r\n * @private\r\n */\r\nfunction openBlock(disableTracking = false) {\r\n    blockStack.push((currentBlock = disableTracking ? null : []));\r\n}\r\nfunction closeBlock() {\r\n    blockStack.pop();\r\n    currentBlock = blockStack[blockStack.length - 1] || null;\r\n}\r\n// Whether we should be tracking dynamic child nodes inside a block.\r\n// Only tracks when this value is > 0\r\n// We are not using a simple boolean because this value may need to be\r\n// incremented/decremented by nested usage of v-once (see below)\r\nlet shouldTrack = 1;\r\n/**\r\n * Block tracking sometimes needs to be disabled, for example during the\r\n * creation of a tree that needs to be cached by v-once. The compiler generates\r\n * code like this:\r\n *\r\n * ``` js\r\n * _cache[1] || (\r\n *   setBlockTracking(-1),\r\n *   _cache[1] = createVNode(...),\r\n *   setBlockTracking(1),\r\n *   _cache[1]\r\n * )\r\n * ```\r\n *\r\n * @private\r\n */\r\nfunction setBlockTracking(value) {\r\n    shouldTrack += value;\r\n}\r\n/**\r\n * Create a block root vnode. Takes the same exact arguments as `createVNode`.\r\n * A block root keeps track of dynamic nodes within the block in the\r\n * `dynamicChildren` array.\r\n *\r\n * @private\r\n */\r\nfunction createBlock(type, props, children, patchFlag, dynamicProps) {\r\n    const vnode = createVNode(type, props, children, patchFlag, dynamicProps, true /* isBlock: prevent a block from tracking itself */);\r\n    // save current block children on the block vnode\r\n    vnode.dynamicChildren = currentBlock || EMPTY_ARR;\r\n    // close block\r\n    closeBlock();\r\n    // a block is always going to be patched, so track it as a child of its\r\n    // parent block\r\n    if (shouldTrack > 0 && currentBlock) {\r\n        currentBlock.push(vnode);\r\n    }\r\n    return vnode;\r\n}\r\nfunction isVNode(value) {\r\n    return value ? value.__v_isVNode === true : false;\r\n}\r\nfunction isSameVNodeType(n1, n2) {\r\n    if ((process.env.NODE_ENV !== 'production') &&\r\n        n2.shapeFlag & 6 /* COMPONENT */ &&\r\n        hmrDirtyComponents.has(n2.type)) {\r\n        // HMR only: if the component has been hot-updated, force a reload.\r\n        return false;\r\n    }\r\n    return n1.type === n2.type && n1.key === n2.key;\r\n}\r\nlet vnodeArgsTransformer;\r\n/**\r\n * Internal API for registering an arguments transform for createVNode\r\n * used for creating stubs in the test-utils\r\n * It is *internal* but needs to be exposed for test-utils to pick up proper\r\n * typings\r\n */\r\nfunction transformVNodeArgs(transformer) {\r\n    vnodeArgsTransformer = transformer;\r\n}\r\nconst createVNodeWithArgsTransform = (...args) => {\r\n    return _createVNode(...(vnodeArgsTransformer\r\n        ? vnodeArgsTransformer(args, currentRenderingInstance)\r\n        : args));\r\n};\r\nconst InternalObjectKey = `__vInternal`;\r\nconst normalizeKey = ({ key }) => key != null ? key : null;\r\nconst normalizeRef = ({ ref }) => {\r\n    return (ref != null\r\n        ? isString(ref) || isRef(ref) || isFunction(ref)\r\n            ? { i: currentRenderingInstance, r: ref }\r\n            : ref\r\n        : null);\r\n};\r\nconst createVNode = ((process.env.NODE_ENV !== 'production')\r\n    ? createVNodeWithArgsTransform\r\n    : _createVNode);\r\nfunction _createVNode(type, props = null, children = null, patchFlag = 0, dynamicProps = null, isBlockNode = false) {\r\n    if (!type || type === NULL_DYNAMIC_COMPONENT) {\r\n        if ((process.env.NODE_ENV !== 'production') && !type) {\r\n            warn(`Invalid vnode type when creating vnode: ${type}.`);\r\n        }\r\n        type = Comment;\r\n    }\r\n    if (isVNode(type)) {\r\n        // createVNode receiving an existing vnode. This happens in cases like\r\n        // <component :is=\"vnode\"/>\r\n        // #2078 make sure to merge refs during the clone instead of overwriting it\r\n        const cloned = cloneVNode(type, props, true /* mergeRef: true */);\r\n        if (children) {\r\n            normalizeChildren(cloned, children);\r\n        }\r\n        return cloned;\r\n    }\r\n    // class component normalization.\r\n    if (isClassComponent(type)) {\r\n        type = type.__vccOpts;\r\n    }\r\n    // class & style normalization.\r\n    if (props) {\r\n        // for reactive or proxy objects, we need to clone it to enable mutation.\r\n        if (isProxy(props) || InternalObjectKey in props) {\r\n            props = extend({}, props);\r\n        }\r\n        let { class: klass, style } = props;\r\n        if (klass && !isString(klass)) {\r\n            props.class = normalizeClass(klass);\r\n        }\r\n        if (isObject(style)) {\r\n            // reactive state objects need to be cloned since they are likely to be\r\n            // mutated\r\n            if (isProxy(style) && !isArray(style)) {\r\n                style = extend({}, style);\r\n            }\r\n            props.style = normalizeStyle(style);\r\n        }\r\n    }\r\n    // encode the vnode type information into a bitmap\r\n    const shapeFlag = isString(type)\r\n        ? 1 /* ELEMENT */\r\n        : isSuspense(type)\r\n            ? 128 /* SUSPENSE */\r\n            : isTeleport(type)\r\n                ? 64 /* TELEPORT */\r\n                : isObject(type)\r\n                    ? 4 /* STATEFUL_COMPONENT */\r\n                    : isFunction(type)\r\n                        ? 2 /* FUNCTIONAL_COMPONENT */\r\n                        : 0;\r\n    if ((process.env.NODE_ENV !== 'production') && shapeFlag & 4 /* STATEFUL_COMPONENT */ && isProxy(type)) {\r\n        type = toRaw(type);\r\n        warn(`Vue received a Component which was made a reactive object. This can ` +\r\n            `lead to unnecessary performance overhead, and should be avoided by ` +\r\n            `marking the component with \\`markRaw\\` or using \\`shallowRef\\` ` +\r\n            `instead of \\`ref\\`.`, `\\nComponent that was made reactive: `, type);\r\n    }\r\n    const vnode = {\r\n        __v_isVNode: true,\r\n        [\"__v_skip\" /* SKIP */]: true,\r\n        type,\r\n        props,\r\n        key: props && normalizeKey(props),\r\n        ref: props && normalizeRef(props),\r\n        scopeId: currentScopeId,\r\n        slotScopeIds: null,\r\n        children: null,\r\n        component: null,\r\n        suspense: null,\r\n        ssContent: null,\r\n        ssFallback: null,\r\n        dirs: null,\r\n        transition: null,\r\n        el: null,\r\n        anchor: null,\r\n        target: null,\r\n        targetAnchor: null,\r\n        staticCount: 0,\r\n        shapeFlag,\r\n        patchFlag,\r\n        dynamicProps,\r\n        dynamicChildren: null,\r\n        appContext: null\r\n    };\r\n    // validate key\r\n    if ((process.env.NODE_ENV !== 'production') && vnode.key !== vnode.key) {\r\n        warn(`VNode created with invalid key (NaN). VNode type:`, vnode.type);\r\n    }\r\n    normalizeChildren(vnode, children);\r\n    // normalize suspense children\r\n    if (shapeFlag & 128 /* SUSPENSE */) {\r\n        const { content, fallback } = normalizeSuspenseChildren(vnode);\r\n        vnode.ssContent = content;\r\n        vnode.ssFallback = fallback;\r\n    }\r\n    if (shouldTrack > 0 &&\r\n        // avoid a block node from tracking itself\r\n        !isBlockNode &&\r\n        // has current parent block\r\n        currentBlock &&\r\n        // presence of a patch flag indicates this node needs patching on updates.\r\n        // component nodes also should always be patched, because even if the\r\n        // component doesn't need to update, it needs to persist the instance on to\r\n        // the next vnode so that it can be properly unmounted later.\r\n        (patchFlag > 0 || shapeFlag & 6 /* COMPONENT */) &&\r\n        // the EVENTS flag is only for hydration and if it is the only flag, the\r\n        // vnode should not be considered dynamic due to handler caching.\r\n        patchFlag !== 32 /* HYDRATE_EVENTS */) {\r\n        currentBlock.push(vnode);\r\n    }\r\n    return vnode;\r\n}\r\nfunction cloneVNode(vnode, extraProps, mergeRef = false) {\r\n    // This is intentionally NOT using spread or extend to avoid the runtime\r\n    // key enumeration cost.\r\n    const { props, ref, patchFlag, children } = vnode;\r\n    const mergedProps = extraProps ? mergeProps(props || {}, extraProps) : props;\r\n    return {\r\n        __v_isVNode: true,\r\n        [\"__v_skip\" /* SKIP */]: true,\r\n        type: vnode.type,\r\n        props: mergedProps,\r\n        key: mergedProps && normalizeKey(mergedProps),\r\n        ref: extraProps && extraProps.ref\r\n            ? // #2078 in the case of <component :is=\"vnode\" ref=\"extra\"/>\r\n                // if the vnode itself already has a ref, cloneVNode will need to merge\r\n                // the refs so the single vnode can be set on multiple refs\r\n                mergeRef && ref\r\n                    ? isArray(ref)\r\n                        ? ref.concat(normalizeRef(extraProps))\r\n                        : [ref, normalizeRef(extraProps)]\r\n                    : normalizeRef(extraProps)\r\n            : ref,\r\n        scopeId: vnode.scopeId,\r\n        slotScopeIds: vnode.slotScopeIds,\r\n        children: (process.env.NODE_ENV !== 'production') && patchFlag === -1 /* HOISTED */ && isArray(children)\r\n            ? children.map(deepCloneVNode)\r\n            : children,\r\n        target: vnode.target,\r\n        targetAnchor: vnode.targetAnchor,\r\n        staticCount: vnode.staticCount,\r\n        shapeFlag: vnode.shapeFlag,\r\n        // if the vnode is cloned with extra props, we can no longer assume its\r\n        // existing patch flag to be reliable and need to add the FULL_PROPS flag.\r\n        // note: perserve flag for fragments since they use the flag for children\r\n        // fast paths only.\r\n        patchFlag: extraProps && vnode.type !== Fragment\r\n            ? patchFlag === -1 // hoisted node\r\n                ? 16 /* FULL_PROPS */\r\n                : patchFlag | 16 /* FULL_PROPS */\r\n            : patchFlag,\r\n        dynamicProps: vnode.dynamicProps,\r\n        dynamicChildren: vnode.dynamicChildren,\r\n        appContext: vnode.appContext,\r\n        dirs: vnode.dirs,\r\n        transition: vnode.transition,\r\n        // These should technically only be non-null on mounted VNodes. However,\r\n        // they *should* be copied for kept-alive vnodes. So we just always copy\r\n        // them since them being non-null during a mount doesn't affect the logic as\r\n        // they will simply be overwritten.\r\n        component: vnode.component,\r\n        suspense: vnode.suspense,\r\n        ssContent: vnode.ssContent && cloneVNode(vnode.ssContent),\r\n        ssFallback: vnode.ssFallback && cloneVNode(vnode.ssFallback),\r\n        el: vnode.el,\r\n        anchor: vnode.anchor\r\n    };\r\n}\r\n/**\r\n * Dev only, for HMR of hoisted vnodes reused in v-for\r\n * https://github.com/vitejs/vite/issues/2022\r\n */\r\nfunction deepCloneVNode(vnode) {\r\n    const cloned = cloneVNode(vnode);\r\n    if (isArray(vnode.children)) {\r\n        cloned.children = vnode.children.map(deepCloneVNode);\r\n    }\r\n    return cloned;\r\n}\r\n/**\r\n * @private\r\n */\r\nfunction createTextVNode(text = ' ', flag = 0) {\r\n    return createVNode(Text, null, text, flag);\r\n}\r\n/**\r\n * @private\r\n */\r\nfunction createStaticVNode(content, numberOfNodes) {\r\n    // A static vnode can contain multiple stringified elements, and the number\r\n    // of elements is necessary for hydration.\r\n    const vnode = createVNode(Static, null, content);\r\n    vnode.staticCount = numberOfNodes;\r\n    return vnode;\r\n}\r\n/**\r\n * @private\r\n */\r\nfunction createCommentVNode(text = '', \r\n// when used as the v-else branch, the comment node must be created as a\r\n// block to ensure correct updates.\r\nasBlock = false) {\r\n    return asBlock\r\n        ? (openBlock(), createBlock(Comment, null, text))\r\n        : createVNode(Comment, null, text);\r\n}\r\nfunction normalizeVNode(child) {\r\n    if (child == null || typeof child === 'boolean') {\r\n        // empty placeholder\r\n        return createVNode(Comment);\r\n    }\r\n    else if (isArray(child)) {\r\n        // fragment\r\n        return createVNode(Fragment, null, child);\r\n    }\r\n    else if (typeof child === 'object') {\r\n        // already vnode, this should be the most common since compiled templates\r\n        // always produce all-vnode children arrays\r\n        return child.el === null ? child : cloneVNode(child);\r\n    }\r\n    else {\r\n        // strings and numbers\r\n        return createVNode(Text, null, String(child));\r\n    }\r\n}\r\n// optimized normalization for template-compiled render fns\r\nfunction cloneIfMounted(child) {\r\n    return child.el === null ? child : cloneVNode(child);\r\n}\r\nfunction normalizeChildren(vnode, children) {\r\n    let type = 0;\r\n    const { shapeFlag } = vnode;\r\n    if (children == null) {\r\n        children = null;\r\n    }\r\n    else if (isArray(children)) {\r\n        type = 16 /* ARRAY_CHILDREN */;\r\n    }\r\n    else if (typeof children === 'object') {\r\n        if (shapeFlag & 1 /* ELEMENT */ || shapeFlag & 64 /* TELEPORT */) {\r\n            // Normalize slot to plain children for plain element and Teleport\r\n            const slot = children.default;\r\n            if (slot) {\r\n                // _c marker is added by withCtx() indicating this is a compiled slot\r\n                slot._c && setCompiledSlotRendering(1);\r\n                normalizeChildren(vnode, slot());\r\n                slot._c && setCompiledSlotRendering(-1);\r\n            }\r\n            return;\r\n        }\r\n        else {\r\n            type = 32 /* SLOTS_CHILDREN */;\r\n            const slotFlag = children._;\r\n            if (!slotFlag && !(InternalObjectKey in children)) {\r\n                children._ctx = currentRenderingInstance;\r\n            }\r\n            else if (slotFlag === 3 /* FORWARDED */ && currentRenderingInstance) {\r\n                // a child component receives forwarded slots from the parent.\r\n                // its slot type is determined by its parent's slot type.\r\n                if (currentRenderingInstance.vnode.patchFlag & 1024 /* DYNAMIC_SLOTS */) {\r\n                    children._ = 2 /* DYNAMIC */;\r\n                    vnode.patchFlag |= 1024 /* DYNAMIC_SLOTS */;\r\n                }\r\n                else {\r\n                    children._ = 1 /* STABLE */;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    else if (isFunction(children)) {\r\n        children = { default: children, _ctx: currentRenderingInstance };\r\n        type = 32 /* SLOTS_CHILDREN */;\r\n    }\r\n    else {\r\n        children = String(children);\r\n        // force teleport children to array so it can be moved around\r\n        if (shapeFlag & 64 /* TELEPORT */) {\r\n            type = 16 /* ARRAY_CHILDREN */;\r\n            children = [createTextVNode(children)];\r\n        }\r\n        else {\r\n            type = 8 /* TEXT_CHILDREN */;\r\n        }\r\n    }\r\n    vnode.children = children;\r\n    vnode.shapeFlag |= type;\r\n}\r\nfunction mergeProps(...args) {\r\n    const ret = extend({}, args[0]);\r\n    for (let i = 1; i < args.length; i++) {\r\n        const toMerge = args[i];\r\n        for (const key in toMerge) {\r\n            if (key === 'class') {\r\n                if (ret.class !== toMerge.class) {\r\n                    ret.class = normalizeClass([ret.class, toMerge.class]);\r\n                }\r\n            }\r\n            else if (key === 'style') {\r\n                ret.style = normalizeStyle([ret.style, toMerge.style]);\r\n            }\r\n            else if (isOn(key)) {\r\n                const existing = ret[key];\r\n                const incoming = toMerge[key];\r\n                if (existing !== incoming) {\r\n                    ret[key] = existing\r\n                        ? [].concat(existing, toMerge[key])\r\n                        : incoming;\r\n                }\r\n            }\r\n            else if (key !== '') {\r\n                ret[key] = toMerge[key];\r\n            }\r\n        }\r\n    }\r\n    return ret;\r\n}\n\nfunction provide(key, value) {\r\n    if (!currentInstance) {\r\n        if ((process.env.NODE_ENV !== 'production')) {\r\n            warn(`provide() can only be used inside setup().`);\r\n        }\r\n    }\r\n    else {\r\n        let provides = currentInstance.provides;\r\n        // by default an instance inherits its parent's provides object\r\n        // but when it needs to provide values of its own, it creates its\r\n        // own provides object using parent provides object as prototype.\r\n        // this way in `inject` we can simply look up injections from direct\r\n        // parent and let the prototype chain do the work.\r\n        const parentProvides = currentInstance.parent && currentInstance.parent.provides;\r\n        if (parentProvides === provides) {\r\n            provides = currentInstance.provides = Object.create(parentProvides);\r\n        }\r\n        // TS doesn't allow symbol as index type\r\n        provides[key] = value;\r\n    }\r\n}\r\nfunction inject(key, defaultValue, treatDefaultAsFactory = false) {\r\n    // fallback to `currentRenderingInstance` so that this can be called in\r\n    // a functional component\r\n    const instance = currentInstance || currentRenderingInstance;\r\n    if (instance) {\r\n        // #2400\r\n        // to support `app.use` plugins,\r\n        // fallback to appContext's `provides` if the intance is at root\r\n        const provides = instance.parent == null\r\n            ? instance.vnode.appContext && instance.vnode.appContext.provides\r\n            : instance.parent.provides;\r\n        if (provides && key in provides) {\r\n            // TS doesn't allow symbol as index type\r\n            return provides[key];\r\n        }\r\n        else if (arguments.length > 1) {\r\n            return treatDefaultAsFactory && isFunction(defaultValue)\r\n                ? defaultValue()\r\n                : defaultValue;\r\n        }\r\n        else if ((process.env.NODE_ENV !== 'production')) {\r\n            warn(`injection \"${String(key)}\" not found.`);\r\n        }\r\n    }\r\n    else if ((process.env.NODE_ENV !== 'production')) {\r\n        warn(`inject() can only be used inside setup() or functional components.`);\r\n    }\r\n}\n\nfunction createDuplicateChecker() {\r\n    const cache = Object.create(null);\r\n    return (type, key) => {\r\n        if (cache[key]) {\r\n            warn(`${type} property \"${key}\" is already defined in ${cache[key]}.`);\r\n        }\r\n        else {\r\n            cache[key] = type;\r\n        }\r\n    };\r\n}\r\nlet shouldCacheAccess = true;\r\nfunction applyOptions(instance, options, deferredData = [], deferredWatch = [], deferredProvide = [], asMixin = false) {\r\n    const { \r\n    // composition\r\n    mixins, extends: extendsOptions, \r\n    // state\r\n    data: dataOptions, computed: computedOptions, methods, watch: watchOptions, provide: provideOptions, inject: injectOptions, \r\n    // assets\r\n    components, directives, \r\n    // lifecycle\r\n    beforeMount, mounted, beforeUpdate, updated, activated, deactivated, beforeDestroy, beforeUnmount, destroyed, unmounted, render, renderTracked, renderTriggered, errorCaptured, \r\n    // public API\r\n    expose } = options;\r\n    const publicThis = instance.proxy;\r\n    const ctx = instance.ctx;\r\n    const globalMixins = instance.appContext.mixins;\r\n    if (asMixin && render && instance.render === NOOP) {\r\n        instance.render = render;\r\n    }\r\n    // applyOptions is called non-as-mixin once per instance\r\n    if (!asMixin) {\r\n        shouldCacheAccess = false;\r\n        callSyncHook('beforeCreate', \"bc\" /* BEFORE_CREATE */, options, instance, globalMixins);\r\n        shouldCacheAccess = true;\r\n        // global mixins are applied first\r\n        applyMixins(instance, globalMixins, deferredData, deferredWatch, deferredProvide);\r\n    }\r\n    // extending a base component...\r\n    if (extendsOptions) {\r\n        applyOptions(instance, extendsOptions, deferredData, deferredWatch, deferredProvide, true);\r\n    }\r\n    // local mixins\r\n    if (mixins) {\r\n        applyMixins(instance, mixins, deferredData, deferredWatch, deferredProvide);\r\n    }\r\n    const checkDuplicateProperties = (process.env.NODE_ENV !== 'production') ? createDuplicateChecker() : null;\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        const [propsOptions] = instance.propsOptions;\r\n        if (propsOptions) {\r\n            for (const key in propsOptions) {\r\n                checkDuplicateProperties(\"Props\" /* PROPS */, key);\r\n            }\r\n        }\r\n    }\r\n    // options initialization order (to be consistent with Vue 2):\r\n    // - props (already done outside of this function)\r\n    // - inject\r\n    // - methods\r\n    // - data (deferred since it relies on `this` access)\r\n    // - computed\r\n    // - watch (deferred since it relies on `this` access)\r\n    if (injectOptions) {\r\n        if (isArray(injectOptions)) {\r\n            for (let i = 0; i < injectOptions.length; i++) {\r\n                const key = injectOptions[i];\r\n                ctx[key] = inject(key);\r\n                if ((process.env.NODE_ENV !== 'production')) {\r\n                    checkDuplicateProperties(\"Inject\" /* INJECT */, key);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            for (const key in injectOptions) {\r\n                const opt = injectOptions[key];\r\n                if (isObject(opt)) {\r\n                    ctx[key] = inject(opt.from || key, opt.default, true /* treat default function as factory */);\r\n                }\r\n                else {\r\n                    ctx[key] = inject(opt);\r\n                }\r\n                if ((process.env.NODE_ENV !== 'production')) {\r\n                    checkDuplicateProperties(\"Inject\" /* INJECT */, key);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (methods) {\r\n        for (const key in methods) {\r\n            const methodHandler = methods[key];\r\n            if (isFunction(methodHandler)) {\r\n                // In dev mode, we use the `createRenderContext` function to define methods to the proxy target,\r\n                // and those are read-only but reconfigurable, so it needs to be redefined here\r\n                if ((process.env.NODE_ENV !== 'production')) {\r\n                    Object.defineProperty(ctx, key, {\r\n                        value: methodHandler.bind(publicThis),\r\n                        configurable: true,\r\n                        enumerable: true,\r\n                        writable: true\r\n                    });\r\n                }\r\n                else {\r\n                    ctx[key] = methodHandler.bind(publicThis);\r\n                }\r\n                if ((process.env.NODE_ENV !== 'production')) {\r\n                    checkDuplicateProperties(\"Methods\" /* METHODS */, key);\r\n                }\r\n            }\r\n            else if ((process.env.NODE_ENV !== 'production')) {\r\n                warn(`Method \"${key}\" has type \"${typeof methodHandler}\" in the component definition. ` +\r\n                    `Did you reference the function correctly?`);\r\n            }\r\n        }\r\n    }\r\n    if (!asMixin) {\r\n        if (deferredData.length) {\r\n            deferredData.forEach(dataFn => resolveData(instance, dataFn, publicThis));\r\n        }\r\n        if (dataOptions) {\r\n            // @ts-ignore dataOptions is not fully type safe\r\n            resolveData(instance, dataOptions, publicThis);\r\n        }\r\n        if ((process.env.NODE_ENV !== 'production')) {\r\n            const rawData = toRaw(instance.data);\r\n            for (const key in rawData) {\r\n                checkDuplicateProperties(\"Data\" /* DATA */, key);\r\n                // expose data on ctx during dev\r\n                if (key[0] !== '$' && key[0] !== '_') {\r\n                    Object.defineProperty(ctx, key, {\r\n                        configurable: true,\r\n                        enumerable: true,\r\n                        get: () => rawData[key],\r\n                        set: NOOP\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }\r\n    else if (dataOptions) {\r\n        deferredData.push(dataOptions);\r\n    }\r\n    if (computedOptions) {\r\n        for (const key in computedOptions) {\r\n            const opt = computedOptions[key];\r\n            const get = isFunction(opt)\r\n                ? opt.bind(publicThis, publicThis)\r\n                : isFunction(opt.get)\r\n                    ? opt.get.bind(publicThis, publicThis)\r\n                    : NOOP;\r\n            if ((process.env.NODE_ENV !== 'production') && get === NOOP) {\r\n                warn(`Computed property \"${key}\" has no getter.`);\r\n            }\r\n            const set = !isFunction(opt) && isFunction(opt.set)\r\n                ? opt.set.bind(publicThis)\r\n                : (process.env.NODE_ENV !== 'production')\r\n                    ? () => {\r\n                        warn(`Write operation failed: computed property \"${key}\" is readonly.`);\r\n                    }\r\n                    : NOOP;\r\n            const c = computed({\r\n                get,\r\n                set\r\n            });\r\n            Object.defineProperty(ctx, key, {\r\n                enumerable: true,\r\n                configurable: true,\r\n                get: () => c.value,\r\n                set: v => (c.value = v)\r\n            });\r\n            if ((process.env.NODE_ENV !== 'production')) {\r\n                checkDuplicateProperties(\"Computed\" /* COMPUTED */, key);\r\n            }\r\n        }\r\n    }\r\n    if (watchOptions) {\r\n        deferredWatch.push(watchOptions);\r\n    }\r\n    if (!asMixin && deferredWatch.length) {\r\n        deferredWatch.forEach(watchOptions => {\r\n            for (const key in watchOptions) {\r\n                createWatcher(watchOptions[key], ctx, publicThis, key);\r\n            }\r\n        });\r\n    }\r\n    if (provideOptions) {\r\n        deferredProvide.push(provideOptions);\r\n    }\r\n    if (!asMixin && deferredProvide.length) {\r\n        deferredProvide.forEach(provideOptions => {\r\n            const provides = isFunction(provideOptions)\r\n                ? provideOptions.call(publicThis)\r\n                : provideOptions;\r\n            Reflect.ownKeys(provides).forEach(key => {\r\n                provide(key, provides[key]);\r\n            });\r\n        });\r\n    }\r\n    // asset options.\r\n    // To reduce memory usage, only components with mixins or extends will have\r\n    // resolved asset registry attached to instance.\r\n    if (asMixin) {\r\n        if (components) {\r\n            extend(instance.components ||\r\n                (instance.components = extend({}, instance.type.components)), components);\r\n        }\r\n        if (directives) {\r\n            extend(instance.directives ||\r\n                (instance.directives = extend({}, instance.type.directives)), directives);\r\n        }\r\n    }\r\n    // lifecycle options\r\n    if (!asMixin) {\r\n        callSyncHook('created', \"c\" /* CREATED */, options, instance, globalMixins);\r\n    }\r\n    if (beforeMount) {\r\n        onBeforeMount(beforeMount.bind(publicThis));\r\n    }\r\n    if (mounted) {\r\n        onMounted(mounted.bind(publicThis));\r\n    }\r\n    if (beforeUpdate) {\r\n        onBeforeUpdate(beforeUpdate.bind(publicThis));\r\n    }\r\n    if (updated) {\r\n        onUpdated(updated.bind(publicThis));\r\n    }\r\n    if (activated) {\r\n        onActivated(activated.bind(publicThis));\r\n    }\r\n    if (deactivated) {\r\n        onDeactivated(deactivated.bind(publicThis));\r\n    }\r\n    if (errorCaptured) {\r\n        onErrorCaptured(errorCaptured.bind(publicThis));\r\n    }\r\n    if (renderTracked) {\r\n        onRenderTracked(renderTracked.bind(publicThis));\r\n    }\r\n    if (renderTriggered) {\r\n        onRenderTriggered(renderTriggered.bind(publicThis));\r\n    }\r\n    if ((process.env.NODE_ENV !== 'production') && beforeDestroy) {\r\n        warn(`\\`beforeDestroy\\` has been renamed to \\`beforeUnmount\\`.`);\r\n    }\r\n    if (beforeUnmount) {\r\n        onBeforeUnmount(beforeUnmount.bind(publicThis));\r\n    }\r\n    if ((process.env.NODE_ENV !== 'production') && destroyed) {\r\n        warn(`\\`destroyed\\` has been renamed to \\`unmounted\\`.`);\r\n    }\r\n    if (unmounted) {\r\n        onUnmounted(unmounted.bind(publicThis));\r\n    }\r\n    if (isArray(expose)) {\r\n        if (!asMixin) {\r\n            if (expose.length) {\r\n                const exposed = instance.exposed || (instance.exposed = proxyRefs({}));\r\n                expose.forEach(key => {\r\n                    exposed[key] = toRef(publicThis, key);\r\n                });\r\n            }\r\n            else if (!instance.exposed) {\r\n                instance.exposed = EMPTY_OBJ;\r\n            }\r\n        }\r\n        else if ((process.env.NODE_ENV !== 'production')) {\r\n            warn(`The \\`expose\\` option is ignored when used in mixins.`);\r\n        }\r\n    }\r\n}\r\nfunction callSyncHook(name, type, options, instance, globalMixins) {\r\n    for (let i = 0; i < globalMixins.length; i++) {\r\n        callHookWithMixinAndExtends(name, type, globalMixins[i], instance);\r\n    }\r\n    callHookWithMixinAndExtends(name, type, options, instance);\r\n}\r\nfunction callHookWithMixinAndExtends(name, type, options, instance) {\r\n    const { extends: base, mixins } = options;\r\n    const selfHook = options[name];\r\n    if (base) {\r\n        callHookWithMixinAndExtends(name, type, base, instance);\r\n    }\r\n    if (mixins) {\r\n        for (let i = 0; i < mixins.length; i++) {\r\n            callHookWithMixinAndExtends(name, type, mixins[i], instance);\r\n        }\r\n    }\r\n    if (selfHook) {\r\n        callWithAsyncErrorHandling(selfHook.bind(instance.proxy), instance, type);\r\n    }\r\n}\r\nfunction applyMixins(instance, mixins, deferredData, deferredWatch, deferredProvide) {\r\n    for (let i = 0; i < mixins.length; i++) {\r\n        applyOptions(instance, mixins[i], deferredData, deferredWatch, deferredProvide, true);\r\n    }\r\n}\r\nfunction resolveData(instance, dataFn, publicThis) {\r\n    if ((process.env.NODE_ENV !== 'production') && !isFunction(dataFn)) {\r\n        warn(`The data option must be a function. ` +\r\n            `Plain object usage is no longer supported.`);\r\n    }\r\n    shouldCacheAccess = false;\r\n    const data = dataFn.call(publicThis, publicThis);\r\n    shouldCacheAccess = true;\r\n    if ((process.env.NODE_ENV !== 'production') && isPromise(data)) {\r\n        warn(`data() returned a Promise - note data() cannot be async; If you ` +\r\n            `intend to perform data fetching before component renders, use ` +\r\n            `async setup() + <Suspense>.`);\r\n    }\r\n    if (!isObject(data)) {\r\n        (process.env.NODE_ENV !== 'production') && warn(`data() should return an object.`);\r\n    }\r\n    else if (instance.data === EMPTY_OBJ) {\r\n        instance.data = reactive(data);\r\n    }\r\n    else {\r\n        // existing data: this is a mixin or extends.\r\n        extend(instance.data, data);\r\n    }\r\n}\r\nfunction createWatcher(raw, ctx, publicThis, key) {\r\n    const getter = key.includes('.')\r\n        ? createPathGetter(publicThis, key)\r\n        : () => publicThis[key];\r\n    if (isString(raw)) {\r\n        const handler = ctx[raw];\r\n        if (isFunction(handler)) {\r\n            watch(getter, handler);\r\n        }\r\n        else if ((process.env.NODE_ENV !== 'production')) {\r\n            warn(`Invalid watch handler specified by key \"${raw}\"`, handler);\r\n        }\r\n    }\r\n    else if (isFunction(raw)) {\r\n        watch(getter, raw.bind(publicThis));\r\n    }\r\n    else if (isObject(raw)) {\r\n        if (isArray(raw)) {\r\n            raw.forEach(r => createWatcher(r, ctx, publicThis, key));\r\n        }\r\n        else {\r\n            const handler = isFunction(raw.handler)\r\n                ? raw.handler.bind(publicThis)\r\n                : ctx[raw.handler];\r\n            if (isFunction(handler)) {\r\n                watch(getter, handler, raw);\r\n            }\r\n            else if ((process.env.NODE_ENV !== 'production')) {\r\n                warn(`Invalid watch handler specified by key \"${raw.handler}\"`, handler);\r\n            }\r\n        }\r\n    }\r\n    else if ((process.env.NODE_ENV !== 'production')) {\r\n        warn(`Invalid watch option: \"${key}\"`, raw);\r\n    }\r\n}\r\nfunction createPathGetter(ctx, path) {\r\n    const segments = path.split('.');\r\n    return () => {\r\n        let cur = ctx;\r\n        for (let i = 0; i < segments.length && cur; i++) {\r\n            cur = cur[segments[i]];\r\n        }\r\n        return cur;\r\n    };\r\n}\r\nfunction resolveMergedOptions(instance) {\r\n    const raw = instance.type;\r\n    const { __merged, mixins, extends: extendsOptions } = raw;\r\n    if (__merged)\r\n        return __merged;\r\n    const globalMixins = instance.appContext.mixins;\r\n    if (!globalMixins.length && !mixins && !extendsOptions)\r\n        return raw;\r\n    const options = {};\r\n    globalMixins.forEach(m => mergeOptions(options, m, instance));\r\n    mergeOptions(options, raw, instance);\r\n    return (raw.__merged = options);\r\n}\r\nfunction mergeOptions(to, from, instance) {\r\n    const strats = instance.appContext.config.optionMergeStrategies;\r\n    const { mixins, extends: extendsOptions } = from;\r\n    extendsOptions && mergeOptions(to, extendsOptions, instance);\r\n    mixins &&\r\n        mixins.forEach((m) => mergeOptions(to, m, instance));\r\n    for (const key in from) {\r\n        if (strats && hasOwn(strats, key)) {\r\n            to[key] = strats[key](to[key], from[key], instance.proxy, key);\r\n        }\r\n        else {\r\n            to[key] = from[key];\r\n        }\r\n    }\r\n}\n\n/**\r\n * #2437 In Vue 3, functional components do not have a public instance proxy but\r\n * they exist in the internal parent chain. For code that relies on traversing\r\n * public $parent chains, skip functional ones and go to the parent instead.\r\n */\r\nconst getPublicInstance = (i) => {\r\n    if (!i)\r\n        return null;\r\n    if (isStatefulComponent(i))\r\n        return i.exposed ? i.exposed : i.proxy;\r\n    return getPublicInstance(i.parent);\r\n};\r\nconst publicPropertiesMap = extend(Object.create(null), {\r\n    $: i => i,\r\n    $el: i => i.vnode.el,\r\n    $data: i => i.data,\r\n    $props: i => ((process.env.NODE_ENV !== 'production') ? shallowReadonly(i.props) : i.props),\r\n    $attrs: i => ((process.env.NODE_ENV !== 'production') ? shallowReadonly(i.attrs) : i.attrs),\r\n    $slots: i => ((process.env.NODE_ENV !== 'production') ? shallowReadonly(i.slots) : i.slots),\r\n    $refs: i => ((process.env.NODE_ENV !== 'production') ? shallowReadonly(i.refs) : i.refs),\r\n    $parent: i => getPublicInstance(i.parent),\r\n    $root: i => getPublicInstance(i.root),\r\n    $emit: i => i.emit,\r\n    $options: i => (__VUE_OPTIONS_API__ ? resolveMergedOptions(i) : i.type),\r\n    $forceUpdate: i => () => queueJob(i.update),\r\n    $nextTick: i => nextTick.bind(i.proxy),\r\n    $watch: i => (__VUE_OPTIONS_API__ ? instanceWatch.bind(i) : NOOP)\r\n});\r\nconst PublicInstanceProxyHandlers = {\r\n    get({ _: instance }, key) {\r\n        const { ctx, setupState, data, props, accessCache, type, appContext } = instance;\r\n        // let @vue/reactivity know it should never observe Vue public instances.\r\n        if (key === \"__v_skip\" /* SKIP */) {\r\n            return true;\r\n        }\r\n        // for internal formatters to know that this is a Vue instance\r\n        if ((process.env.NODE_ENV !== 'production') && key === '__isVue') {\r\n            return true;\r\n        }\r\n        // data / props / ctx\r\n        // This getter gets called for every property access on the render context\r\n        // during render and is a major hotspot. The most expensive part of this\r\n        // is the multiple hasOwn() calls. It's much faster to do a simple property\r\n        // access on a plain object, so we use an accessCache object (with null\r\n        // prototype) to memoize what access type a key corresponds to.\r\n        let normalizedProps;\r\n        if (key[0] !== '$') {\r\n            const n = accessCache[key];\r\n            if (n !== undefined) {\r\n                switch (n) {\r\n                    case 0 /* SETUP */:\r\n                        return setupState[key];\r\n                    case 1 /* DATA */:\r\n                        return data[key];\r\n                    case 3 /* CONTEXT */:\r\n                        return ctx[key];\r\n                    case 2 /* PROPS */:\r\n                        return props[key];\r\n                    // default: just fallthrough\r\n                }\r\n            }\r\n            else if (setupState !== EMPTY_OBJ && hasOwn(setupState, key)) {\r\n                accessCache[key] = 0 /* SETUP */;\r\n                return setupState[key];\r\n            }\r\n            else if (data !== EMPTY_OBJ && hasOwn(data, key)) {\r\n                accessCache[key] = 1 /* DATA */;\r\n                return data[key];\r\n            }\r\n            else if (\r\n            // only cache other properties when instance has declared (thus stable)\r\n            // props\r\n            (normalizedProps = instance.propsOptions[0]) &&\r\n                hasOwn(normalizedProps, key)) {\r\n                accessCache[key] = 2 /* PROPS */;\r\n                return props[key];\r\n            }\r\n            else if (ctx !== EMPTY_OBJ && hasOwn(ctx, key)) {\r\n                accessCache[key] = 3 /* CONTEXT */;\r\n                return ctx[key];\r\n            }\r\n            else if (!__VUE_OPTIONS_API__ || shouldCacheAccess) {\r\n                accessCache[key] = 4 /* OTHER */;\r\n            }\r\n        }\r\n        const publicGetter = publicPropertiesMap[key];\r\n        let cssModule, globalProperties;\r\n        // public $xxx properties\r\n        if (publicGetter) {\r\n            if (key === '$attrs') {\r\n                track(instance, \"get\" /* GET */, key);\r\n                (process.env.NODE_ENV !== 'production') && markAttrsAccessed();\r\n            }\r\n            return publicGetter(instance);\r\n        }\r\n        else if (\r\n        // css module (injected by vue-loader)\r\n        (cssModule = type.__cssModules) &&\r\n            (cssModule = cssModule[key])) {\r\n            return cssModule;\r\n        }\r\n        else if (ctx !== EMPTY_OBJ && hasOwn(ctx, key)) {\r\n            // user may set custom properties to `this` that start with `$`\r\n            accessCache[key] = 3 /* CONTEXT */;\r\n            return ctx[key];\r\n        }\r\n        else if (\r\n        // global properties\r\n        ((globalProperties = appContext.config.globalProperties),\r\n            hasOwn(globalProperties, key))) {\r\n            return globalProperties[key];\r\n        }\r\n        else if ((process.env.NODE_ENV !== 'production') &&\r\n            currentRenderingInstance &&\r\n            (!isString(key) ||\r\n                // #1091 avoid internal isRef/isVNode checks on component instance leading\r\n                // to infinite warning loop\r\n                key.indexOf('__v') !== 0)) {\r\n            if (data !== EMPTY_OBJ &&\r\n                (key[0] === '$' || key[0] === '_') &&\r\n                hasOwn(data, key)) {\r\n                warn(`Property ${JSON.stringify(key)} must be accessed via $data because it starts with a reserved ` +\r\n                    `character (\"$\" or \"_\") and is not proxied on the render context.`);\r\n            }\r\n            else if (instance === currentRenderingInstance) {\r\n                warn(`Property ${JSON.stringify(key)} was accessed during render ` +\r\n                    `but is not defined on instance.`);\r\n            }\r\n        }\r\n    },\r\n    set({ _: instance }, key, value) {\r\n        const { data, setupState, ctx } = instance;\r\n        if (setupState !== EMPTY_OBJ && hasOwn(setupState, key)) {\r\n            setupState[key] = value;\r\n        }\r\n        else if (data !== EMPTY_OBJ && hasOwn(data, key)) {\r\n            data[key] = value;\r\n        }\r\n        else if (hasOwn(instance.props, key)) {\r\n            (process.env.NODE_ENV !== 'production') &&\r\n                warn(`Attempting to mutate prop \"${key}\". Props are readonly.`, instance);\r\n            return false;\r\n        }\r\n        if (key[0] === '$' && key.slice(1) in instance) {\r\n            (process.env.NODE_ENV !== 'production') &&\r\n                warn(`Attempting to mutate public property \"${key}\". ` +\r\n                    `Properties starting with $ are reserved and readonly.`, instance);\r\n            return false;\r\n        }\r\n        else {\r\n            if ((process.env.NODE_ENV !== 'production') && key in instance.appContext.config.globalProperties) {\r\n                Object.defineProperty(ctx, key, {\r\n                    enumerable: true,\r\n                    configurable: true,\r\n                    value\r\n                });\r\n            }\r\n            else {\r\n                ctx[key] = value;\r\n            }\r\n        }\r\n        return true;\r\n    },\r\n    has({ _: { data, setupState, accessCache, ctx, appContext, propsOptions } }, key) {\r\n        let normalizedProps;\r\n        return (accessCache[key] !== undefined ||\r\n            (data !== EMPTY_OBJ && hasOwn(data, key)) ||\r\n            (setupState !== EMPTY_OBJ && hasOwn(setupState, key)) ||\r\n            ((normalizedProps = propsOptions[0]) && hasOwn(normalizedProps, key)) ||\r\n            hasOwn(ctx, key) ||\r\n            hasOwn(publicPropertiesMap, key) ||\r\n            hasOwn(appContext.config.globalProperties, key));\r\n    }\r\n};\r\nif ((process.env.NODE_ENV !== 'production') && !false) {\r\n    PublicInstanceProxyHandlers.ownKeys = (target) => {\r\n        warn(`Avoid app logic that relies on enumerating keys on a component instance. ` +\r\n            `The keys will be empty in production mode to avoid performance overhead.`);\r\n        return Reflect.ownKeys(target);\r\n    };\r\n}\r\nconst RuntimeCompiledPublicInstanceProxyHandlers = extend({}, PublicInstanceProxyHandlers, {\r\n    get(target, key) {\r\n        // fast path for unscopables when using `with` block\r\n        if (key === Symbol.unscopables) {\r\n            return;\r\n        }\r\n        return PublicInstanceProxyHandlers.get(target, key, target);\r\n    },\r\n    has(_, key) {\r\n        const has = key[0] !== '_' && !isGloballyWhitelisted(key);\r\n        if ((process.env.NODE_ENV !== 'production') && !has && PublicInstanceProxyHandlers.has(_, key)) {\r\n            warn(`Property ${JSON.stringify(key)} should not start with _ which is a reserved prefix for Vue internals.`);\r\n        }\r\n        return has;\r\n    }\r\n});\r\n// In dev mode, the proxy target exposes the same properties as seen on `this`\r\n// for easier console inspection. In prod mode it will be an empty object so\r\n// these properties definitions can be skipped.\r\nfunction createRenderContext(instance) {\r\n    const target = {};\r\n    // expose internal instance for proxy handlers\r\n    Object.defineProperty(target, `_`, {\r\n        configurable: true,\r\n        enumerable: false,\r\n        get: () => instance\r\n    });\r\n    // expose public properties\r\n    Object.keys(publicPropertiesMap).forEach(key => {\r\n        Object.defineProperty(target, key, {\r\n            configurable: true,\r\n            enumerable: false,\r\n            get: () => publicPropertiesMap[key](instance),\r\n            // intercepted by the proxy so no need for implementation,\r\n            // but needed to prevent set errors\r\n            set: NOOP\r\n        });\r\n    });\r\n    // expose global properties\r\n    const { globalProperties } = instance.appContext.config;\r\n    Object.keys(globalProperties).forEach(key => {\r\n        Object.defineProperty(target, key, {\r\n            configurable: true,\r\n            enumerable: false,\r\n            get: () => globalProperties[key],\r\n            set: NOOP\r\n        });\r\n    });\r\n    return target;\r\n}\r\n// dev only\r\nfunction exposePropsOnRenderContext(instance) {\r\n    const { ctx, propsOptions: [propsOptions] } = instance;\r\n    if (propsOptions) {\r\n        Object.keys(propsOptions).forEach(key => {\r\n            Object.defineProperty(ctx, key, {\r\n                enumerable: true,\r\n                configurable: true,\r\n                get: () => instance.props[key],\r\n                set: NOOP\r\n            });\r\n        });\r\n    }\r\n}\r\n// dev only\r\nfunction exposeSetupStateOnRenderContext(instance) {\r\n    const { ctx, setupState } = instance;\r\n    Object.keys(toRaw(setupState)).forEach(key => {\r\n        if (key[0] === '$' || key[0] === '_') {\r\n            warn(`setup() return property ${JSON.stringify(key)} should not start with \"$\" or \"_\" ` +\r\n                `which are reserved prefixes for Vue internals.`);\r\n            return;\r\n        }\r\n        Object.defineProperty(ctx, key, {\r\n            enumerable: true,\r\n            configurable: true,\r\n            get: () => setupState[key],\r\n            set: NOOP\r\n        });\r\n    });\r\n}\n\nconst emptyAppContext = createAppContext();\r\nlet uid$1 = 0;\r\nfunction createComponentInstance(vnode, parent, suspense) {\r\n    const type = vnode.type;\r\n    // inherit parent app context - or - if root, adopt from root vnode\r\n    const appContext = (parent ? parent.appContext : vnode.appContext) || emptyAppContext;\r\n    const instance = {\r\n        uid: uid$1++,\r\n        vnode,\r\n        type,\r\n        parent,\r\n        appContext,\r\n        root: null,\r\n        next: null,\r\n        subTree: null,\r\n        update: null,\r\n        render: null,\r\n        proxy: null,\r\n        exposed: null,\r\n        withProxy: null,\r\n        effects: null,\r\n        provides: parent ? parent.provides : Object.create(appContext.provides),\r\n        accessCache: null,\r\n        renderCache: [],\r\n        // local resovled assets\r\n        components: null,\r\n        directives: null,\r\n        // resolved props and emits options\r\n        propsOptions: normalizePropsOptions(type, appContext),\r\n        emitsOptions: normalizeEmitsOptions(type, appContext),\r\n        // emit\r\n        emit: null,\r\n        emitted: null,\r\n        // props default value\r\n        propsDefaults: EMPTY_OBJ,\r\n        // state\r\n        ctx: EMPTY_OBJ,\r\n        data: EMPTY_OBJ,\r\n        props: EMPTY_OBJ,\r\n        attrs: EMPTY_OBJ,\r\n        slots: EMPTY_OBJ,\r\n        refs: EMPTY_OBJ,\r\n        setupState: EMPTY_OBJ,\r\n        setupContext: null,\r\n        // suspense related\r\n        suspense,\r\n        suspenseId: suspense ? suspense.pendingId : 0,\r\n        asyncDep: null,\r\n        asyncResolved: false,\r\n        // lifecycle hooks\r\n        // not using enums here because it results in computed properties\r\n        isMounted: false,\r\n        isUnmounted: false,\r\n        isDeactivated: false,\r\n        bc: null,\r\n        c: null,\r\n        bm: null,\r\n        m: null,\r\n        bu: null,\r\n        u: null,\r\n        um: null,\r\n        bum: null,\r\n        da: null,\r\n        a: null,\r\n        rtg: null,\r\n        rtc: null,\r\n        ec: null\r\n    };\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        instance.ctx = createRenderContext(instance);\r\n    }\r\n    else {\r\n        instance.ctx = { _: instance };\r\n    }\r\n    instance.root = parent ? parent.root : instance;\r\n    instance.emit = emit.bind(null, instance);\r\n    return instance;\r\n}\r\nlet currentInstance = null;\r\nconst getCurrentInstance = () => currentInstance || currentRenderingInstance;\r\nconst setCurrentInstance = (instance) => {\r\n    currentInstance = instance;\r\n};\r\nconst isBuiltInTag = /*#__PURE__*/ makeMap('slot,component');\r\nfunction validateComponentName(name, config) {\r\n    const appIsNativeTag = config.isNativeTag || NO;\r\n    if (isBuiltInTag(name) || appIsNativeTag(name)) {\r\n        warn('Do not use built-in or reserved HTML elements as component id: ' + name);\r\n    }\r\n}\r\nfunction isStatefulComponent(instance) {\r\n    return instance.vnode.shapeFlag & 4 /* STATEFUL_COMPONENT */;\r\n}\r\nlet isInSSRComponentSetup = false;\r\nfunction setupComponent(instance, isSSR = false) {\r\n    isInSSRComponentSetup = isSSR;\r\n    const { props, children } = instance.vnode;\r\n    const isStateful = isStatefulComponent(instance);\r\n    initProps(instance, props, isStateful, isSSR);\r\n    initSlots(instance, children);\r\n    const setupResult = isStateful\r\n        ? setupStatefulComponent(instance, isSSR)\r\n        : undefined;\r\n    isInSSRComponentSetup = false;\r\n    return setupResult;\r\n}\r\nfunction setupStatefulComponent(instance, isSSR) {\r\n    const Component = instance.type;\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        if (Component.name) {\r\n            validateComponentName(Component.name, instance.appContext.config);\r\n        }\r\n        if (Component.components) {\r\n            const names = Object.keys(Component.components);\r\n            for (let i = 0; i < names.length; i++) {\r\n                validateComponentName(names[i], instance.appContext.config);\r\n            }\r\n        }\r\n        if (Component.directives) {\r\n            const names = Object.keys(Component.directives);\r\n            for (let i = 0; i < names.length; i++) {\r\n                validateDirectiveName(names[i]);\r\n            }\r\n        }\r\n    }\r\n    // 0. create render proxy property access cache\r\n    instance.accessCache = Object.create(null);\r\n    // 1. create public instance / render proxy\r\n    // also mark it raw so it's never observed\r\n    instance.proxy = new Proxy(instance.ctx, PublicInstanceProxyHandlers);\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        exposePropsOnRenderContext(instance);\r\n    }\r\n    // 2. call setup()\r\n    const { setup } = Component;\r\n    if (setup) {\r\n        const setupContext = (instance.setupContext =\r\n            setup.length > 1 ? createSetupContext(instance) : null);\r\n        currentInstance = instance;\r\n        pauseTracking();\r\n        const setupResult = callWithErrorHandling(setup, instance, 0 /* SETUP_FUNCTION */, [(process.env.NODE_ENV !== 'production') ? shallowReadonly(instance.props) : instance.props, setupContext]);\r\n        resetTracking();\r\n        currentInstance = null;\r\n        if (isPromise(setupResult)) {\r\n            if (isSSR) {\r\n                // return the promise so server-renderer can wait on it\r\n                return setupResult\r\n                    .then((resolvedResult) => {\r\n                    handleSetupResult(instance, resolvedResult, isSSR);\r\n                })\r\n                    .catch(e => {\r\n                    handleError(e, instance, 0 /* SETUP_FUNCTION */);\r\n                });\r\n            }\r\n            else {\r\n                // async setup returned Promise.\r\n                // bail here and wait for re-entry.\r\n                instance.asyncDep = setupResult;\r\n            }\r\n        }\r\n        else {\r\n            handleSetupResult(instance, setupResult, isSSR);\r\n        }\r\n    }\r\n    else {\r\n        finishComponentSetup(instance, isSSR);\r\n    }\r\n}\r\nfunction handleSetupResult(instance, setupResult, isSSR) {\r\n    if (isFunction(setupResult)) {\r\n        // setup returned an inline render function\r\n        {\r\n            instance.render = setupResult;\r\n        }\r\n    }\r\n    else if (isObject(setupResult)) {\r\n        if ((process.env.NODE_ENV !== 'production') && isVNode(setupResult)) {\r\n            warn(`setup() should not return VNodes directly - ` +\r\n                `return a render function instead.`);\r\n        }\r\n        // setup returned bindings.\r\n        // assuming a render function compiled from template is present.\r\n        if ((process.env.NODE_ENV !== 'production') || __VUE_PROD_DEVTOOLS__) {\r\n            instance.devtoolsRawSetupState = setupResult;\r\n        }\r\n        instance.setupState = proxyRefs(setupResult);\r\n        if ((process.env.NODE_ENV !== 'production')) {\r\n            exposeSetupStateOnRenderContext(instance);\r\n        }\r\n    }\r\n    else if ((process.env.NODE_ENV !== 'production') && setupResult !== undefined) {\r\n        warn(`setup() should return an object. Received: ${setupResult === null ? 'null' : typeof setupResult}`);\r\n    }\r\n    finishComponentSetup(instance, isSSR);\r\n}\r\nlet compile;\r\n// dev only\r\nconst isRuntimeOnly = () => !compile;\r\n/**\r\n * For runtime-dom to register the compiler.\r\n * Note the exported method uses any to avoid d.ts relying on the compiler types.\r\n */\r\nfunction registerRuntimeCompiler(_compile) {\r\n    compile = _compile;\r\n}\r\nfunction finishComponentSetup(instance, isSSR) {\r\n    const Component = instance.type;\r\n    // template / render function normalization\r\n    if (!instance.render) {\r\n        // could be set from setup()\r\n        if (compile && Component.template && !Component.render) {\r\n            if ((process.env.NODE_ENV !== 'production')) {\r\n                startMeasure(instance, `compile`);\r\n            }\r\n            Component.render = compile(Component.template, {\r\n                isCustomElement: instance.appContext.config.isCustomElement,\r\n                delimiters: Component.delimiters\r\n            });\r\n            if ((process.env.NODE_ENV !== 'production')) {\r\n                endMeasure(instance, `compile`);\r\n            }\r\n        }\r\n        instance.render = (Component.render || NOOP);\r\n        // for runtime-compiled render functions using `with` blocks, the render\r\n        // proxy used needs a different `has` handler which is more performant and\r\n        // also only allows a whitelist of globals to fallthrough.\r\n        if (instance.render._rc) {\r\n            instance.withProxy = new Proxy(instance.ctx, RuntimeCompiledPublicInstanceProxyHandlers);\r\n        }\r\n    }\r\n    // support for 2.x options\r\n    if (__VUE_OPTIONS_API__) {\r\n        currentInstance = instance;\r\n        pauseTracking();\r\n        applyOptions(instance, Component);\r\n        resetTracking();\r\n        currentInstance = null;\r\n    }\r\n    // warn missing template/render\r\n    // the runtime compilation of template in SSR is done by server-render\r\n    if ((process.env.NODE_ENV !== 'production') && !Component.render && instance.render === NOOP && !isSSR) {\r\n        /* istanbul ignore if */\r\n        if (!compile && Component.template) {\r\n            warn(`Component provided template option but ` +\r\n                `runtime compilation is not supported in this build of Vue.` +\r\n                (` Configure your bundler to alias \"vue\" to \"vue/dist/vue.esm-bundler.js\".`\r\n                    ) /* should not happen */);\r\n        }\r\n        else {\r\n            warn(`Component is missing template or render function.`);\r\n        }\r\n    }\r\n}\r\nconst attrHandlers = {\r\n    get: (target, key) => {\r\n        if ((process.env.NODE_ENV !== 'production')) {\r\n            markAttrsAccessed();\r\n        }\r\n        return target[key];\r\n    },\r\n    set: () => {\r\n        warn(`setupContext.attrs is readonly.`);\r\n        return false;\r\n    },\r\n    deleteProperty: () => {\r\n        warn(`setupContext.attrs is readonly.`);\r\n        return false;\r\n    }\r\n};\r\nfunction createSetupContext(instance) {\r\n    const expose = exposed => {\r\n        if ((process.env.NODE_ENV !== 'production') && instance.exposed) {\r\n            warn(`expose() should be called only once per setup().`);\r\n        }\r\n        instance.exposed = proxyRefs(exposed);\r\n    };\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        // We use getters in dev in case libs like test-utils overwrite instance\r\n        // properties (overwrites should not be done in prod)\r\n        return Object.freeze({\r\n            get attrs() {\r\n                return new Proxy(instance.attrs, attrHandlers);\r\n            },\r\n            get slots() {\r\n                return shallowReadonly(instance.slots);\r\n            },\r\n            get emit() {\r\n                return (event, ...args) => instance.emit(event, ...args);\r\n            },\r\n            expose\r\n        });\r\n    }\r\n    else {\r\n        return {\r\n            attrs: instance.attrs,\r\n            slots: instance.slots,\r\n            emit: instance.emit,\r\n            expose\r\n        };\r\n    }\r\n}\r\n// record effects created during a component's setup() so that they can be\r\n// stopped when the component unmounts\r\nfunction recordInstanceBoundEffect(effect, instance = currentInstance) {\r\n    if (instance) {\r\n        (instance.effects || (instance.effects = [])).push(effect);\r\n    }\r\n}\r\nconst classifyRE = /(?:^|[-_])(\\w)/g;\r\nconst classify = (str) => str.replace(classifyRE, c => c.toUpperCase()).replace(/[-_]/g, '');\r\nfunction getComponentName(Component) {\r\n    return isFunction(Component)\r\n        ? Component.displayName || Component.name\r\n        : Component.name;\r\n}\r\n/* istanbul ignore next */\r\nfunction formatComponentName(instance, Component, isRoot = false) {\r\n    let name = getComponentName(Component);\r\n    if (!name && Component.__file) {\r\n        const match = Component.__file.match(/([^/\\\\]+)\\.\\w+$/);\r\n        if (match) {\r\n            name = match[1];\r\n        }\r\n    }\r\n    if (!name && instance && instance.parent) {\r\n        // try to infer the name based on reverse resolution\r\n        const inferFromRegistry = (registry) => {\r\n            for (const key in registry) {\r\n                if (registry[key] === Component) {\r\n                    return key;\r\n                }\r\n            }\r\n        };\r\n        name =\r\n            inferFromRegistry(instance.components ||\r\n                instance.parent.type.components) || inferFromRegistry(instance.appContext.components);\r\n    }\r\n    return name ? classify(name) : isRoot ? `App` : `Anonymous`;\r\n}\r\nfunction isClassComponent(value) {\r\n    return isFunction(value) && '__vccOpts' in value;\r\n}\n\nfunction computed(getterOrOptions) {\r\n    const c = computed$1(getterOrOptions);\r\n    recordInstanceBoundEffect(c.effect);\r\n    return c;\r\n}\n\n// implementation\r\nfunction defineProps() {\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        warn(`defineProps() is a compiler-hint helper that is only usable inside ` +\r\n            `<script setup> of a single file component. Its arguments should be ` +\r\n            `compiled away and passing it at runtime has no effect.`);\r\n    }\r\n    return null;\r\n}\r\n// implementation\r\nfunction defineEmit() {\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        warn(`defineEmit() is a compiler-hint helper that is only usable inside ` +\r\n            `<script setup> of a single file component. Its arguments should be ` +\r\n            `compiled away and passing it at runtime has no effect.`);\r\n    }\r\n    return null;\r\n}\r\nfunction useContext() {\r\n    const i = getCurrentInstance();\r\n    if ((process.env.NODE_ENV !== 'production') && !i) {\r\n        warn(`useContext() called without active instance.`);\r\n    }\r\n    return i.setupContext || (i.setupContext = createSetupContext(i));\r\n}\n\n// Actual implementation\r\nfunction h(type, propsOrChildren, children) {\r\n    const l = arguments.length;\r\n    if (l === 2) {\r\n        if (isObject(propsOrChildren) && !isArray(propsOrChildren)) {\r\n            // single vnode without props\r\n            if (isVNode(propsOrChildren)) {\r\n                return createVNode(type, null, [propsOrChildren]);\r\n            }\r\n            // props without children\r\n            return createVNode(type, propsOrChildren);\r\n        }\r\n        else {\r\n            // omit props\r\n            return createVNode(type, null, propsOrChildren);\r\n        }\r\n    }\r\n    else {\r\n        if (l > 3) {\r\n            children = Array.prototype.slice.call(arguments, 2);\r\n        }\r\n        else if (l === 3 && isVNode(children)) {\r\n            children = [children];\r\n        }\r\n        return createVNode(type, propsOrChildren, children);\r\n    }\r\n}\n\nconst ssrContextKey = Symbol((process.env.NODE_ENV !== 'production') ? `ssrContext` : ``);\r\nconst useSSRContext = () => {\r\n    {\r\n        const ctx = inject(ssrContextKey);\r\n        if (!ctx) {\r\n            warn(`Server rendering context not provided. Make sure to only call ` +\r\n                `useSSRContext() conditionally in the server build.`);\r\n        }\r\n        return ctx;\r\n    }\r\n};\n\nfunction initCustomFormatter() {\r\n    /* eslint-disable no-restricted-globals */\r\n    if (!(process.env.NODE_ENV !== 'production') || typeof window === 'undefined') {\r\n        return;\r\n    }\r\n    const vueStyle = { style: 'color:#3ba776' };\r\n    const numberStyle = { style: 'color:#0b1bc9' };\r\n    const stringStyle = { style: 'color:#b62e24' };\r\n    const keywordStyle = { style: 'color:#9d288c' };\r\n    // custom formatter for Chrome\r\n    // https://www.mattzeunert.com/2016/02/19/custom-chrome-devtools-object-formatters.html\r\n    const formatter = {\r\n        header(obj) {\r\n            // TODO also format ComponentPublicInstance & ctx.slots/attrs in setup\r\n            if (!isObject(obj)) {\r\n                return null;\r\n            }\r\n            if (obj.__isVue) {\r\n                return ['div', vueStyle, `VueInstance`];\r\n            }\r\n            else if (isRef(obj)) {\r\n                return [\r\n                    'div',\r\n                    {},\r\n                    ['span', vueStyle, genRefFlag(obj)],\r\n                    '<',\r\n                    formatValue(obj.value),\r\n                    `>`\r\n                ];\r\n            }\r\n            else if (isReactive(obj)) {\r\n                return [\r\n                    'div',\r\n                    {},\r\n                    ['span', vueStyle, 'Reactive'],\r\n                    '<',\r\n                    formatValue(obj),\r\n                    `>${isReadonly(obj) ? ` (readonly)` : ``}`\r\n                ];\r\n            }\r\n            else if (isReadonly(obj)) {\r\n                return [\r\n                    'div',\r\n                    {},\r\n                    ['span', vueStyle, 'Readonly'],\r\n                    '<',\r\n                    formatValue(obj),\r\n                    '>'\r\n                ];\r\n            }\r\n            return null;\r\n        },\r\n        hasBody(obj) {\r\n            return obj && obj.__isVue;\r\n        },\r\n        body(obj) {\r\n            if (obj && obj.__isVue) {\r\n                return [\r\n                    'div',\r\n                    {},\r\n                    ...formatInstance(obj.$)\r\n                ];\r\n            }\r\n        }\r\n    };\r\n    function formatInstance(instance) {\r\n        const blocks = [];\r\n        if (instance.type.props && instance.props) {\r\n            blocks.push(createInstanceBlock('props', toRaw(instance.props)));\r\n        }\r\n        if (instance.setupState !== EMPTY_OBJ) {\r\n            blocks.push(createInstanceBlock('setup', instance.setupState));\r\n        }\r\n        if (instance.data !== EMPTY_OBJ) {\r\n            blocks.push(createInstanceBlock('data', toRaw(instance.data)));\r\n        }\r\n        const computed = extractKeys(instance, 'computed');\r\n        if (computed) {\r\n            blocks.push(createInstanceBlock('computed', computed));\r\n        }\r\n        const injected = extractKeys(instance, 'inject');\r\n        if (injected) {\r\n            blocks.push(createInstanceBlock('injected', injected));\r\n        }\r\n        blocks.push([\r\n            'div',\r\n            {},\r\n            [\r\n                'span',\r\n                {\r\n                    style: keywordStyle.style + ';opacity:0.66'\r\n                },\r\n                '$ (internal): '\r\n            ],\r\n            ['object', { object: instance }]\r\n        ]);\r\n        return blocks;\r\n    }\r\n    function createInstanceBlock(type, target) {\r\n        target = extend({}, target);\r\n        if (!Object.keys(target).length) {\r\n            return ['span', {}];\r\n        }\r\n        return [\r\n            'div',\r\n            { style: 'line-height:1.25em;margin-bottom:0.6em' },\r\n            [\r\n                'div',\r\n                {\r\n                    style: 'color:#476582'\r\n                },\r\n                type\r\n            ],\r\n            [\r\n                'div',\r\n                {\r\n                    style: 'padding-left:1.25em'\r\n                },\r\n                ...Object.keys(target).map(key => {\r\n                    return [\r\n                        'div',\r\n                        {},\r\n                        ['span', keywordStyle, key + ': '],\r\n                        formatValue(target[key], false)\r\n                    ];\r\n                })\r\n            ]\r\n        ];\r\n    }\r\n    function formatValue(v, asRaw = true) {\r\n        if (typeof v === 'number') {\r\n            return ['span', numberStyle, v];\r\n        }\r\n        else if (typeof v === 'string') {\r\n            return ['span', stringStyle, JSON.stringify(v)];\r\n        }\r\n        else if (typeof v === 'boolean') {\r\n            return ['span', keywordStyle, v];\r\n        }\r\n        else if (isObject(v)) {\r\n            return ['object', { object: asRaw ? toRaw(v) : v }];\r\n        }\r\n        else {\r\n            return ['span', stringStyle, String(v)];\r\n        }\r\n    }\r\n    function extractKeys(instance, type) {\r\n        const Comp = instance.type;\r\n        if (isFunction(Comp)) {\r\n            return;\r\n        }\r\n        const extracted = {};\r\n        for (const key in instance.ctx) {\r\n            if (isKeyOfType(Comp, key, type)) {\r\n                extracted[key] = instance.ctx[key];\r\n            }\r\n        }\r\n        return extracted;\r\n    }\r\n    function isKeyOfType(Comp, key, type) {\r\n        const opts = Comp[type];\r\n        if ((isArray(opts) && opts.includes(key)) ||\r\n            (isObject(opts) && key in opts)) {\r\n            return true;\r\n        }\r\n        if (Comp.extends && isKeyOfType(Comp.extends, key, type)) {\r\n            return true;\r\n        }\r\n        if (Comp.mixins && Comp.mixins.some(m => isKeyOfType(m, key, type))) {\r\n            return true;\r\n        }\r\n    }\r\n    function genRefFlag(v) {\r\n        if (v._shallow) {\r\n            return `ShallowRef`;\r\n        }\r\n        if (v.effect) {\r\n            return `ComputedRef`;\r\n        }\r\n        return `Ref`;\r\n    }\r\n    if (window.devtoolsFormatters) {\r\n        window.devtoolsFormatters.push(formatter);\r\n    }\r\n    else {\r\n        window.devtoolsFormatters = [formatter];\r\n    }\r\n}\n\n/**\r\n * Actual implementation\r\n */\r\nfunction renderList(source, renderItem) {\r\n    let ret;\r\n    if (isArray(source) || isString(source)) {\r\n        ret = new Array(source.length);\r\n        for (let i = 0, l = source.length; i < l; i++) {\r\n            ret[i] = renderItem(source[i], i);\r\n        }\r\n    }\r\n    else if (typeof source === 'number') {\r\n        if ((process.env.NODE_ENV !== 'production') && !Number.isInteger(source)) {\r\n            warn(`The v-for range expect an integer value but got ${source}.`);\r\n            return [];\r\n        }\r\n        ret = new Array(source);\r\n        for (let i = 0; i < source; i++) {\r\n            ret[i] = renderItem(i + 1, i);\r\n        }\r\n    }\r\n    else if (isObject(source)) {\r\n        if (source[Symbol.iterator]) {\r\n            ret = Array.from(source, renderItem);\r\n        }\r\n        else {\r\n            const keys = Object.keys(source);\r\n            ret = new Array(keys.length);\r\n            for (let i = 0, l = keys.length; i < l; i++) {\r\n                const key = keys[i];\r\n                ret[i] = renderItem(source[key], key, i);\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        ret = [];\r\n    }\r\n    return ret;\r\n}\n\n/**\r\n * For prefixing keys in v-on=\"obj\" with \"on\"\r\n * @private\r\n */\r\nfunction toHandlers(obj) {\r\n    const ret = {};\r\n    if ((process.env.NODE_ENV !== 'production') && !isObject(obj)) {\r\n        warn(`v-on with no argument expects an object value.`);\r\n        return ret;\r\n    }\r\n    for (const key in obj) {\r\n        ret[toHandlerKey(key)] = obj[key];\r\n    }\r\n    return ret;\r\n}\n\n/**\r\n * Compiler runtime helper for creating dynamic slots object\r\n * @private\r\n */\r\nfunction createSlots(slots, dynamicSlots) {\r\n    for (let i = 0; i < dynamicSlots.length; i++) {\r\n        const slot = dynamicSlots[i];\r\n        // array of dynamic slot generated by <template v-for=\"...\" #[...]>\r\n        if (isArray(slot)) {\r\n            for (let j = 0; j < slot.length; j++) {\r\n                slots[slot[j].name] = slot[j].fn;\r\n            }\r\n        }\r\n        else if (slot) {\r\n            // conditional single slot generated by <template v-if=\"...\" #foo>\r\n            slots[slot.name] = slot.fn;\r\n        }\r\n    }\r\n    return slots;\r\n}\n\n// Core API ------------------------------------------------------------------\r\nconst version = \"3.0.10\";\r\n/**\r\n * SSR utils for \\@vue/server-renderer. Only exposed in cjs builds.\r\n * @internal\r\n */\r\nconst ssrUtils = (null);\n\nexport { BaseTransition, Comment, Fragment, KeepAlive, Static, Suspense, Teleport, Text, callWithAsyncErrorHandling, callWithErrorHandling, cloneVNode, computed, createBlock, createCommentVNode, createHydrationRenderer, createRenderer, createSlots, createStaticVNode, createTextVNode, createVNode, defineAsyncComponent, defineComponent, defineEmit, defineProps, devtools, getCurrentInstance, getTransitionRawChildren, h, handleError, initCustomFormatter, inject, isRuntimeOnly, isVNode, mergeProps, nextTick, onActivated, onBeforeMount, onBeforeUnmount, onBeforeUpdate, onDeactivated, onErrorCaptured, onMounted, onRenderTracked, onRenderTriggered, onUnmounted, onUpdated, openBlock, popScopeId, provide, pushScopeId, queuePostFlushCb, registerRuntimeCompiler, renderList, renderSlot, resolveComponent, resolveDirective, resolveDynamicComponent, resolveTransitionHooks, setBlockTracking, setDevtoolsHook, setTransitionHooks, ssrContextKey, ssrUtils, toHandlers, transformVNodeArgs, useContext, useSSRContext, useTransitionState, version, warn, watch, watchEffect, withCtx, withDirectives, withScopeId };\n"],"sourceRoot":""}